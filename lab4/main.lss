
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  000002f0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004e  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ea  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000096  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c9  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000095  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  8a:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
#include <util/delay.h>

volatile uint8_t anode=0;
volatile uint8_t digit[4]={8,9,9,9};

ISR(TIMER1_COMPA_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24

digit[0]++;
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 60 00 	sts	0x0060, r24
if(digit[0]>9)
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	18 f1       	brcs	.+70     	; 0xf6 <__vector_7+0x64>
{
digit[0]=0;
  b0:	10 92 60 00 	sts	0x0060, r1
digit[1]++;
  b4:	80 91 61 00 	lds	r24, 0x0061
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 61 00 	sts	0x0061, r24
if(digit[1]>9){
  be:	80 91 61 00 	lds	r24, 0x0061
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	c0 f0       	brcs	.+48     	; 0xf6 <__vector_7+0x64>
digit[1]=0;
  c6:	10 92 61 00 	sts	0x0061, r1
digit[2]++;
  ca:	80 91 62 00 	lds	r24, 0x0062
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 62 00 	sts	0x0062, r24
if(digit[2]>9){
  d4:	80 91 62 00 	lds	r24, 0x0062
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	68 f0       	brcs	.+26     	; 0xf6 <__vector_7+0x64>
digit[2]=0;
  dc:	10 92 62 00 	sts	0x0062, r1
digit[3]++;
  e0:	80 91 63 00 	lds	r24, 0x0063
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 63 00 	sts	0x0063, r24
if(digit[3]>9){
  ea:	80 91 63 00 	lds	r24, 0x0063
  ee:	8a 30       	cpi	r24, 0x0A	; 10
  f0:	10 f0       	brcs	.+4      	; 0xf6 <__vector_7+0x64>
digit[3]=0;
  f2:	10 92 63 00 	sts	0x0063, r1
}

}
}
}
}
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_10>:

ISR(TIMER0_COMP_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
anode++;
 116:	80 91 64 00 	lds	r24, 0x0064
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 64 00 	sts	0x0064, r24
if(anode>3) anode=0;
 120:	80 91 64 00 	lds	r24, 0x0064
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	10 f0       	brcs	.+4      	; 0x12c <__vector_10+0x2a>
 128:	10 92 64 00 	sts	0x0064, r1
PORTA=~(1<<anode);
 12c:	20 91 64 00 	lds	r18, 0x0064
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_10+0x38>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	2a 95       	dec	r18
 13c:	e2 f7       	brpl	.-8      	; 0x136 <__vector_10+0x34>
 13e:	80 95       	com	r24
 140:	8b bb       	out	0x1b, r24	; 27
if(digit[anode]==0)PORTC=0b11000000;
 142:	e0 91 64 00 	lds	r30, 0x0064
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e0 5a       	subi	r30, 0xA0	; 160
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	11 f4       	brne	.+4      	; 0x156 <__vector_10+0x54>
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==1)PORTC=0b11111001;
 156:	e0 91 64 00 	lds	r30, 0x0064
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e0 5a       	subi	r30, 0xA0	; 160
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	11 f4       	brne	.+4      	; 0x16a <__vector_10+0x68>
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==2)PORTC=0b10100100;
 16a:	e0 91 64 00 	lds	r30, 0x0064
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	80 81       	ld	r24, Z
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	11 f4       	brne	.+4      	; 0x17e <__vector_10+0x7c>
 17a:	84 ea       	ldi	r24, 0xA4	; 164
 17c:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==3)PORTC=0b10110000;
 17e:	e0 91 64 00 	lds	r30, 0x0064
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	11 f4       	brne	.+4      	; 0x192 <__vector_10+0x90>
 18e:	80 eb       	ldi	r24, 0xB0	; 176
 190:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==4)PORTC=0b10011001;
 192:	e0 91 64 00 	lds	r30, 0x0064
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e0 5a       	subi	r30, 0xA0	; 160
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	84 30       	cpi	r24, 0x04	; 4
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <__vector_10+0xa4>
 1a2:	89 e9       	ldi	r24, 0x99	; 153
 1a4:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==5)PORTC=0b10010010;
 1a6:	e0 91 64 00 	lds	r30, 0x0064
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e0 5a       	subi	r30, 0xA0	; 160
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	80 81       	ld	r24, Z
 1b2:	85 30       	cpi	r24, 0x05	; 5
 1b4:	11 f4       	brne	.+4      	; 0x1ba <__vector_10+0xb8>
 1b6:	82 e9       	ldi	r24, 0x92	; 146
 1b8:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==6)PORTC=0b10000010;
 1ba:	e0 91 64 00 	lds	r30, 0x0064
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	e0 5a       	subi	r30, 0xA0	; 160
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	11 f4       	brne	.+4      	; 0x1ce <__vector_10+0xcc>
 1ca:	82 e8       	ldi	r24, 0x82	; 130
 1cc:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==7)PORTC=0b11111000;
 1ce:	e0 91 64 00 	lds	r30, 0x0064
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e0 5a       	subi	r30, 0xA0	; 160
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 81       	ld	r24, Z
 1da:	87 30       	cpi	r24, 0x07	; 7
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <__vector_10+0xe0>
 1de:	88 ef       	ldi	r24, 0xF8	; 248
 1e0:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==8)PORTC=0b10000000;
 1e2:	e0 91 64 00 	lds	r30, 0x0064
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e0 5a       	subi	r30, 0xA0	; 160
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <__vector_10+0xf4>
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	85 bb       	out	0x15, r24	; 21
if(digit[anode]==9)PORTC=0b10010000;
 1f6:	e0 91 64 00 	lds	r30, 0x0064
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e0 5a       	subi	r30, 0xA0	; 160
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	80 81       	ld	r24, Z
 202:	89 30       	cpi	r24, 0x09	; 9
 204:	11 f4       	brne	.+4      	; 0x20a <__vector_10+0x108>
 206:	80 e9       	ldi	r24, 0x90	; 144
 208:	85 bb       	out	0x15, r24	; 21



}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <main>:

int main(void){


DDRA=0XFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	8a bb       	out	0x1a, r24	; 26
DDRC=0xff;
 222:	84 bb       	out	0x14, r24	; 20
PORTC=0x00;
 224:	15 ba       	out	0x15, r1	; 21


TCCR0|=(1<<WGM01);
 226:	83 b7       	in	r24, 0x33	; 51
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<CS02)|(1<<CS00);
 22c:	83 b7       	in	r24, 0x33	; 51
 22e:	85 60       	ori	r24, 0x05	; 5
 230:	83 bf       	out	0x33, r24	; 51
OCR0=20;
 232:	84 e1       	ldi	r24, 0x14	; 20
 234:	8c bf       	out	0x3c, r24	; 60
TIMSK|=(1<<OCIE0);
 236:	89 b7       	in	r24, 0x39	; 57
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	89 bf       	out	0x39, r24	; 57

TCCR1B|=(1<<WGM12)|(1<<CS12)|(1<<CS10);
 23c:	8e b5       	in	r24, 0x2e	; 46
 23e:	8d 60       	ori	r24, 0x0D	; 13
 240:	8e bd       	out	0x2e, r24	; 46
OCR1A=10800;
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	9a e2       	ldi	r25, 0x2A	; 42
 246:	9b bd       	out	0x2b, r25	; 43
 248:	8a bd       	out	0x2a, r24	; 42

TIMSK|=(1<<OCIE1A);
 24a:	89 b7       	in	r24, 0x39	; 57
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	89 bf       	out	0x39, r24	; 57
sei();
 250:	78 94       	sei
 252:	ff cf       	rjmp	.-2      	; 0x252 <main+0x34>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
