
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  00000256  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000094  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002c0  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000179  00000000  00000000  000005ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00000743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000118  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  8a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
#include <util/delay.h>
volatile uint8_t znak=0;

void USART_Init(unsigned int baud){
/* Set baud rate */
UBRRH = (unsigned char)(baud>>8);
  92:	90 bd       	out	0x20, r25	; 32
UBRRL = (unsigned char)baud;
  94:	89 b9       	out	0x09, r24	; 9
/* Enable receiver and transmitter */
UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  96:	88 e9       	ldi	r24, 0x98	; 152
  98:	8a b9       	out	0x0a, r24	; 10
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0)|(0<<UMSEL);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
//UCSRC = (3<<UCSZ0);
}
  9e:	08 95       	ret

000000a0 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Transmit>
;
/* Put data into buffer, sends the data */
UDR = data;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <USART_Receive>:

unsigned char USART_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <USART_Receive>
;
/* Get and return received data from buffer */
return UDR;
  ac:	8c b1       	in	r24, 0x0c	; 12
}
  ae:	08 95       	ret

000000b0 <send_text>:




void send_text(char *text)
{
  b0:	20 e0       	ldi	r18, 0x00	; 0
uint8_t i=0;
while(1){
if(text[i]==0x0000){
  b2:	fc 01       	movw	r30, r24
  b4:	e2 0f       	add	r30, r18
  b6:	f1 1d       	adc	r31, r1
  b8:	e0 81       	ld	r30, Z
  ba:	ee 23       	and	r30, r30
  bc:	29 f0       	breq	.+10     	; 0xc8 <send_text+0x18>
}

void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <send_text+0xe>
;
/* Put data into buffer, sends the data */
UDR = data;
  c2:	ec b9       	out	0x0c, r30	; 12
if(text[i]==0x0000){
break;
}
else{
USART_Transmit(text[i]);
i++;
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	f5 cf       	rjmp	.-22     	; 0xb2 <send_text+0x2>
  c8:	08 95       	ret

000000ca <__vector_13>:
}

}
}

ISR (USART_RXC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
}

unsigned char USART_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <__vector_13+0xc>
;
/* Get and return received data from buffer */
return UDR;
  da:	8c b1       	in	r24, 0x0c	; 12

}
}

ISR (USART_RXC_vect){
znak=USART_Receive();
  dc:	80 93 6e 00 	sts	0x006E, r24

}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <switch_led>:
		switch_led();
		_delay_ms(500);
	}

void switch_led(void){
if(PINC & (1<<PC0)){
  ec:	98 9b       	sbis	0x13, 0	; 19
  ee:	0a c0       	rjmp	.+20     	; 0x104 <switch_led+0x18>

send_text("led on");
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <send_text>
}

void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <switch_led+0xc>
;
/* Put data into buffer, sends the data */
UDR = data;
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	8c b9       	out	0x0c, r24	; 12
void switch_led(void){
if(PINC & (1<<PC0)){

send_text("led on");
USART_Transmit('\n');
PORTC=(0<<PC0);
 100:	15 ba       	out	0x15, r1	; 21
 102:	08 95       	ret

}
else {

PORTC=(1<<PC0);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	85 bb       	out	0x15, r24	; 21
send_text("led of");
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <send_text>
}

void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <switch_led+0x24>
;
/* Put data into buffer, sends the data */
UDR = data;
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	8c b9       	out	0x0c, r24	; 12
 118:	08 95       	ret

0000011a <__vector_1>:
ISR (USART_RXC_vect){
znak=USART_Receive();

}

ISR(INT0_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
		switch_led();
 13c:	0e 94 76 00 	call	0xec	; 0xec <switch_led>
 140:	88 e8       	ldi	r24, 0x88	; 136
 142:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	24 e1       	ldi	r18, 0x14	; 20
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	f9 01       	movw	r30, r18
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__vector_1+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d9 f7       	brne	.-10     	; 0x148 <__vector_1+0x2e>
		_delay_ms(500);
	}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:

}
}

int main(void){
DDRC=0x01;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	84 bb       	out	0x14, r24	; 20
PORTC=0x01;
 178:	85 bb       	out	0x15, r24	; 21
DDRD&=~(1<<PD2);
 17a:	8a 98       	cbi	0x11, 2	; 17
GICR|=(1<<INT0);
 17c:	8b b7       	in	r24, 0x3b	; 59
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	8b bf       	out	0x3b, r24	; 59
MCUCR|=(1<<ISC01);
 182:	85 b7       	in	r24, 0x35	; 53
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 bf       	out	0x35, r24	; 53
MCUCR&=~(1<<ISC00);
 188:	85 b7       	in	r24, 0x35	; 53
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	85 bf       	out	0x35, r24	; 53
sei();
 18e:	78 94       	sei
#include <util/delay.h>
volatile uint8_t znak=0;

void USART_Init(unsigned int baud){
/* Set baud rate */
UBRRH = (unsigned char)(baud>>8);
 190:	10 bc       	out	0x20, r1	; 32
UBRRL = (unsigned char)baud;
 192:	87 e4       	ldi	r24, 0x47	; 71
 194:	89 b9       	out	0x09, r24	; 9
/* Enable receiver and transmitter */
UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 196:	88 e9       	ldi	r24, 0x98	; 152
 198:	8a b9       	out	0x0a, r24	; 10
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0)|(0<<UMSEL);
 19a:	86 e8       	ldi	r24, 0x86	; 134
 19c:	80 bd       	out	0x20, r24	; 32




while(1){
if(znak=='a'){
 19e:	80 91 6e 00 	lds	r24, 0x006E
 1a2:	81 36       	cpi	r24, 0x61	; 97
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x2a>
switch_led();
 1a6:	0e 94 76 00 	call	0xec	; 0xec <switch_led>
znak=0;
 1aa:	10 92 6e 00 	sts	0x006E, r1
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <main+0x2a>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
