
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004fc  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000104  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009f9  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002fa  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000072e  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b0  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000032d  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000020ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  7a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <start>:
#define SLA_W 0b11010000
#define SLA_R 0b11010001
#define SECOND 0x70

void start(void){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  82:	84 ea       	ldi	r24, 0xA4	; 164
  84:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <start+0x4>
}
  8c:	08 95       	ret

0000008e <stop>:

void stop(void){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  8e:	84 e9       	ldi	r24, 0x94	; 148
  90:	86 bf       	out	0x36, r24	; 54
}
  92:	08 95       	ret

00000094 <read_byte>:



uint8_t read_byte(void){
	//TWDR = SLA_W;
	TWCR = (1<<TWINT) | (1<<TWEN);
  94:	84 e8       	ldi	r24, 0x84	; 132
  96:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <read_byte+0x4>
	
	return TWDR;
  9e:	83 b1       	in	r24, 0x03	; 3
}
  a0:	08 95       	ret

000000a2 <write_byte>:


void write_byte(uint8_t DATA){
	TWDR = DATA;
  a2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  a4:	84 e8       	ldi	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <write_byte+0x6>
}
  ae:	08 95       	ret

000000b0 <i2c_send>:


void i2c_send(uint8_t addr, uint8_t data){
  b0:	98 2f       	mov	r25, r24
#define SLA_W 0b11010000
#define SLA_R 0b11010001
#define SECOND 0x70

void start(void){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <i2c_send+0x6>
	return TWDR;
}


void write_byte(uint8_t DATA){
	TWDR = DATA;
  bc:	80 ed       	ldi	r24, 0xD0	; 208
  be:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  c0:	84 e8       	ldi	r24, 0x84	; 132
  c2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  c4:	06 b6       	in	r0, 0x36	; 54
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <i2c_send+0x14>
	return TWDR;
}


void write_byte(uint8_t DATA){
	TWDR = DATA;
  ca:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <i2c_send+0x20>
	return TWDR;
}


void write_byte(uint8_t DATA){
	TWDR = DATA;
  d6:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  d8:	84 e8       	ldi	r24, 0x84	; 132
  da:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  dc:	06 b6       	in	r0, 0x36	; 54
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <i2c_send+0x2c>
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

void stop(void){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  e2:	84 e9       	ldi	r24, 0x94	; 148
  e4:	86 bf       	out	0x36, r24	; 54
	start();
	write_byte(SLA_W);
	write_byte(addr);
	write_byte(data);
	stop();
}
  e6:	08 95       	ret

000000e8 <i2c_recive>:

uint8_t i2c_recive(uint8_t addr){
  e8:	98 2f       	mov	r25, r24
#define SLA_W 0b11010000
#define SLA_R 0b11010001
#define SECOND 0x70

void start(void){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  ea:	84 ea       	ldi	r24, 0xA4	; 164
  ec:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <i2c_recive+0x6>
	return TWDR;
}


void write_byte(uint8_t DATA){
	TWDR = DATA;
  f4:	80 ed       	ldi	r24, 0xD0	; 208
  f6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  f8:	84 e8       	ldi	r24, 0x84	; 132
  fa:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  fc:	06 b6       	in	r0, 0x36	; 54
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <i2c_recive+0x14>
	return TWDR;
}


void write_byte(uint8_t DATA){
	TWDR = DATA;
 102:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <i2c_recive+0x20>
#define SLA_W 0b11010000
#define SLA_R 0b11010001
#define SECOND 0x70

void start(void){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 10e:	84 ea       	ldi	r24, 0xA4	; 164
 110:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <i2c_recive+0x2a>
	return TWDR;
}


void write_byte(uint8_t DATA){
	TWDR = DATA;
 118:	81 ed       	ldi	r24, 0xD1	; 209
 11a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <i2c_recive+0x38>



uint8_t read_byte(void){
	//TWDR = SLA_W;
	TWCR = (1<<TWINT) | (1<<TWEN);
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 12a:	06 b6       	in	r0, 0x36	; 54
 12c:	07 fe       	sbrs	r0, 7
 12e:	fd cf       	rjmp	.-6      	; 0x12a <i2c_recive+0x42>
	
	return TWDR;
 130:	83 b1       	in	r24, 0x03	; 3
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

void stop(void){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 132:	94 e9       	ldi	r25, 0x94	; 148
 134:	96 bf       	out	0x36, r25	; 54
	start();
	write_byte(SLA_R);
	uint8_t temp=read_byte();
	stop();
	return temp;
}
 136:	08 95       	ret

00000138 <main>:

int main(void){
 138:	6f 92       	push	r6
 13a:	7f 92       	push	r7
 13c:	8f 92       	push	r8
 13e:	9f 92       	push	r9
 140:	af 92       	push	r10
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
uint8_t day,mounth,year,hours,minutes,seconds;

TWBR=3;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 b9       	out	0x00, r24	; 0
TWSR|=(1<<TWPS1)|(1<<TWPS0);
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	81 b9       	out	0x01, r24	; 1


i2c_send(0x00,0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_send>
i2c_send(0x02,0b00001010);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	6a e0       	ldi	r22, 0x0A	; 10
 16a:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_send>
lcdinit();
 16e:	0e 94 9c 01 	call	0x338	; 0x338 <lcdinit>
 172:	88 ee       	ldi	r24, 0xE8	; 232
 174:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 176:	24 e1       	ldi	r18, 0x14	; 20
 178:	31 e0       	ldi	r19, 0x01	; 1
 17a:	f9 01       	movw	r30, r18
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 182:	d9 f7       	brne	.-10     	; 0x17a <main+0x42>
_delay_ms(100);
goto_xy(0,0);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	0e 94 10 02 	call	0x420	; 0x420 <goto_xy>
 18c:	c4 e1       	ldi	r28, 0x14	; 20
 18e:	d1 e0       	ldi	r29, 0x01	; 1

while(1){

seconds=i2c_recive(0x00);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_recive>
 196:	c8 2e       	mov	r12, r24
minutes=i2c_recive(0x01);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_recive>
 19e:	e8 2e       	mov	r14, r24
hours=i2c_recive(0x02);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_recive>
 1a6:	08 2f       	mov	r16, r24
day=i2c_recive(0x04);
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_recive>
 1ae:	a8 2e       	mov	r10, r24
mounth=i2c_recive(0x05);
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_recive>
 1b6:	88 2e       	mov	r8, r24
year=i2c_recive(0x06);
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_recive>
 1be:	68 2e       	mov	r6, r24

lcd_int((hours&0x70)>>4);
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	c8 01       	movw	r24, r16
 1c4:	80 77       	andi	r24, 0x70	; 112
 1c6:	90 70       	andi	r25, 0x00	; 0
 1c8:	74 e0       	ldi	r23, 0x04	; 4
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	7a 95       	dec	r23
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x92>
 1d2:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_int((hours&0x0F));
 1d6:	c8 01       	movw	r24, r16
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	90 70       	andi	r25, 0x00	; 0
 1dc:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_text(":");
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
lcd_int((minutes&0x70)>>4);
 1e8:	ff 24       	eor	r15, r15
 1ea:	c7 01       	movw	r24, r14
 1ec:	80 77       	andi	r24, 0x70	; 112
 1ee:	90 70       	andi	r25, 0x00	; 0
 1f0:	64 e0       	ldi	r22, 0x04	; 4
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	6a 95       	dec	r22
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0xba>
 1fa:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_int((minutes&0x0F));
 1fe:	c7 01       	movw	r24, r14
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	90 70       	andi	r25, 0x00	; 0
 204:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_text(":");
 208:	80 e6       	ldi	r24, 0x60	; 96
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
lcd_int((seconds&0x70)>>4);
 210:	dd 24       	eor	r13, r13
 212:	c6 01       	movw	r24, r12
 214:	80 77       	andi	r24, 0x70	; 112
 216:	90 70       	andi	r25, 0x00	; 0
 218:	54 e0       	ldi	r21, 0x04	; 4
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	5a 95       	dec	r21
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0xe2>
 222:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_int((seconds&0x0F));
 226:	c6 01       	movw	r24, r12
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	90 70       	andi	r25, 0x00	; 0
 22c:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
goto_xy(0,1);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	0e 94 10 02 	call	0x420	; 0x420 <goto_xy>

lcd_int((day&0x70)>>4);
 238:	bb 24       	eor	r11, r11
 23a:	c5 01       	movw	r24, r10
 23c:	80 77       	andi	r24, 0x70	; 112
 23e:	90 70       	andi	r25, 0x00	; 0
 240:	44 e0       	ldi	r20, 0x04	; 4
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	4a 95       	dec	r20
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x10a>
 24a:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_int((day&0x0F));
 24e:	c5 01       	movw	r24, r10
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	90 70       	andi	r25, 0x00	; 0
 254:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_text(".");
 258:	82 e6       	ldi	r24, 0x62	; 98
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
lcd_int((mounth&0x70)>>4);
 260:	99 24       	eor	r9, r9
 262:	c4 01       	movw	r24, r8
 264:	80 77       	andi	r24, 0x70	; 112
 266:	90 70       	andi	r25, 0x00	; 0
 268:	34 e0       	ldi	r19, 0x04	; 4
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	3a 95       	dec	r19
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x132>
 272:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_int((mounth&0x0F));
 276:	c4 01       	movw	r24, r8
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	90 70       	andi	r25, 0x00	; 0
 27c:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_text(".");
 280:	82 e6       	ldi	r24, 0x62	; 98
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
lcd_text("20");
 288:	84 e6       	ldi	r24, 0x64	; 100
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
lcd_int((year&0x70)>>4);
 290:	77 24       	eor	r7, r7
 292:	c3 01       	movw	r24, r6
 294:	80 77       	andi	r24, 0x70	; 112
 296:	90 70       	andi	r25, 0x00	; 0
 298:	24 e0       	ldi	r18, 0x04	; 4
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	2a 95       	dec	r18
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x162>
 2a2:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_int((year&0x0F));
 2a6:	c3 01       	movw	r24, r6
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	90 70       	andi	r25, 0x00	; 0
 2ac:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_int>
lcd_text("r");
 2b0:	87 e6       	ldi	r24, 0x67	; 103
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
 2b8:	88 e8       	ldi	r24, 0x88	; 136
 2ba:	93 e1       	ldi	r25, 0x13	; 19
 2bc:	fe 01       	movw	r30, r28
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x186>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <main+0x184>
_delay_ms(500);
lcd_clr();
 2c6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_clr>
 2ca:	62 cf       	rjmp	.-316    	; 0x190 <main+0x58>

000002cc <lcd_send_half_byte>:

#define CLR_RS LCD_PORT&=~(1<<LCD_RS)
#define CLR_E LCD_PORT&=~(1<<LCD_E)

static inline void lcd_send_half_byte(uint8_t data){
	SET_E;
 2cc:	d9 9a       	sbi	0x1b, 1	; 27
	if(data & (1<<0)) LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
 2ce:	80 ff       	sbrs	r24, 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <lcd_send_half_byte+0xa>
 2d2:	da 9a       	sbi	0x1b, 2	; 27
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <lcd_send_half_byte+0xc>
 2d6:	da 98       	cbi	0x1b, 2	; 27
	if(data & (1<<1)) LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
 2d8:	81 ff       	sbrs	r24, 1
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <lcd_send_half_byte+0x14>
 2dc:	db 9a       	sbi	0x1b, 3	; 27
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <lcd_send_half_byte+0x16>
 2e0:	db 98       	cbi	0x1b, 3	; 27
	if(data & (1<<2)) LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
 2e2:	82 ff       	sbrs	r24, 2
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <lcd_send_half_byte+0x1e>
 2e6:	dc 9a       	sbi	0x1b, 4	; 27
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <lcd_send_half_byte+0x20>
 2ea:	dc 98       	cbi	0x1b, 4	; 27
	if(data & (1<<3)) LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
 2ec:	83 ff       	sbrs	r24, 3
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <lcd_send_half_byte+0x28>
 2f0:	dd 9a       	sbi	0x1b, 5	; 27
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <lcd_send_half_byte+0x2a>
 2f4:	dd 98       	cbi	0x1b, 5	; 27
	CLR_E;
 2f6:	d9 98       	cbi	0x1b, 1	; 27
}
 2f8:	08 95       	ret

000002fa <lcd_write_byte>:

void lcd_write_byte(uint8_t data){
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	f8 2e       	mov	r15, r24
	lcd_send_half_byte(data>>4);
 302:	82 95       	swap	r24
 304:	8f 70       	andi	r24, 0x0F	; 15
 306:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_send_half_byte>
 30a:	0b e4       	ldi	r16, 0x4B	; 75
 30c:	11 e0       	ldi	r17, 0x01	; 1
 30e:	c8 01       	movw	r24, r16
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lcd_write_byte+0x16>
	_delay_us(120);
	lcd_send_half_byte(data);
 314:	8f 2d       	mov	r24, r15
 316:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_send_half_byte>
 31a:	c8 01       	movw	r24, r16
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_write_byte+0x22>
	_delay_us(120);
	
}
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	08 95       	ret

00000328 <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd){
	CLR_RS;
 328:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write_byte(cmd);
 32a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_write_byte>
}
 32e:	08 95       	ret

00000330 <lcd_write_data>:

void lcd_write_data(uint8_t data){
	SET_RS;
 330:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_write_byte(data);
 332:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_write_byte>
}
 336:	08 95       	ret

00000338 <lcdinit>:

void lcdinit(void){
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
	LCD_PORT_DDR|=(1<<LCD_RS);
 340:	d0 9a       	sbi	0x1a, 0	; 26
	LCD_PORT_DDR|=(1<<LCD_E);
 342:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_PORT_DDR|=(1<<LCD_D4)|(1<<LCD_D5)|(1<<LCD_D6)|(1<<LCD_D7);
 344:	8a b3       	in	r24, 0x1a	; 26
 346:	8c 63       	ori	r24, 0x3C	; 60
 348:	8a bb       	out	0x1a, r24	; 26
	LCD_PORT&=~(1<<LCD_RS);
 34a:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<LCD_E);
 34c:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT=0x00;
 34e:	1b ba       	out	0x1b, r1	; 27
 350:	22 ec       	ldi	r18, 0xC2	; 194
 352:	31 e0       	ldi	r19, 0x01	; 1
 354:	44 e1       	ldi	r20, 0x14	; 20
 356:	51 e0       	ldi	r21, 0x01	; 1
 358:	c4 e1       	ldi	r28, 0x14	; 20
 35a:	d1 e0       	ldi	r29, 0x01	; 1
 35c:	ca 01       	movw	r24, r20
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <lcdinit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 362:	21 50       	subi	r18, 0x01	; 1
 364:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 366:	c1 f7       	brne	.-16     	; 0x358 <lcdinit+0x20>
	_delay_ms(45);
	lcd_send_half_byte(3);
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_send_half_byte>
 36e:	87 e4       	ldi	r24, 0x47	; 71
 370:	9c e2       	ldi	r25, 0x2C	; 44
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <lcdinit+0x3a>
	_delay_ms(4.1);
	lcd_send_half_byte(3);
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_send_half_byte>
 37c:	ce 01       	movw	r24, r28
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <lcdinit+0x46>
	_delay_us(100);
	lcd_send_half_byte(3);
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_send_half_byte>
 388:	ce 01       	movw	r24, r28
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcdinit+0x52>
	_delay_us(100);
	lcd_send_half_byte(0x02);
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_send_half_byte>
 394:	06 e6       	ldi	r16, 0x66	; 102
 396:	10 e2       	ldi	r17, 0x20	; 32
 398:	c8 01       	movw	r24, r16
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcdinit+0x62>
	_delay_ms(3);
	lcd_write_cmd(0x28);
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3a4:	c8 01       	movw	r24, r16
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcdinit+0x6e>
	_delay_ms(3);
	lcd_write_cmd(1<<3);
 3aa:	88 e0       	ldi	r24, 0x08	; 8
 3ac:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3b0:	c8 01       	movw	r24, r16
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcdinit+0x7a>
	_delay_ms(3);
	lcd_write_cmd(1<<0);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3bc:	c8 01       	movw	r24, r16
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcdinit+0x86>
	_delay_ms(3);
	lcd_write_cmd(3<<1);
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3c8:	c8 01       	movw	r24, r16
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcdinit+0x92>
	_delay_ms(3);
	lcd_write_cmd(0x0F);
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3d4:	8c ec       	ldi	r24, 0xCC	; 204
 3d6:	9a e0       	ldi	r25, 0x0A	; 10
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcdinit+0xa0>
	_delay_ms(1);
	
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <lcd_clr>:

void lcd_clr(void){
	lcd_write_cmd(1<<0);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	96 e3       	ldi	r25, 0x36	; 54
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_clr+0xa>
	_delay_ms(5);
}
 3f4:	08 95       	ret

000003f6 <lcd_cursor_return>:

void lcd_cursor_return(void){
	lcd_write_cmd(1<<1);
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	96 e3       	ldi	r25, 0x36	; 54
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <lcd_cursor_return+0xa>
	_delay_ms(5);
}
 404:	08 95       	ret

00000406 <lcd_text>:

void lcd_text(char* str){
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ec 01       	movw	r28, r24
 40c:	03 c0       	rjmp	.+6      	; 0x414 <lcd_text+0xe>
	while(*str) lcd_write_data(*str++);
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	0e 94 98 01 	call	0x330	; 0x330 <lcd_write_data>
 414:	88 81       	ld	r24, Y
 416:	88 23       	and	r24, r24
 418:	d1 f7       	brne	.-12     	; 0x40e <lcd_text+0x8>
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <goto_xy>:
	char buf[10];
	lcd_text(itoa(z,buf,10));
}
void goto_xy(uint8_t x, uint8_t y){
	uint8_t addr=0;
	if(y==0) addr=0x00+x;
 420:	66 23       	and	r22, r22
 422:	29 f0       	breq	.+10     	; 0x42e <goto_xy+0xe>
	if(y==1) addr=0x40+x;
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	11 f0       	breq	.+4      	; 0x42c <goto_xy+0xc>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	01 c0       	rjmp	.+2      	; 0x42e <goto_xy+0xe>
 42c:	80 5c       	subi	r24, 0xC0	; 192
	lcd_write_cmd((1<<7)|addr);
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_cmd>
 434:	08 95       	ret

00000436 <lcd_int>:

void lcd_text(char* str){
	while(*str) lcd_write_data(*str++);
}

void lcd_int(int16_t z){
 436:	df 93       	push	r29
 438:	cf 93       	push	r28
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	2a 97       	sbiw	r28, 0x0a	; 10
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	lcd_text(itoa(z,buf,10));
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	4a e0       	ldi	r20, 0x0A	; 10
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	0e 94 37 02 	call	0x46e	; 0x46e <itoa>
 458:	0e 94 03 02 	call	0x406	; 0x406 <lcd_text>
}
 45c:	2a 96       	adiw	r28, 0x0a	; 10
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	08 95       	ret

0000046e <itoa>:
 46e:	fb 01       	movw	r30, r22
 470:	9f 01       	movw	r18, r30
 472:	e8 94       	clt
 474:	42 30       	cpi	r20, 0x02	; 2
 476:	c4 f0       	brlt	.+48     	; 0x4a8 <itoa+0x3a>
 478:	45 32       	cpi	r20, 0x25	; 37
 47a:	b4 f4       	brge	.+44     	; 0x4a8 <itoa+0x3a>
 47c:	4a 30       	cpi	r20, 0x0A	; 10
 47e:	29 f4       	brne	.+10     	; 0x48a <itoa+0x1c>
 480:	97 fb       	bst	r25, 7
 482:	1e f4       	brtc	.+6      	; 0x48a <itoa+0x1c>
 484:	90 95       	com	r25
 486:	81 95       	neg	r24
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	64 2f       	mov	r22, r20
 48c:	77 27       	eor	r23, r23
 48e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__udivmodhi4>
 492:	80 5d       	subi	r24, 0xD0	; 208
 494:	8a 33       	cpi	r24, 0x3A	; 58
 496:	0c f0       	brlt	.+2      	; 0x49a <itoa+0x2c>
 498:	89 5d       	subi	r24, 0xD9	; 217
 49a:	81 93       	st	Z+, r24
 49c:	cb 01       	movw	r24, r22
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	a1 f7       	brne	.-24     	; 0x48a <itoa+0x1c>
 4a2:	16 f4       	brtc	.+4      	; 0x4a8 <itoa+0x3a>
 4a4:	5d e2       	ldi	r21, 0x2D	; 45
 4a6:	51 93       	st	Z+, r21
 4a8:	10 82       	st	Z, r1
 4aa:	c9 01       	movw	r24, r18
 4ac:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <strrev>

000004b0 <strrev>:
 4b0:	dc 01       	movw	r26, r24
 4b2:	fc 01       	movw	r30, r24
 4b4:	67 2f       	mov	r22, r23
 4b6:	71 91       	ld	r23, Z+
 4b8:	77 23       	and	r23, r23
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <strrev+0x4>
 4bc:	32 97       	sbiw	r30, 0x02	; 2
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <strrev+0x18>
 4c0:	7c 91       	ld	r23, X
 4c2:	6d 93       	st	X+, r22
 4c4:	70 83       	st	Z, r23
 4c6:	62 91       	ld	r22, -Z
 4c8:	ae 17       	cp	r26, r30
 4ca:	bf 07       	cpc	r27, r31
 4cc:	c8 f3       	brcs	.-14     	; 0x4c0 <strrev+0x10>
 4ce:	08 95       	ret

000004d0 <__udivmodhi4>:
 4d0:	aa 1b       	sub	r26, r26
 4d2:	bb 1b       	sub	r27, r27
 4d4:	51 e1       	ldi	r21, 0x11	; 17
 4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <__udivmodhi4_ep>

000004d8 <__udivmodhi4_loop>:
 4d8:	aa 1f       	adc	r26, r26
 4da:	bb 1f       	adc	r27, r27
 4dc:	a6 17       	cp	r26, r22
 4de:	b7 07       	cpc	r27, r23
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <__udivmodhi4_ep>
 4e2:	a6 1b       	sub	r26, r22
 4e4:	b7 0b       	sbc	r27, r23

000004e6 <__udivmodhi4_ep>:
 4e6:	88 1f       	adc	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	5a 95       	dec	r21
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__udivmodhi4_loop>
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
