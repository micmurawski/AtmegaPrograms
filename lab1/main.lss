
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000147  00000000  00000000  00000167  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d1  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000176  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b5  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  000005cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void){

	uint8_t i=0;
	
	DDRA=0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC|=0x0F;
  70:	94 b3       	in	r25, 0x14	; 20
  72:	9f 60       	ori	r25, 0x0F	; 15
  74:	94 bb       	out	0x14, r25	; 20
	DDRD&=~(1<<PD6);
  76:	8e 98       	cbi	0x11, 6	; 17
	PORTA=0xFF;
  78:	8b bb       	out	0x1b, r24	; 27
	PORTC=0x03;
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	5c e6       	ldi	r21, 0x6C	; 108
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	12 c0       	rjmp	.+36     	; 0xae <main+0x42>
	
	while(1){
	
	
		if((i==0) && (KEY_DOWN))
  8a:	22 23       	and	r18, r18
  8c:	81 f4       	brne	.+32     	; 0xae <main+0x42>
  8e:	86 99       	sbic	0x10, 6	; 16
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x22>
  92:	ca 01       	movw	r24, r20
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x28>
	{		i=1;
		while(1){
		_delay_ms(10);
		PORTC = (PORTC<<1 | PORTC>>3); //prawo
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	99 0f       	add	r25, r25
  9e:	86 95       	lsr	r24
  a0:	86 95       	lsr	r24
  a2:	86 95       	lsr	r24
  a4:	98 2b       	or	r25, r24
  a6:	95 bb       	out	0x15, r25	; 21
		if((i==1) && (KEY_DOWN)) break;
  a8:	86 99       	sbic	0x10, 6	; 16
  aa:	f3 cf       	rjmp	.-26     	; 0x92 <main+0x26>
  ac:	ec cf       	rjmp	.-40     	; 0x86 <main+0x1a>
		}
	}
	else if((i!=0) && !(KEY_DOWN)){
  ae:	86 9b       	sbis	0x10, 6	; 16
  b0:	ec cf       	rjmp	.-40     	; 0x8a <main+0x1e>
		i++;
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	ca 01       	movw	r24, r20
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
		while(1){
		_delay_ms(10);
		PORTC = (PORTC>>1 | PORTC<<3); //lewo
  ba:	95 b3       	in	r25, 0x15	; 21
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	88 0f       	add	r24, r24
  c0:	88 0f       	add	r24, r24
  c2:	88 0f       	add	r24, r24
  c4:	96 95       	lsr	r25
  c6:	89 2b       	or	r24, r25
  c8:	85 bb       	out	0x15, r24	; 21
		if((i!=1) && (KEY_DOWN)) break;
  ca:	21 30       	cpi	r18, 0x01	; 1
  cc:	99 f3       	breq	.-26     	; 0xb4 <main+0x48>
  ce:	86 99       	sbic	0x10, 6	; 16
  d0:	f1 cf       	rjmp	.-30     	; 0xb4 <main+0x48>
  d2:	db cf       	rjmp	.-74     	; 0x8a <main+0x1e>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
