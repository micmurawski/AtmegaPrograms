
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002c8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b8  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006c9  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000192  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003cd  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015e  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f9  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include "lcd_lib.h"

int main(void){
	
	lcdinit();
  82:	0e 94 82 00 	call	0x104	; 0x104 <lcdinit>
	goto_xy(0,0);
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <goto_xy>
	lcd_text("hello");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_text>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x14>

00000098 <lcd_send_half_byte>:

#define CLR_RS LCD_PORT&=~(1<<LCD_RS)
#define CLR_E LCD_PORT&=~(1<<LCD_E)

static inline void lcd_send_half_byte(uint8_t data){
	SET_E;
  98:	91 9a       	sbi	0x12, 1	; 18
	if(data & (1<<0)) LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
  9a:	80 ff       	sbrs	r24, 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <lcd_send_half_byte+0xa>
  9e:	92 9a       	sbi	0x12, 2	; 18
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <lcd_send_half_byte+0xc>
  a2:	92 98       	cbi	0x12, 2	; 18
	if(data & (1<<1)) LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
  a4:	81 ff       	sbrs	r24, 1
  a6:	02 c0       	rjmp	.+4      	; 0xac <lcd_send_half_byte+0x14>
  a8:	93 9a       	sbi	0x12, 3	; 18
  aa:	01 c0       	rjmp	.+2      	; 0xae <lcd_send_half_byte+0x16>
  ac:	93 98       	cbi	0x12, 3	; 18
	if(data & (1<<2)) LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
  ae:	82 ff       	sbrs	r24, 2
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <lcd_send_half_byte+0x1e>
  b2:	94 9a       	sbi	0x12, 4	; 18
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <lcd_send_half_byte+0x20>
  b6:	94 98       	cbi	0x12, 4	; 18
	if(data & (1<<3)) LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
  b8:	83 ff       	sbrs	r24, 3
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <lcd_send_half_byte+0x28>
  bc:	95 9a       	sbi	0x12, 5	; 18
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_send_half_byte+0x2a>
  c0:	95 98       	cbi	0x12, 5	; 18
	CLR_E;
  c2:	91 98       	cbi	0x12, 1	; 18
}
  c4:	08 95       	ret

000000c6 <lcd_write_byte>:

void lcd_write_byte(uint8_t data){
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	f8 2e       	mov	r15, r24
	lcd_send_half_byte(data>>4);
  ce:	82 95       	swap	r24
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_send_half_byte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	0b e4       	ldi	r16, 0x4B	; 75
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	c8 01       	movw	r24, r16
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_write_byte+0x16>
	_delay_us(120);
	lcd_send_half_byte(data);
  e0:	8f 2d       	mov	r24, r15
  e2:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_send_half_byte>
  e6:	c8 01       	movw	r24, r16
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_write_byte+0x22>
	_delay_us(120);
	
}
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	ff 90       	pop	r15
  f2:	08 95       	ret

000000f4 <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd){
	CLR_RS;
  f4:	90 98       	cbi	0x12, 0	; 18
	lcd_write_byte(cmd);
  f6:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write_byte>
}
  fa:	08 95       	ret

000000fc <lcd_write_data>:

void lcd_write_data(uint8_t data){
	SET_RS;
  fc:	90 9a       	sbi	0x12, 0	; 18
	lcd_write_byte(data);
  fe:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_write_byte>
}
 102:	08 95       	ret

00000104 <lcdinit>:

void lcdinit(void){
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
	LCD_PORT_DDR|=(1<<LCD_RS);
 10c:	88 9a       	sbi	0x11, 0	; 17
	LCD_PORT_DDR|=(1<<LCD_E);
 10e:	89 9a       	sbi	0x11, 1	; 17
	LCD_PORT_DDR|=(1<<LCD_D4)|(1<<LCD_D5)|(1<<LCD_D6)|(1<<LCD_D7);
 110:	81 b3       	in	r24, 0x11	; 17
 112:	8c 63       	ori	r24, 0x3C	; 60
 114:	81 bb       	out	0x11, r24	; 17
	LCD_PORT&=~(1<<LCD_RS);
 116:	90 98       	cbi	0x12, 0	; 18
	LCD_PORT&=~(1<<LCD_E);
 118:	91 98       	cbi	0x12, 1	; 18
	LCD_PORT=0x00;
 11a:	12 ba       	out	0x12, r1	; 18
 11c:	22 ec       	ldi	r18, 0xC2	; 194
 11e:	31 e0       	ldi	r19, 0x01	; 1
 120:	44 e1       	ldi	r20, 0x14	; 20
 122:	51 e0       	ldi	r21, 0x01	; 1
 124:	c4 e1       	ldi	r28, 0x14	; 20
 126:	d1 e0       	ldi	r29, 0x01	; 1
 128:	ca 01       	movw	r24, r20
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcdinit+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	c1 f7       	brne	.-16     	; 0x124 <lcdinit+0x20>
	_delay_ms(45);
	lcd_send_half_byte(3);
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_send_half_byte>
 13a:	87 e4       	ldi	r24, 0x47	; 71
 13c:	9c e2       	ldi	r25, 0x2C	; 44
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcdinit+0x3a>
	_delay_ms(4.1);
	lcd_send_half_byte(3);
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_send_half_byte>
 148:	ce 01       	movw	r24, r28
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcdinit+0x46>
	_delay_us(100);
	lcd_send_half_byte(3);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_send_half_byte>
 154:	ce 01       	movw	r24, r28
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcdinit+0x52>
	_delay_us(100);
	lcd_send_half_byte(0x02);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_send_half_byte>
 160:	06 e6       	ldi	r16, 0x66	; 102
 162:	10 e2       	ldi	r17, 0x20	; 32
 164:	c8 01       	movw	r24, r16
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcdinit+0x62>
	_delay_ms(3);
	lcd_write_cmd(0x28);
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 170:	c8 01       	movw	r24, r16
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcdinit+0x6e>
	_delay_ms(3);
	lcd_write_cmd(1<<3);
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 17c:	c8 01       	movw	r24, r16
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcdinit+0x7a>
	_delay_ms(3);
	lcd_write_cmd(1<<0);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 188:	c8 01       	movw	r24, r16
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcdinit+0x86>
	_delay_ms(3);
	lcd_write_cmd(3<<1);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 194:	c8 01       	movw	r24, r16
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcdinit+0x92>
	_delay_ms(3);
	lcd_write_cmd(0x0F);
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 1a0:	8c ec       	ldi	r24, 0xCC	; 204
 1a2:	9a e0       	ldi	r25, 0x0A	; 10
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcdinit+0xa0>
	_delay_ms(1);
	
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <lcd_clr>:

void lcd_clr(void){
	lcd_write_cmd(1<<0);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	96 e3       	ldi	r25, 0x36	; 54
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_clr+0xa>
	_delay_ms(5);
}
 1c0:	08 95       	ret

000001c2 <lcd_cursor_return>:

void lcd_cursor_return(void){
	lcd_write_cmd(1<<1);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	96 e3       	ldi	r25, 0x36	; 54
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_cursor_return+0xa>
	_delay_ms(5);
}
 1d0:	08 95       	ret

000001d2 <lcd_text>:

void lcd_text(char* str){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <lcd_text+0xe>
	while(*str) lcd_write_data(*str++);
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_write_data>
 1e0:	88 81       	ld	r24, Y
 1e2:	88 23       	and	r24, r24
 1e4:	d1 f7       	brne	.-12     	; 0x1da <lcd_text+0x8>
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <goto_xy>:
	char buf[10];
	lcd_text(itoa(z,buf,10));
}
void goto_xy(uint8_t x, uint8_t y){
	uint8_t addr=0;
	if(y==0) addr=0x00+x;
 1ec:	66 23       	and	r22, r22
 1ee:	29 f0       	breq	.+10     	; 0x1fa <goto_xy+0xe>
	if(y==1) addr=0x40+x;
 1f0:	61 30       	cpi	r22, 0x01	; 1
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <goto_xy+0xc>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <goto_xy+0xe>
 1f8:	80 5c       	subi	r24, 0xC0	; 192
	lcd_write_cmd((1<<7)|addr);
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_write_cmd>
 200:	08 95       	ret

00000202 <lcd_int>:

void lcd_text(char* str){
	while(*str) lcd_write_data(*str++);
}

void lcd_int(int16_t z){
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	2a 97       	sbiw	r28, 0x0a	; 10
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	lcd_text(itoa(z,buf,10));
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	4a e0       	ldi	r20, 0x0A	; 10
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 1d 01 	call	0x23a	; 0x23a <itoa>
 224:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_text>
}
 228:	2a 96       	adiw	r28, 0x0a	; 10
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	08 95       	ret

0000023a <itoa>:
 23a:	fb 01       	movw	r30, r22
 23c:	9f 01       	movw	r18, r30
 23e:	e8 94       	clt
 240:	42 30       	cpi	r20, 0x02	; 2
 242:	c4 f0       	brlt	.+48     	; 0x274 <itoa+0x3a>
 244:	45 32       	cpi	r20, 0x25	; 37
 246:	b4 f4       	brge	.+44     	; 0x274 <itoa+0x3a>
 248:	4a 30       	cpi	r20, 0x0A	; 10
 24a:	29 f4       	brne	.+10     	; 0x256 <itoa+0x1c>
 24c:	97 fb       	bst	r25, 7
 24e:	1e f4       	brtc	.+6      	; 0x256 <itoa+0x1c>
 250:	90 95       	com	r25
 252:	81 95       	neg	r24
 254:	9f 4f       	sbci	r25, 0xFF	; 255
 256:	64 2f       	mov	r22, r20
 258:	77 27       	eor	r23, r23
 25a:	0e 94 4e 01 	call	0x29c	; 0x29c <__udivmodhi4>
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	8a 33       	cpi	r24, 0x3A	; 58
 262:	0c f0       	brlt	.+2      	; 0x266 <itoa+0x2c>
 264:	89 5d       	subi	r24, 0xD9	; 217
 266:	81 93       	st	Z+, r24
 268:	cb 01       	movw	r24, r22
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	a1 f7       	brne	.-24     	; 0x256 <itoa+0x1c>
 26e:	16 f4       	brtc	.+4      	; 0x274 <itoa+0x3a>
 270:	5d e2       	ldi	r21, 0x2D	; 45
 272:	51 93       	st	Z+, r21
 274:	10 82       	st	Z, r1
 276:	c9 01       	movw	r24, r18
 278:	0c 94 3e 01 	jmp	0x27c	; 0x27c <strrev>

0000027c <strrev>:
 27c:	dc 01       	movw	r26, r24
 27e:	fc 01       	movw	r30, r24
 280:	67 2f       	mov	r22, r23
 282:	71 91       	ld	r23, Z+
 284:	77 23       	and	r23, r23
 286:	e1 f7       	brne	.-8      	; 0x280 <strrev+0x4>
 288:	32 97       	sbiw	r30, 0x02	; 2
 28a:	04 c0       	rjmp	.+8      	; 0x294 <strrev+0x18>
 28c:	7c 91       	ld	r23, X
 28e:	6d 93       	st	X+, r22
 290:	70 83       	st	Z, r23
 292:	62 91       	ld	r22, -Z
 294:	ae 17       	cp	r26, r30
 296:	bf 07       	cpc	r27, r31
 298:	c8 f3       	brcs	.-14     	; 0x28c <strrev+0x10>
 29a:	08 95       	ret

0000029c <__udivmodhi4>:
 29c:	aa 1b       	sub	r26, r26
 29e:	bb 1b       	sub	r27, r27
 2a0:	51 e1       	ldi	r21, 0x11	; 17
 2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <__udivmodhi4_ep>

000002a4 <__udivmodhi4_loop>:
 2a4:	aa 1f       	adc	r26, r26
 2a6:	bb 1f       	adc	r27, r27
 2a8:	a6 17       	cp	r26, r22
 2aa:	b7 07       	cpc	r27, r23
 2ac:	10 f0       	brcs	.+4      	; 0x2b2 <__udivmodhi4_ep>
 2ae:	a6 1b       	sub	r26, r22
 2b0:	b7 0b       	sbc	r27, r23

000002b2 <__udivmodhi4_ep>:
 2b2:	88 1f       	adc	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	5a 95       	dec	r21
 2b8:	a9 f7       	brne	.-22     	; 0x2a4 <__udivmodhi4_loop>
 2ba:	80 95       	com	r24
 2bc:	90 95       	com	r25
 2be:	bc 01       	movw	r22, r24
 2c0:	cd 01       	movw	r24, r26
 2c2:	08 95       	ret

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
