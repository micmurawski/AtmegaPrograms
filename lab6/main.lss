
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000418  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e2  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008b0  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028c  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000059a  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a4  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000026c  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  7a:	0c 94 0a 02 	jmp	0x414	; 0x414 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_MasterInit>:
#define DDR_SPI DDRB

void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
  82:	80 eb       	ldi	r24, 0xB0	; 176
  84:	87 bb       	out	0x17, r24	; 23
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  86:	81 e5       	ldi	r24, 0x51	; 81
  88:	8d b9       	out	0x0d, r24	; 13
}
  8a:	08 95       	ret

0000008c <SPI_MasterTransmit>:

uint8_t SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  8c:	8f b9       	out	0x0f, r24	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <SPI_MasterTransmit+0x2>
return SPDR;
  92:	8f b1       	in	r24, 0x0f	; 15
	
}
  94:	08 95       	ret

00000096 <main>:



int main(void){
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
#define DDR_SPI DDRB

void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
  a6:	80 eb       	ldi	r24, 0xB0	; 176
  a8:	87 bb       	out	0x17, r24	; 23
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  aa:	81 e5       	ldi	r24, 0x51	; 81
  ac:	8d b9       	out	0x0d, r24	; 13



int main(void){
	SPI_MasterInit();
	lcdinit();
  ae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcdinit>
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	24 e1       	ldi	r18, 0x14	; 20
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x24>
	_delay_ms(1000);
	goto_xy(0,0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <goto_xy>
}

uint8_t SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  cc:	cc 24       	eor	r12, r12
  ce:	c3 94       	inc	r12
  d0:	90 ea       	ldi	r25, 0xA0	; 160
  d2:	d9 2e       	mov	r13, r25
  d4:	c4 e1       	ldi	r28, 0x14	; 20
  d6:	d1 e0       	ldi	r29, 0x01	; 1
	
	
	

	while(1){
	CLR_SS;
  d8:	c4 98       	cbi	0x18, 4	; 24
}

uint8_t SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  da:	cf b8       	out	0x0f, r12	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x46>
return SPDR;
  e0:	8f b1       	in	r24, 0x0f	; 15
}

uint8_t SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  e2:	df b8       	out	0x0f, r13	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x4e>
return SPDR;
  e8:	6f b1       	in	r22, 0x0f	; 15
}

uint8_t SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
  ea:	1f b8       	out	0x0f, r1	; 15
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
  ec:	77 9b       	sbis	0x0e, 7	; 14
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x56>
return SPDR;
  f0:	2f b1       	in	r18, 0x0f	; 15
	CLR_SS;
	SPI_MasterTransmit(1);
	uint16_t tbyte, lbyte;
	tbyte=SPI_MasterTransmit((1<<7)|(1<<5));
	lbyte=SPI_MasterTransmit(0);
	SET_SS;
  f2:	c4 9a       	sbi	0x18, 4	; 24
	uint32_t data, temp1, temp2;
	tbyte=(tbyte& 0x0F)<<8;
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	6f 70       	andi	r22, 0x0F	; 15
  f8:	70 70       	andi	r23, 0x00	; 0
	data = tbyte + lbyte;
	temp1=(data*1221)/10000;
  fa:	76 2f       	mov	r23, r22
  fc:	66 27       	eor	r22, r22
  fe:	62 0f       	add	r22, r18
 100:	71 1d       	adc	r23, r1
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	25 ec       	ldi	r18, 0xC5	; 197
 108:	34 e0       	ldi	r19, 0x04	; 4
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	0e 94 84 01 	call	0x308	; 0x308 <__mulsi3>
 112:	7b 01       	movw	r14, r22
 114:	8c 01       	movw	r16, r24
	temp2=(data*1221)%10000;
	lcd_int(temp1);
 116:	20 e1       	ldi	r18, 0x10	; 16
 118:	37 e2       	ldi	r19, 0x27	; 39
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodsi4>
 122:	da 01       	movw	r26, r20
 124:	c9 01       	movw	r24, r18
 126:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_int>
	//goto_xy(4,0);
	lcd_text(",");
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_text>
	lcd_int(temp2);
 132:	c8 01       	movw	r24, r16
 134:	b7 01       	movw	r22, r14
 136:	20 e1       	ldi	r18, 0x10	; 16
 138:	37 e2       	ldi	r19, 0x27	; 39
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodsi4>
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_int>
	lcd_text(" C");
 14a:	82 e6       	ldi	r24, 0x62	; 98
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_text>
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	97 e2       	ldi	r25, 0x27	; 39
 156:	fe 01       	movw	r30, r28
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15e:	d9 f7       	brne	.-10     	; 0x156 <main+0xc0>
	_delay_ms(1000);
	lcd_clr();
 160:	0e 94 40 01 	call	0x280	; 0x280 <lcd_clr>
 164:	b9 cf       	rjmp	.-142    	; 0xd8 <main+0x42>

00000166 <lcd_send_half_byte>:

#define CLR_RS LCD_PORT&=~(1<<LCD_RS)
#define CLR_E LCD_PORT&=~(1<<LCD_E)

static inline void lcd_send_half_byte(uint8_t data){
	SET_E;
 166:	d9 9a       	sbi	0x1b, 1	; 27
	if(data & (1<<0)) LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
 168:	80 ff       	sbrs	r24, 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <lcd_send_half_byte+0xa>
 16c:	da 9a       	sbi	0x1b, 2	; 27
 16e:	01 c0       	rjmp	.+2      	; 0x172 <lcd_send_half_byte+0xc>
 170:	da 98       	cbi	0x1b, 2	; 27
	if(data & (1<<1)) LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
 172:	81 ff       	sbrs	r24, 1
 174:	02 c0       	rjmp	.+4      	; 0x17a <lcd_send_half_byte+0x14>
 176:	db 9a       	sbi	0x1b, 3	; 27
 178:	01 c0       	rjmp	.+2      	; 0x17c <lcd_send_half_byte+0x16>
 17a:	db 98       	cbi	0x1b, 3	; 27
	if(data & (1<<2)) LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
 17c:	82 ff       	sbrs	r24, 2
 17e:	02 c0       	rjmp	.+4      	; 0x184 <lcd_send_half_byte+0x1e>
 180:	dc 9a       	sbi	0x1b, 4	; 27
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_send_half_byte+0x20>
 184:	dc 98       	cbi	0x1b, 4	; 27
	if(data & (1<<3)) LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
 186:	83 ff       	sbrs	r24, 3
 188:	02 c0       	rjmp	.+4      	; 0x18e <lcd_send_half_byte+0x28>
 18a:	dd 9a       	sbi	0x1b, 5	; 27
 18c:	01 c0       	rjmp	.+2      	; 0x190 <lcd_send_half_byte+0x2a>
 18e:	dd 98       	cbi	0x1b, 5	; 27
	CLR_E;
 190:	d9 98       	cbi	0x1b, 1	; 27
}
 192:	08 95       	ret

00000194 <lcd_write_byte>:

void lcd_write_byte(uint8_t data){
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	f8 2e       	mov	r15, r24
	lcd_send_half_byte(data>>4);
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_send_half_byte>
 1a4:	0b e4       	ldi	r16, 0x4B	; 75
 1a6:	11 e0       	ldi	r17, 0x01	; 1
 1a8:	c8 01       	movw	r24, r16
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write_byte+0x16>
	_delay_us(120);
	lcd_send_half_byte(data);
 1ae:	8f 2d       	mov	r24, r15
 1b0:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_send_half_byte>
 1b4:	c8 01       	movw	r24, r16
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_write_byte+0x22>
	_delay_us(120);
	
}
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	08 95       	ret

000001c2 <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd){
	CLR_RS;
 1c2:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write_byte(cmd);
 1c4:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write_byte>
	
}
 1c8:	08 95       	ret

000001ca <lcd_write_data>:

void lcd_write_data(uint8_t data){
	SET_RS;
 1ca:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_write_byte(data);
 1cc:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write_byte>
}
 1d0:	08 95       	ret

000001d2 <lcdinit>:

void lcdinit(void){
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
	LCD_PORT_DDR|=(1<<LCD_RS);
 1da:	d0 9a       	sbi	0x1a, 0	; 26
	LCD_PORT_DDR|=(1<<LCD_E);
 1dc:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_PORT_DDR|=(1<<LCD_D4)|(1<<LCD_D5)|(1<<LCD_D6)|(1<<LCD_D7);
 1de:	8a b3       	in	r24, 0x1a	; 26
 1e0:	8c 63       	ori	r24, 0x3C	; 60
 1e2:	8a bb       	out	0x1a, r24	; 26
	LCD_PORT&=~(1<<LCD_RS);
 1e4:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<LCD_E);
 1e6:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT=0x00;
 1e8:	1b ba       	out	0x1b, r1	; 27
 1ea:	22 ec       	ldi	r18, 0xC2	; 194
 1ec:	31 e0       	ldi	r19, 0x01	; 1
 1ee:	44 e1       	ldi	r20, 0x14	; 20
 1f0:	51 e0       	ldi	r21, 0x01	; 1
 1f2:	c4 e1       	ldi	r28, 0x14	; 20
 1f4:	d1 e0       	ldi	r29, 0x01	; 1
 1f6:	ca 01       	movw	r24, r20
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcdinit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 200:	c1 f7       	brne	.-16     	; 0x1f2 <lcdinit+0x20>
	_delay_ms(45);
	lcd_send_half_byte(3);
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_send_half_byte>
 208:	87 e4       	ldi	r24, 0x47	; 71
 20a:	9c e2       	ldi	r25, 0x2C	; 44
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcdinit+0x3a>
	_delay_ms(4.1);
	lcd_send_half_byte(3);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_send_half_byte>
 216:	ce 01       	movw	r24, r28
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcdinit+0x46>
	_delay_us(100);
	lcd_send_half_byte(3);
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_send_half_byte>
 222:	ce 01       	movw	r24, r28
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcdinit+0x52>
	_delay_us(100);
	lcd_send_half_byte(0x02);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_send_half_byte>
 22e:	06 e6       	ldi	r16, 0x66	; 102
 230:	10 e2       	ldi	r17, 0x20	; 32
 232:	c8 01       	movw	r24, r16
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcdinit+0x62>
	_delay_ms(3);
	lcd_write_cmd(0x28);
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 23e:	c8 01       	movw	r24, r16
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcdinit+0x6e>
	_delay_ms(3);
	lcd_write_cmd(1<<3);
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 24a:	c8 01       	movw	r24, r16
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcdinit+0x7a>
	_delay_ms(3);
	lcd_write_cmd(1<<0);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 256:	c8 01       	movw	r24, r16
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcdinit+0x86>
	_delay_ms(3);
	lcd_write_cmd(3<<1);
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 262:	c8 01       	movw	r24, r16
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcdinit+0x92>
	_delay_ms(3);
	lcd_write_cmd(0x0F);
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 26e:	8c ec       	ldi	r24, 0xCC	; 204
 270:	9a e0       	ldi	r25, 0x0A	; 10
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcdinit+0xa0>
	_delay_ms(1);
	
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <lcd_clr>:

void lcd_clr(void){
	lcd_write_cmd(1<<0);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	96 e3       	ldi	r25, 0x36	; 54
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_clr+0xa>
	_delay_ms(5);
}
 28e:	08 95       	ret

00000290 <lcd_cursor_return>:

void lcd_cursor_return(void){
	lcd_write_cmd(1<<1);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	96 e3       	ldi	r25, 0x36	; 54
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_cursor_return+0xa>
	_delay_ms(5);
}
 29e:	08 95       	ret

000002a0 <lcd_text>:

void lcd_text(char* str){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <lcd_text+0xe>
	while(*str) lcd_write_data(*str++);
 2a8:	21 96       	adiw	r28, 0x01	; 1
 2aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_write_data>
 2ae:	88 81       	ld	r24, Y
 2b0:	88 23       	and	r24, r24
 2b2:	d1 f7       	brne	.-12     	; 0x2a8 <lcd_text+0x8>
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <goto_xy>:
	char buf[10];
	lcd_text(itoa(z,buf,10));
}
void goto_xy(uint8_t x, uint8_t y){
	uint8_t addr=0;
	if(y==0) addr=0x00+x;
 2ba:	66 23       	and	r22, r22
 2bc:	29 f0       	breq	.+10     	; 0x2c8 <goto_xy+0xe>
	if(y==1) addr=0x40+x;
 2be:	61 30       	cpi	r22, 0x01	; 1
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <goto_xy+0xc>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <goto_xy+0xe>
 2c6:	80 5c       	subi	r24, 0xC0	; 192
	lcd_write_cmd((1<<7)|addr);
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_cmd>
 2ce:	08 95       	ret

000002d0 <lcd_int>:

void lcd_text(char* str){
	while(*str) lcd_write_data(*str++);
}

void lcd_int(int16_t z){
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	2a 97       	sbiw	r28, 0x0a	; 10
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	lcd_text(itoa(z,buf,10));
 2e4:	be 01       	movw	r22, r28
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	4a e0       	ldi	r20, 0x0A	; 10
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	0e 94 c5 01 	call	0x38a	; 0x38a <itoa>
 2f2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_text>
}
 2f6:	2a 96       	adiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	08 95       	ret

00000308 <__mulsi3>:
 308:	62 9f       	mul	r22, r18
 30a:	d0 01       	movw	r26, r0
 30c:	73 9f       	mul	r23, r19
 30e:	f0 01       	movw	r30, r0
 310:	82 9f       	mul	r24, r18
 312:	e0 0d       	add	r30, r0
 314:	f1 1d       	adc	r31, r1
 316:	64 9f       	mul	r22, r20
 318:	e0 0d       	add	r30, r0
 31a:	f1 1d       	adc	r31, r1
 31c:	92 9f       	mul	r25, r18
 31e:	f0 0d       	add	r31, r0
 320:	83 9f       	mul	r24, r19
 322:	f0 0d       	add	r31, r0
 324:	74 9f       	mul	r23, r20
 326:	f0 0d       	add	r31, r0
 328:	65 9f       	mul	r22, r21
 32a:	f0 0d       	add	r31, r0
 32c:	99 27       	eor	r25, r25
 32e:	72 9f       	mul	r23, r18
 330:	b0 0d       	add	r27, r0
 332:	e1 1d       	adc	r30, r1
 334:	f9 1f       	adc	r31, r25
 336:	63 9f       	mul	r22, r19
 338:	b0 0d       	add	r27, r0
 33a:	e1 1d       	adc	r30, r1
 33c:	f9 1f       	adc	r31, r25
 33e:	bd 01       	movw	r22, r26
 340:	cf 01       	movw	r24, r30
 342:	11 24       	eor	r1, r1
 344:	08 95       	ret

00000346 <__udivmodsi4>:
 346:	a1 e2       	ldi	r26, 0x21	; 33
 348:	1a 2e       	mov	r1, r26
 34a:	aa 1b       	sub	r26, r26
 34c:	bb 1b       	sub	r27, r27
 34e:	fd 01       	movw	r30, r26
 350:	0d c0       	rjmp	.+26     	; 0x36c <__udivmodsi4_ep>

00000352 <__udivmodsi4_loop>:
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	ee 1f       	adc	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	a2 17       	cp	r26, r18
 35c:	b3 07       	cpc	r27, r19
 35e:	e4 07       	cpc	r30, r20
 360:	f5 07       	cpc	r31, r21
 362:	20 f0       	brcs	.+8      	; 0x36c <__udivmodsi4_ep>
 364:	a2 1b       	sub	r26, r18
 366:	b3 0b       	sbc	r27, r19
 368:	e4 0b       	sbc	r30, r20
 36a:	f5 0b       	sbc	r31, r21

0000036c <__udivmodsi4_ep>:
 36c:	66 1f       	adc	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	1a 94       	dec	r1
 376:	69 f7       	brne	.-38     	; 0x352 <__udivmodsi4_loop>
 378:	60 95       	com	r22
 37a:	70 95       	com	r23
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	9b 01       	movw	r18, r22
 382:	ac 01       	movw	r20, r24
 384:	bd 01       	movw	r22, r26
 386:	cf 01       	movw	r24, r30
 388:	08 95       	ret

0000038a <itoa>:
 38a:	fb 01       	movw	r30, r22
 38c:	9f 01       	movw	r18, r30
 38e:	e8 94       	clt
 390:	42 30       	cpi	r20, 0x02	; 2
 392:	c4 f0       	brlt	.+48     	; 0x3c4 <itoa+0x3a>
 394:	45 32       	cpi	r20, 0x25	; 37
 396:	b4 f4       	brge	.+44     	; 0x3c4 <itoa+0x3a>
 398:	4a 30       	cpi	r20, 0x0A	; 10
 39a:	29 f4       	brne	.+10     	; 0x3a6 <itoa+0x1c>
 39c:	97 fb       	bst	r25, 7
 39e:	1e f4       	brtc	.+6      	; 0x3a6 <itoa+0x1c>
 3a0:	90 95       	com	r25
 3a2:	81 95       	neg	r24
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	64 2f       	mov	r22, r20
 3a8:	77 27       	eor	r23, r23
 3aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__udivmodhi4>
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	8a 33       	cpi	r24, 0x3A	; 58
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <itoa+0x2c>
 3b4:	89 5d       	subi	r24, 0xD9	; 217
 3b6:	81 93       	st	Z+, r24
 3b8:	cb 01       	movw	r24, r22
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	a1 f7       	brne	.-24     	; 0x3a6 <itoa+0x1c>
 3be:	16 f4       	brtc	.+4      	; 0x3c4 <itoa+0x3a>
 3c0:	5d e2       	ldi	r21, 0x2D	; 45
 3c2:	51 93       	st	Z+, r21
 3c4:	10 82       	st	Z, r1
 3c6:	c9 01       	movw	r24, r18
 3c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <strrev>

000003cc <strrev>:
 3cc:	dc 01       	movw	r26, r24
 3ce:	fc 01       	movw	r30, r24
 3d0:	67 2f       	mov	r22, r23
 3d2:	71 91       	ld	r23, Z+
 3d4:	77 23       	and	r23, r23
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <strrev+0x4>
 3d8:	32 97       	sbiw	r30, 0x02	; 2
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <strrev+0x18>
 3dc:	7c 91       	ld	r23, X
 3de:	6d 93       	st	X+, r22
 3e0:	70 83       	st	Z, r23
 3e2:	62 91       	ld	r22, -Z
 3e4:	ae 17       	cp	r26, r30
 3e6:	bf 07       	cpc	r27, r31
 3e8:	c8 f3       	brcs	.-14     	; 0x3dc <strrev+0x10>
 3ea:	08 95       	ret

000003ec <__udivmodhi4>:
 3ec:	aa 1b       	sub	r26, r26
 3ee:	bb 1b       	sub	r27, r27
 3f0:	51 e1       	ldi	r21, 0x11	; 17
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <__udivmodhi4_ep>

000003f4 <__udivmodhi4_loop>:
 3f4:	aa 1f       	adc	r26, r26
 3f6:	bb 1f       	adc	r27, r27
 3f8:	a6 17       	cp	r26, r22
 3fa:	b7 07       	cpc	r27, r23
 3fc:	10 f0       	brcs	.+4      	; 0x402 <__udivmodhi4_ep>
 3fe:	a6 1b       	sub	r26, r22
 400:	b7 0b       	sbc	r27, r23

00000402 <__udivmodhi4_ep>:
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	5a 95       	dec	r21
 408:	a9 f7       	brne	.-22     	; 0x3f4 <__udivmodhi4_loop>
 40a:	80 95       	com	r24
 40c:	90 95       	com	r25
 40e:	bc 01       	movw	r22, r24
 410:	cd 01       	movw	r24, r26
 412:	08 95       	ret

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
