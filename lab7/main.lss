
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b0  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e3  00000000  00000000  00000339  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b5  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b5  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a9  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>


int main(void){
TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
  6c:	8a e1       	ldi	r24, 0x1A	; 26
  6e:	8e bd       	out	0x2e, r24	; 46
TCCR1A=(1<<WGM11)|(0<<WGM10)|(1<<COM1A1)|(1<<COM1B1);
  70:	82 ea       	ldi	r24, 0xA2	; 162
  72:	8f bd       	out	0x2f, r24	; 47
TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<COM00)|(1<<CS01);
  74:	83 b7       	in	r24, 0x33	; 51
  76:	8a 67       	ori	r24, 0x7A	; 122
  78:	83 bf       	out	0x33, r24	; 51
ICR1=255; //27647
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38
//1244,16
//2903,04
DDRD|=(1<<PD5)|(1<<PD4);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 63       	ori	r24, 0x30	; 48
  86:	81 bb       	out	0x11, r24	; 17
DDRB|=(1<<PB3);
  88:	bb 9a       	sbi	0x17, 3	; 23
  8a:	20 e0       	ldi	r18, 0x00	; 0
OCR1B=0+i;
OCR1A=255-i;
_delay_ms(7);
}
for(uint8_t i=0;i<255;i++){
OCR0=0;
  8c:	6f ef       	ldi	r22, 0xFF	; 255
  8e:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	49 e9       	ldi	r20, 0x99	; 153
  92:	5b e4       	ldi	r21, 0x4B	; 75
  94:	0e c0       	rjmp	.+28     	; 0xb2 <main+0x46>
DDRB|=(1<<PB3);

while(1){

for(uint8_t i=0;i<255;i++){
OCR0=0;
  96:	1c be       	out	0x3c, r1	; 60
OCR1B=0+i;
  98:	82 2f       	mov	r24, r18
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	99 bd       	out	0x29, r25	; 41
  9e:	88 bd       	out	0x28, r24	; 40
OCR1A=255-i;
  a0:	fb 01       	movw	r30, r22
  a2:	e8 1b       	sub	r30, r24
  a4:	f9 0b       	sbc	r31, r25
  a6:	fb bd       	out	0x2b, r31	; 43
  a8:	ea bd       	out	0x2a, r30	; 42
  aa:	ca 01       	movw	r24, r20
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
DDRD|=(1<<PD5)|(1<<PD4);
DDRB|=(1<<PB3);

while(1){

for(uint8_t i=0;i<255;i++){
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	2f 3f       	cpi	r18, 0xFF	; 255
  b4:	81 f7       	brne	.-32     	; 0x96 <main+0x2a>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
OCR1B=0+i;
OCR1A=255-i;
_delay_ms(7);
}
for(uint8_t i=0;i<255;i++){
OCR0=0;
  ba:	1c be       	out	0x3c, r1	; 60
  bc:	cb 01       	movw	r24, r22
  be:	82 1b       	sub	r24, r18
  c0:	93 0b       	sbc	r25, r19
OCR1B=255-i;
  c2:	99 bd       	out	0x29, r25	; 41
  c4:	88 bd       	out	0x28, r24	; 40
OCR1A=0+i;
  c6:	3b bd       	out	0x2b, r19	; 43
  c8:	2a bd       	out	0x2a, r18	; 42
  ca:	ca 01       	movw	r24, r20
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x60>
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
OCR0=0;
OCR1B=0+i;
OCR1A=255-i;
_delay_ms(7);
}
for(uint8_t i=0;i<255;i++){
  d4:	2f 3f       	cpi	r18, 0xFF	; 255
  d6:	31 05       	cpc	r19, r1
  d8:	81 f7       	brne	.-32     	; 0xba <main+0x4e>
  da:	20 e0       	ldi	r18, 0x00	; 0
OCR1B=255-i;
OCR1A=0+i;
_delay_ms(7);
}
for(uint8_t i=0;i<255;i++){
OCR0=0+i;
  dc:	2c bf       	out	0x3c, r18	; 60
OCR1B=0;
  de:	19 bc       	out	0x29, r1	; 41
  e0:	18 bc       	out	0x28, r1	; 40
OCR1A=0;
  e2:	1b bc       	out	0x2b, r1	; 43
  e4:	1a bc       	out	0x2a, r1	; 42
  e6:	ca 01       	movw	r24, r20
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x7c>
OCR0=0;
OCR1B=255-i;
OCR1A=0+i;
_delay_ms(7);
}
for(uint8_t i=0;i<255;i++){
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	2f 3f       	cpi	r18, 0xFF	; 255
  f0:	a9 f7       	brne	.-22     	; 0xdc <main+0x70>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	d0 cf       	rjmp	.-96     	; 0x96 <main+0x2a>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
