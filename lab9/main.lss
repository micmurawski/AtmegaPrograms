
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000004d0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f9  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bfd  00000000  00000000  00000697  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002e3  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000719  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003e9  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  7a:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init>:
#define DS_OUT DDRB|=(1<<PB3) 
#define DS_LOW PORTB&=~(1<<PB3) 
#define DS_IN DDRB&=~(1<<PB3) 

uint8_t init(void){
	DS_LOW;
  82:	c3 98       	cbi	0x18, 3	; 24
	DS_OUT;
  84:	bb 9a       	sbi	0x17, 3	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	8f e2       	ldi	r24, 0x2F	; 47
  88:	95 e0       	ldi	r25, 0x05	; 5
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <init+0x8>
	_delay_us(480);
	DS_IN;
  8e:	bb 98       	cbi	0x17, 3	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  90:	8d ed       	ldi	r24, 0xDD	; 221
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <init+0x10>
	_delay_us(60);
	uint8_t state = PINB&(1<<PB3);
  96:	86 b3       	in	r24, 0x16	; 22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	e9 e8       	ldi	r30, 0x89	; 137
  9a:	f4 e0       	ldi	r31, 0x04	; 4
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <init+0x1a>
	_delay_us(420);
	
	return state;
}
  a0:	88 70       	andi	r24, 0x08	; 8
  a2:	08 95       	ret

000000a4 <write_bit>:

void write_bit(bit){
	if(bit==0){
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	41 f4       	brne	.+16     	; 0xb8 <write_bit+0x14>
		DS_LOW;
  a8:	c3 98       	cbi	0x18, 3	; 24
		DS_OUT;
  aa:	bb 9a       	sbi	0x17, 3	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ac:	8d ed       	ldi	r24, 0xDD	; 221
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <write_bit+0xa>
		_delay_us(60);
		DS_IN;
  b2:	bb 98       	cbi	0x17, 3	; 23
		uint8_t state = PINB&(1<<PB3);
  b4:	86 b3       	in	r24, 0x16	; 22
  b6:	08 95       	ret
	}else if(bit==1){
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	49 f4       	brne	.+18     	; 0xce <write_bit+0x2a>
		DS_LOW;
  bc:	c3 98       	cbi	0x18, 3	; 24
		DS_OUT;
  be:	bb 9a       	sbi	0x17, 3	; 23
  c0:	82 e1       	ldi	r24, 0x12	; 18
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <write_bit+0x1e>
		_delay_us(5);
		DS_IN;
  c6:	bb 98       	cbi	0x17, 3	; 23
  c8:	8a ec       	ldi	r24, 0xCA	; 202
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <write_bit+0x26>
  ce:	08 95       	ret

000000d0 <read_bit>:
	
	}
}

uint8_t read_bit(void){
	DS_OUT;
  d0:	bb 9a       	sbi	0x17, 3	; 23
	DS_LOW;
  d2:	c3 98       	cbi	0x18, 3	; 24
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <read_bit+0x6>
	
	_delay_us(1);
	DS_IN;
  da:	bb 98       	cbi	0x17, 3	; 23
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <read_bit+0xe>
	_delay_us(14);
	uint8_t state = PINB&(1<<PB3);
  e2:	86 b3       	in	r24, 0x16	; 22
  e4:	95 ea       	ldi	r25, 0xA5	; 165
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <read_bit+0x16>
  ea:	86 95       	lsr	r24
  ec:	86 95       	lsr	r24
  ee:	86 95       	lsr	r24
	_delay_us(45);
	if(state) return 1; else return 0;

}
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	08 95       	ret

000000f4 <write_byte>:


void write_byte(uint8_t data){
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=0;i<8;i++){
		if(data&(1<<i)) write_bit(1); else write_bit(0);
 100:	08 2f       	mov	r16, r24
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	c8 01       	movw	r24, r16
 106:	0c 2e       	mov	r0, r28
 108:	02 c0       	rjmp	.+4      	; 0x10e <write_byte+0x1a>
 10a:	95 95       	asr	r25
 10c:	87 95       	ror	r24
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <write_byte+0x16>
 112:	80 ff       	sbrs	r24, 0
 114:	03 c0       	rjmp	.+6      	; 0x11c <write_byte+0x28>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <write_byte+0x2c>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 52 00 	call	0xa4	; 0xa4 <write_bit>
 124:	21 96       	adiw	r28, 0x01	; 1

}


void write_byte(uint8_t data){
	for(uint8_t i=0;i<8;i++){
 126:	c8 30       	cpi	r28, 0x08	; 8
 128:	d1 05       	cpc	r29, r1
 12a:	61 f7       	brne	.-40     	; 0x104 <write_byte+0x10>
		if(data&(1<<i)) write_bit(1); else write_bit(0);
	}

}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <read_byte>:

uint8_t read_byte(void){
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t data=0;
	for(uint8_t i=0;i<8;i++){
		if(read_bit())data|=(1<<i);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	e8 2e       	mov	r14, r24
 14a:	f1 2c       	mov	r15, r1
 14c:	0e 94 68 00 	call	0xd0	; 0xd0 <read_bit>
 150:	88 23       	and	r24, r24
 152:	41 f0       	breq	.+16     	; 0x164 <read_byte+0x2e>
 154:	c7 01       	movw	r24, r14
 156:	0c 2e       	mov	r0, r28
 158:	02 c0       	rjmp	.+4      	; 0x15e <read_byte+0x28>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <read_byte+0x24>
 162:	18 2b       	or	r17, r24
 164:	21 96       	adiw	r28, 0x01	; 1

}

uint8_t read_byte(void){
	uint8_t data=0;
	for(uint8_t i=0;i<8;i++){
 166:	c8 30       	cpi	r28, 0x08	; 8
 168:	d1 05       	cpc	r29, r1
 16a:	81 f7       	brne	.-32     	; 0x14c <read_byte+0x16>
		if(read_bit())data|=(1<<i);
	}
	return data;
}
 16c:	81 2f       	mov	r24, r17
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <main>:

int main(void){
 17a:	af 92       	push	r10
 17c:	bf 92       	push	r11
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
	lcdinit();
 18c:	0e 94 86 01 	call	0x30c	; 0x30c <lcdinit>
 190:	88 e8       	ldi	r24, 0x88	; 136
 192:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 194:	24 e1       	ldi	r18, 0x14	; 20
 196:	31 e0       	ldi	r19, 0x01	; 1
 198:	f9 01       	movw	r30, r18
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	d9 f7       	brne	.-10     	; 0x198 <main+0x1e>
	_delay_ms(500);
	goto_xy(0,0);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <goto_xy>
	lcd_text("hello");
 1aa:	80 e6       	ldi	r24, 0x60	; 96
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_text>
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	97 e2       	ldi	r25, 0x27	; 39
 1b6:	24 e1       	ldi	r18, 0x14	; 20
 1b8:	31 e0       	ldi	r19, 0x01	; 1
 1ba:	f9 01       	movw	r30, r18
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <main+0x40>
	_delay_ms(1000);
	lcd_clr();
 1c4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_clr>
			//_delay_ms(2000);
			lcd_clr();
			lcd_int(T);
			lcd_text(".");
			if((LSB&0x0F)==1) lcd_int(0);
			lcd_int(T2);
 1c8:	31 e7       	ldi	r19, 0x71	; 113
 1ca:	a3 2e       	mov	r10, r19
 1cc:	32 e0       	ldi	r19, 0x02	; 2
 1ce:	b3 2e       	mov	r11, r19
 1d0:	24 e1       	ldi	r18, 0x14	; 20
 1d2:	c2 2e       	mov	r12, r18
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	d2 2e       	mov	r13, r18
	lcd_text("hello");
	_delay_ms(1000);
	lcd_clr();

	while(1){
		if(!init()){
 1d8:	0e 94 41 00 	call	0x82	; 0x82 <init>
 1dc:	88 23       	and	r24, r24
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0x68>
 1e0:	4c c0       	rjmp	.+152    	; 0x27a <main+0x100>
			
			write_byte(0xCC); //SKIP ROM
 1e2:	8c ec       	ldi	r24, 0xCC	; 204
 1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_byte>
			write_byte(0x44); //CONVERT T
 1e8:	84 e4       	ldi	r24, 0x44	; 68
 1ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_byte>
			while(!read_bit());
 1ee:	0e 94 68 00 	call	0xd0	; 0xd0 <read_bit>
 1f2:	88 23       	and	r24, r24
 1f4:	e1 f3       	breq	.-8      	; 0x1ee <main+0x74>
			init();
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <init>
			write_byte(0xCC);
 1fa:	8c ec       	ldi	r24, 0xCC	; 204
 1fc:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_byte>
			write_byte(0xBE);  //READ SCRATCHPAD
 200:	8e eb       	ldi	r24, 0xBE	; 190
 202:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_byte>
			uint16_t LSB = read_byte();
 206:	0e 94 9b 00 	call	0x136	; 0x136 <read_byte>
 20a:	08 2f       	mov	r16, r24
 20c:	10 e0       	ldi	r17, 0x00	; 0
			uint16_t MSB = read_byte();
 20e:	0e 94 9b 00 	call	0x136	; 0x136 <read_byte>
 212:	f8 2e       	mov	r15, r24
			init();
 214:	0e 94 41 00 	call	0x82	; 0x82 <init>
			uint16_t T = (LSB>>4)+(MSB&(0x07)<<4);
			uint16_t T2 = (LSB&0x0F)*625;
 218:	e8 01       	movw	r28, r16
 21a:	cf 70       	andi	r28, 0x0F	; 15
 21c:	d0 70       	andi	r29, 0x00	; 0
			//_delay_ms(2000);
			lcd_clr();
 21e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_clr>
			lcd_int(T);
 222:	80 e7       	ldi	r24, 0x70	; 112
 224:	f8 22       	and	r15, r24
 226:	94 e0       	ldi	r25, 0x04	; 4
 228:	16 95       	lsr	r17
 22a:	07 95       	ror	r16
 22c:	9a 95       	dec	r25
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xae>
 230:	c8 01       	movw	r24, r16
 232:	8f 0d       	add	r24, r15
 234:	91 1d       	adc	r25, r1
 236:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_int>
			lcd_text(".");
 23a:	86 e6       	ldi	r24, 0x66	; 102
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_text>
			if((LSB&0x0F)==1) lcd_int(0);
 242:	c1 30       	cpi	r28, 0x01	; 1
 244:	d1 05       	cpc	r29, r1
 246:	21 f4       	brne	.+8      	; 0x250 <main+0xd6>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_int>
			lcd_int(T2);
 250:	ca 9d       	mul	r28, r10
 252:	c0 01       	movw	r24, r0
 254:	cb 9d       	mul	r28, r11
 256:	90 0d       	add	r25, r0
 258:	da 9d       	mul	r29, r10
 25a:	90 0d       	add	r25, r0
 25c:	11 24       	eor	r1, r1
 25e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_int>
			lcd_text(" C");
 262:	88 e6       	ldi	r24, 0x68	; 104
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_text>
 26a:	88 e8       	ldi	r24, 0x88	; 136
 26c:	93 e1       	ldi	r25, 0x13	; 19
 26e:	f6 01       	movw	r30, r12
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 274:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 276:	d9 f7       	brne	.-10     	; 0x26e <main+0xf4>
 278:	af cf       	rjmp	.-162    	; 0x1d8 <main+0x5e>
			_delay_ms(500);
		}else if(init()){ 
 27a:	0e 94 41 00 	call	0x82	; 0x82 <init>
 27e:	88 23       	and	r24, r24
 280:	09 f4       	brne	.+2      	; 0x284 <main+0x10a>
 282:	aa cf       	rjmp	.-172    	; 0x1d8 <main+0x5e>
		lcd_clr();
 284:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_clr>
		lcd_text("brak czujnika");
 288:	8b e6       	ldi	r24, 0x6B	; 107
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_text>
 290:	88 e8       	ldi	r24, 0x88	; 136
 292:	93 e1       	ldi	r25, 0x13	; 19
 294:	f6 01       	movw	r30, r12
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	d9 f7       	brne	.-10     	; 0x294 <main+0x11a>
 29e:	9c cf       	rjmp	.-200    	; 0x1d8 <main+0x5e>

000002a0 <lcd_send_half_byte>:

#define CLR_RS LCD_PORT&=~(1<<LCD_RS)
#define CLR_E LCD_PORT&=~(1<<LCD_E)

static inline void lcd_send_half_byte(uint8_t data){
	SET_E;
 2a0:	d9 9a       	sbi	0x1b, 1	; 27
	if(data & (1<<0)) LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
 2a2:	80 ff       	sbrs	r24, 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <lcd_send_half_byte+0xa>
 2a6:	da 9a       	sbi	0x1b, 2	; 27
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <lcd_send_half_byte+0xc>
 2aa:	da 98       	cbi	0x1b, 2	; 27
	if(data & (1<<1)) LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
 2ac:	81 ff       	sbrs	r24, 1
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <lcd_send_half_byte+0x14>
 2b0:	db 9a       	sbi	0x1b, 3	; 27
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <lcd_send_half_byte+0x16>
 2b4:	db 98       	cbi	0x1b, 3	; 27
	if(data & (1<<2)) LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
 2b6:	82 ff       	sbrs	r24, 2
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <lcd_send_half_byte+0x1e>
 2ba:	dc 9a       	sbi	0x1b, 4	; 27
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <lcd_send_half_byte+0x20>
 2be:	dc 98       	cbi	0x1b, 4	; 27
	if(data & (1<<3)) LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
 2c0:	83 ff       	sbrs	r24, 3
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <lcd_send_half_byte+0x28>
 2c4:	dd 9a       	sbi	0x1b, 5	; 27
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <lcd_send_half_byte+0x2a>
 2c8:	dd 98       	cbi	0x1b, 5	; 27
	CLR_E;
 2ca:	d9 98       	cbi	0x1b, 1	; 27
}
 2cc:	08 95       	ret

000002ce <lcd_write_byte>:

void lcd_write_byte(uint8_t data){
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	f8 2e       	mov	r15, r24
	lcd_send_half_byte(data>>4);
 2d6:	82 95       	swap	r24
 2d8:	8f 70       	andi	r24, 0x0F	; 15
 2da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_send_half_byte>
 2de:	0b e4       	ldi	r16, 0x4B	; 75
 2e0:	11 e0       	ldi	r17, 0x01	; 1
 2e2:	c8 01       	movw	r24, r16
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_write_byte+0x16>
	_delay_us(120);
	lcd_send_half_byte(data);
 2e8:	8f 2d       	mov	r24, r15
 2ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_send_half_byte>
 2ee:	c8 01       	movw	r24, r16
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_write_byte+0x22>
	_delay_us(120);
	
}
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	08 95       	ret

000002fc <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd){
	CLR_RS;
 2fc:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write_byte(cmd);
 2fe:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write_byte>
}
 302:	08 95       	ret

00000304 <lcd_write_data>:

void lcd_write_data(uint8_t data){
	SET_RS;
 304:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_write_byte(data);
 306:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write_byte>
}
 30a:	08 95       	ret

0000030c <lcdinit>:

void lcdinit(void){
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	LCD_PORT_DDR|=(1<<LCD_RS);
 314:	d0 9a       	sbi	0x1a, 0	; 26
	LCD_PORT_DDR|=(1<<LCD_E);
 316:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_PORT_DDR|=(1<<LCD_D4)|(1<<LCD_D5)|(1<<LCD_D6)|(1<<LCD_D7);
 318:	8a b3       	in	r24, 0x1a	; 26
 31a:	8c 63       	ori	r24, 0x3C	; 60
 31c:	8a bb       	out	0x1a, r24	; 26
	LCD_PORT&=~(1<<LCD_RS);
 31e:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<LCD_E);
 320:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT=0x00;
 322:	1b ba       	out	0x1b, r1	; 27
 324:	22 ec       	ldi	r18, 0xC2	; 194
 326:	31 e0       	ldi	r19, 0x01	; 1
 328:	44 e1       	ldi	r20, 0x14	; 20
 32a:	51 e0       	ldi	r21, 0x01	; 1
 32c:	c4 e1       	ldi	r28, 0x14	; 20
 32e:	d1 e0       	ldi	r29, 0x01	; 1
 330:	ca 01       	movw	r24, r20
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <lcdinit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 336:	21 50       	subi	r18, 0x01	; 1
 338:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33a:	c1 f7       	brne	.-16     	; 0x32c <lcdinit+0x20>
	_delay_ms(45);
	lcd_send_half_byte(3);
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_send_half_byte>
 342:	87 e4       	ldi	r24, 0x47	; 71
 344:	9c e2       	ldi	r25, 0x2C	; 44
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <lcdinit+0x3a>
	_delay_ms(4.1);
	lcd_send_half_byte(3);
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_send_half_byte>
 350:	ce 01       	movw	r24, r28
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <lcdinit+0x46>
	_delay_us(100);
	lcd_send_half_byte(3);
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_send_half_byte>
 35c:	ce 01       	movw	r24, r28
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <lcdinit+0x52>
	_delay_us(100);
	lcd_send_half_byte(0x02);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_send_half_byte>
 368:	06 e6       	ldi	r16, 0x66	; 102
 36a:	10 e2       	ldi	r17, 0x20	; 32
 36c:	c8 01       	movw	r24, r16
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <lcdinit+0x62>
	_delay_ms(3);
	lcd_write_cmd(0x28);
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 378:	c8 01       	movw	r24, r16
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <lcdinit+0x6e>
	_delay_ms(3);
	lcd_write_cmd(1<<3);
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 384:	c8 01       	movw	r24, r16
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <lcdinit+0x7a>
	_delay_ms(3);
	lcd_write_cmd(1<<0);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 390:	c8 01       	movw	r24, r16
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <lcdinit+0x86>
	_delay_ms(3);
	lcd_write_cmd(3<<1);
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 39c:	c8 01       	movw	r24, r16
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcdinit+0x92>
	_delay_ms(3);
	lcd_write_cmd(0x0F);
 3a2:	8f e0       	ldi	r24, 0x0F	; 15
 3a4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 3a8:	8c ec       	ldi	r24, 0xCC	; 204
 3aa:	9a e0       	ldi	r25, 0x0A	; 10
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcdinit+0xa0>
	_delay_ms(1);
	
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <lcd_clr>:

void lcd_clr(void){
	lcd_write_cmd(1<<0);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	96 e3       	ldi	r25, 0x36	; 54
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <lcd_clr+0xa>
	_delay_ms(5);
}
 3c8:	08 95       	ret

000003ca <lcd_cursor_return>:

void lcd_cursor_return(void){
	lcd_write_cmd(1<<1);
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	96 e3       	ldi	r25, 0x36	; 54
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_cursor_return+0xa>
	_delay_ms(5);
}
 3d8:	08 95       	ret

000003da <lcd_text>:

void lcd_text(char* str){
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <lcd_text+0xe>
	while(*str) lcd_write_data(*str++);
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	0e 94 82 01 	call	0x304	; 0x304 <lcd_write_data>
 3e8:	88 81       	ld	r24, Y
 3ea:	88 23       	and	r24, r24
 3ec:	d1 f7       	brne	.-12     	; 0x3e2 <lcd_text+0x8>
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <goto_xy>:
	char buf[10];
	lcd_text(itoa(z,buf,10));
}
void goto_xy(uint8_t x, uint8_t y){
	uint8_t addr=0;
	if(y==0) addr=0x00+x;
 3f4:	66 23       	and	r22, r22
 3f6:	29 f0       	breq	.+10     	; 0x402 <goto_xy+0xe>
	if(y==1) addr=0x40+x;
 3f8:	61 30       	cpi	r22, 0x01	; 1
 3fa:	11 f0       	breq	.+4      	; 0x400 <goto_xy+0xc>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <goto_xy+0xe>
 400:	80 5c       	subi	r24, 0xC0	; 192
	lcd_write_cmd((1<<7)|addr);
 402:	80 68       	ori	r24, 0x80	; 128
 404:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_write_cmd>
 408:	08 95       	ret

0000040a <lcd_int>:

void lcd_text(char* str){
	while(*str) lcd_write_data(*str++);
}

void lcd_int(int16_t z){
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	2a 97       	sbiw	r28, 0x0a	; 10
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	lcd_text(itoa(z,buf,10));
 41e:	be 01       	movw	r22, r28
 420:	6f 5f       	subi	r22, 0xFF	; 255
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	4a e0       	ldi	r20, 0x0A	; 10
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	0e 94 21 02 	call	0x442	; 0x442 <itoa>
 42c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_text>
}
 430:	2a 96       	adiw	r28, 0x0a	; 10
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	08 95       	ret

00000442 <itoa>:
 442:	fb 01       	movw	r30, r22
 444:	9f 01       	movw	r18, r30
 446:	e8 94       	clt
 448:	42 30       	cpi	r20, 0x02	; 2
 44a:	c4 f0       	brlt	.+48     	; 0x47c <itoa+0x3a>
 44c:	45 32       	cpi	r20, 0x25	; 37
 44e:	b4 f4       	brge	.+44     	; 0x47c <itoa+0x3a>
 450:	4a 30       	cpi	r20, 0x0A	; 10
 452:	29 f4       	brne	.+10     	; 0x45e <itoa+0x1c>
 454:	97 fb       	bst	r25, 7
 456:	1e f4       	brtc	.+6      	; 0x45e <itoa+0x1c>
 458:	90 95       	com	r25
 45a:	81 95       	neg	r24
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	64 2f       	mov	r22, r20
 460:	77 27       	eor	r23, r23
 462:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__udivmodhi4>
 466:	80 5d       	subi	r24, 0xD0	; 208
 468:	8a 33       	cpi	r24, 0x3A	; 58
 46a:	0c f0       	brlt	.+2      	; 0x46e <itoa+0x2c>
 46c:	89 5d       	subi	r24, 0xD9	; 217
 46e:	81 93       	st	Z+, r24
 470:	cb 01       	movw	r24, r22
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	a1 f7       	brne	.-24     	; 0x45e <itoa+0x1c>
 476:	16 f4       	brtc	.+4      	; 0x47c <itoa+0x3a>
 478:	5d e2       	ldi	r21, 0x2D	; 45
 47a:	51 93       	st	Z+, r21
 47c:	10 82       	st	Z, r1
 47e:	c9 01       	movw	r24, r18
 480:	0c 94 42 02 	jmp	0x484	; 0x484 <strrev>

00000484 <strrev>:
 484:	dc 01       	movw	r26, r24
 486:	fc 01       	movw	r30, r24
 488:	67 2f       	mov	r22, r23
 48a:	71 91       	ld	r23, Z+
 48c:	77 23       	and	r23, r23
 48e:	e1 f7       	brne	.-8      	; 0x488 <strrev+0x4>
 490:	32 97       	sbiw	r30, 0x02	; 2
 492:	04 c0       	rjmp	.+8      	; 0x49c <strrev+0x18>
 494:	7c 91       	ld	r23, X
 496:	6d 93       	st	X+, r22
 498:	70 83       	st	Z, r23
 49a:	62 91       	ld	r22, -Z
 49c:	ae 17       	cp	r26, r30
 49e:	bf 07       	cpc	r27, r31
 4a0:	c8 f3       	brcs	.-14     	; 0x494 <strrev+0x10>
 4a2:	08 95       	ret

000004a4 <__udivmodhi4>:
 4a4:	aa 1b       	sub	r26, r26
 4a6:	bb 1b       	sub	r27, r27
 4a8:	51 e1       	ldi	r21, 0x11	; 17
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <__udivmodhi4_ep>

000004ac <__udivmodhi4_loop>:
 4ac:	aa 1f       	adc	r26, r26
 4ae:	bb 1f       	adc	r27, r27
 4b0:	a6 17       	cp	r26, r22
 4b2:	b7 07       	cpc	r27, r23
 4b4:	10 f0       	brcs	.+4      	; 0x4ba <__udivmodhi4_ep>
 4b6:	a6 1b       	sub	r26, r22
 4b8:	b7 0b       	sbc	r27, r23

000004ba <__udivmodhi4_ep>:
 4ba:	88 1f       	adc	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	5a 95       	dec	r21
 4c0:	a9 f7       	brne	.-22     	; 0x4ac <__udivmodhi4_loop>
 4c2:	80 95       	com	r24
 4c4:	90 95       	com	r25
 4c6:	bc 01       	movw	r22, r24
 4c8:	cd 01       	movw	r24, r26
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
