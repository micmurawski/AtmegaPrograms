
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002392  00002426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000232  00800180  00800180  00002546  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002546  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000021f  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002244  00000000  00000000  00002805  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d6  00000000  00000000  00004a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001836  00000000  00000000  0000521f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00006a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046d  00000000  00000000  00006cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d6a  00000000  00000000  00007165  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00008ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
      8a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:

}


uint8_t init(void){
	DS_LOW;
      92:	c3 98       	cbi	0x18, 3	; 24
	DS_OUT;
      94:	bb 9a       	sbi	0x17, 3	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      96:	8f e2       	ldi	r24, 0x2F	; 47
      98:	95 e0       	ldi	r25, 0x05	; 5
      9a:	01 97       	sbiw	r24, 0x01	; 1
      9c:	f1 f7       	brne	.-4      	; 0x9a <init+0x8>
	_delay_us(480);
	DS_IN;
      9e:	bb 98       	cbi	0x17, 3	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      a0:	8d ed       	ldi	r24, 0xDD	; 221
      a2:	8a 95       	dec	r24
      a4:	f1 f7       	brne	.-4      	; 0xa2 <init+0x10>
	_delay_us(60);
	uint8_t state = PINB&(1<<PB3);
      a6:	86 b3       	in	r24, 0x16	; 22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      a8:	e9 e8       	ldi	r30, 0x89	; 137
      aa:	f4 e0       	ldi	r31, 0x04	; 4
      ac:	31 97       	sbiw	r30, 0x01	; 1
      ae:	f1 f7       	brne	.-4      	; 0xac <init+0x1a>
	_delay_us(420);
	
	return state;
}
      b0:	88 70       	andi	r24, 0x08	; 8
      b2:	08 95       	ret

000000b4 <write_bit>:

void write_bit(bit){
	if(bit==0){
      b4:	00 97       	sbiw	r24, 0x00	; 0
      b6:	41 f4       	brne	.+16     	; 0xc8 <write_bit+0x14>
		DS_LOW;
      b8:	c3 98       	cbi	0x18, 3	; 24
		DS_OUT;
      ba:	bb 9a       	sbi	0x17, 3	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      bc:	8d ed       	ldi	r24, 0xDD	; 221
      be:	8a 95       	dec	r24
      c0:	f1 f7       	brne	.-4      	; 0xbe <write_bit+0xa>
		_delay_us(60);
		DS_IN;
      c2:	bb 98       	cbi	0x17, 3	; 23
		uint8_t state = PINB&(1<<PB3);
      c4:	86 b3       	in	r24, 0x16	; 22
      c6:	08 95       	ret
	}else if(bit==1){
      c8:	01 97       	sbiw	r24, 0x01	; 1
      ca:	49 f4       	brne	.+18     	; 0xde <write_bit+0x2a>
		DS_LOW;
      cc:	c3 98       	cbi	0x18, 3	; 24
		DS_OUT;
      ce:	bb 9a       	sbi	0x17, 3	; 23
      d0:	82 e1       	ldi	r24, 0x12	; 18
      d2:	8a 95       	dec	r24
      d4:	f1 f7       	brne	.-4      	; 0xd2 <write_bit+0x1e>
		_delay_us(5);
		DS_IN;
      d6:	bb 98       	cbi	0x17, 3	; 23
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	8a 95       	dec	r24
      dc:	f1 f7       	brne	.-4      	; 0xda <write_bit+0x26>
      de:	08 95       	ret

000000e0 <read_bit>:
	
	}
}

uint8_t read_bit(void){
	DS_OUT;
      e0:	bb 9a       	sbi	0x17, 3	; 23
	DS_LOW;
      e2:	c3 98       	cbi	0x18, 3	; 24
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	8a 95       	dec	r24
      e8:	f1 f7       	brne	.-4      	; 0xe6 <read_bit+0x6>
	
	_delay_us(1);
	DS_IN;
      ea:	bb 98       	cbi	0x17, 3	; 23
      ec:	83 e3       	ldi	r24, 0x33	; 51
      ee:	8a 95       	dec	r24
      f0:	f1 f7       	brne	.-4      	; 0xee <read_bit+0xe>
	_delay_us(14);
	uint8_t state = PINB&(1<<PB3);
      f2:	86 b3       	in	r24, 0x16	; 22
      f4:	95 ea       	ldi	r25, 0xA5	; 165
      f6:	9a 95       	dec	r25
      f8:	f1 f7       	brne	.-4      	; 0xf6 <read_bit+0x16>
      fa:	86 95       	lsr	r24
      fc:	86 95       	lsr	r24
      fe:	86 95       	lsr	r24
	_delay_us(45);
	if(state) return 1; else return 0;

}
     100:	81 70       	andi	r24, 0x01	; 1
     102:	08 95       	ret

00000104 <write_byte>:


void write_byte(uint8_t data){
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	c0 e0       	ldi	r28, 0x00	; 0
     10e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=0;i<8;i++){
		if(data&(1<<i)) write_bit(1); else write_bit(0);
     110:	08 2f       	mov	r16, r24
     112:	10 e0       	ldi	r17, 0x00	; 0
     114:	c8 01       	movw	r24, r16
     116:	0c 2e       	mov	r0, r28
     118:	02 c0       	rjmp	.+4      	; 0x11e <write_byte+0x1a>
     11a:	95 95       	asr	r25
     11c:	87 95       	ror	r24
     11e:	0a 94       	dec	r0
     120:	e2 f7       	brpl	.-8      	; 0x11a <write_byte+0x16>
     122:	80 ff       	sbrs	r24, 0
     124:	03 c0       	rjmp	.+6      	; 0x12c <write_byte+0x28>
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <write_byte+0x2c>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 5a 00 	call	0xb4	; 0xb4 <write_bit>
     134:	21 96       	adiw	r28, 0x01	; 1

}


void write_byte(uint8_t data){
	for(uint8_t i=0;i<8;i++){
     136:	c8 30       	cpi	r28, 0x08	; 8
     138:	d1 05       	cpc	r29, r1
     13a:	61 f7       	brne	.-40     	; 0x114 <write_byte+0x10>
		if(data&(1<<i)) write_bit(1); else write_bit(0);
	}

}
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <read_byte>:

uint8_t read_byte(void){
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	1f 93       	push	r17
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	10 e0       	ldi	r17, 0x00	; 0
     152:	c0 e0       	ldi	r28, 0x00	; 0
     154:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t data=0;
	for(uint8_t i=0;i<8;i++){
		if(read_bit())data|=(1<<i);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	e8 2e       	mov	r14, r24
     15a:	f1 2c       	mov	r15, r1
     15c:	0e 94 70 00 	call	0xe0	; 0xe0 <read_bit>
     160:	88 23       	and	r24, r24
     162:	41 f0       	breq	.+16     	; 0x174 <read_byte+0x2e>
     164:	c7 01       	movw	r24, r14
     166:	0c 2e       	mov	r0, r28
     168:	02 c0       	rjmp	.+4      	; 0x16e <read_byte+0x28>
     16a:	88 0f       	add	r24, r24
     16c:	99 1f       	adc	r25, r25
     16e:	0a 94       	dec	r0
     170:	e2 f7       	brpl	.-8      	; 0x16a <read_byte+0x24>
     172:	18 2b       	or	r17, r24
     174:	21 96       	adiw	r28, 0x01	; 1

}

uint8_t read_byte(void){
	uint8_t data=0;
	for(uint8_t i=0;i<8;i++){
     176:	c8 30       	cpi	r28, 0x08	; 8
     178:	d1 05       	cpc	r29, r1
     17a:	81 f7       	brne	.-32     	; 0x15c <read_byte+0x16>
		if(read_bit())data|=(1<<i);
	}
	return data;
}
     17c:	81 2f       	mov	r24, r17
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	1f 91       	pop	r17
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	08 95       	ret

0000018a <end>:
FATFS fs;
BYTE buffer[512];
WORD br;
FRESULT result;

void end(void){
     18a:	80 e2       	ldi	r24, 0x20	; 32
     18c:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18e:	24 e1       	ldi	r18, 0x14	; 20
     190:	31 e0       	ldi	r19, 0x01	; 1
     192:	f9 01       	movw	r30, r18
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <end+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     198:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19a:	d9 f7       	brne	.-10     	; 0x192 <end+0x8>
	_delay_ms(2000);
	goto_xy(0,0);
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
	pf_mount(NULL);
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <pf_mount>
	lcd_text("DEVICE UNMOUNTED");
     1ac:	80 e6       	ldi	r24, 0x60	; 96
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>

}
     1b4:	08 95       	ret

000001b6 <main>:
		if(read_bit())data|=(1<<i);
	}
	return data;
}

int main(void){
     1b6:	6f 92       	push	r6
     1b8:	7f 92       	push	r7
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
	DDRD&=~(1<<PD6);
     1d2:	8e 98       	cbi	0x11, 6	; 17
	lcdinit();
     1d4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <lcdinit>
     1d8:	88 e8       	ldi	r24, 0x88	; 136
     1da:	93 e1       	ldi	r25, 0x13	; 19
     1dc:	24 e1       	ldi	r18, 0x14	; 20
     1de:	31 e0       	ldi	r19, 0x01	; 1
     1e0:	f9 01       	movw	r30, r18
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <main+0x2a>
	_delay_ms(500);
	goto_xy(0,0);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
	result = pf_mount(&fs);
     1f2:	85 e8       	ldi	r24, 0x85	; 133
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <pf_mount>
     1fa:	80 93 b1 03 	sts	0x03B1, r24
	if(result==FR_OK) lcd_text("DEVICE MOUNTED");
     1fe:	88 23       	and	r24, r24
     200:	21 f4       	brne	.+8      	; 0x20a <main+0x54>
     202:	81 e7       	ldi	r24, 0x71	; 113
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
	if(result==FR_NO_FILESYSTEM) lcd_text("No vaild FAT partition on file disck");
     20a:	80 91 b1 03 	lds	r24, 0x03B1
     20e:	87 30       	cpi	r24, 0x07	; 7
     210:	21 f4       	brne	.+8      	; 0x21a <main+0x64>
     212:	80 e8       	ldi	r24, 0x80	; 128
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
	if(result==FR_DISK_ERR) lcd_text("Error in the disck function");
     21a:	80 91 b1 03 	lds	r24, 0x03B1
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	21 f4       	brne	.+8      	; 0x22a <main+0x74>
     222:	85 ea       	ldi	r24, 0xA5	; 165
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
	if(result==FR_NOT_READY) lcd_text("Could not be initialized due to a disk error or no medium");
     22a:	80 91 b1 03 	lds	r24, 0x03B1
     22e:	82 30       	cpi	r24, 0x02	; 2
     230:	21 f4       	brne	.+8      	; 0x23a <main+0x84>
     232:	81 ec       	ldi	r24, 0xC1	; 193
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
     23a:	80 e1       	ldi	r24, 0x10	; 16
     23c:	97 e2       	ldi	r25, 0x27	; 39
     23e:	24 e1       	ldi	r18, 0x14	; 20
     240:	31 e0       	ldi	r19, 0x01	; 1
     242:	f9 01       	movw	r30, r18
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24a:	d9 f7       	brne	.-10     	; 0x242 <main+0x8c>
	_delay_ms(1000);
	result= pf_open("/info/opis.txt");
     24c:	8b ef       	ldi	r24, 0xFB	; 251
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pf_open>
     254:	80 93 b1 03 	sts	0x03B1, r24
     258:	20 e2       	ldi	r18, 0x20	; 32
     25a:	3e e4       	ldi	r19, 0x4E	; 78
     25c:	44 e1       	ldi	r20, 0x14	; 20
     25e:	51 e0       	ldi	r21, 0x01	; 1
     260:	fa 01       	movw	r30, r20
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <main+0xac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     266:	21 50       	subi	r18, 0x01	; 1
     268:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     26a:	d1 f7       	brne	.-12     	; 0x260 <main+0xaa>
	_delay_ms(2000);
	
	if(result){
     26c:	88 23       	and	r24, r24
     26e:	51 f0       	breq	.+20     	; 0x284 <main+0xce>
		goto_xy(0,0);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
		lcd_text("Error opening file");
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
		end();
     280:	0e 94 c5 00 	call	0x18a	; 0x18a <end>
	}
	
	result=pf_read(buffer,15,&br);
     284:	81 eb       	ldi	r24, 0xB1	; 177
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	6f e0       	ldi	r22, 0x0F	; 15
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	4f ea       	ldi	r20, 0xAF	; 175
     28e:	51 e0       	ldi	r21, 0x01	; 1
     290:	0e 94 cf 08 	call	0x119e	; 0x119e <pf_read>
     294:	80 93 b1 03 	sts	0x03B1, r24
	if(br!=15){
     298:	80 91 af 01 	lds	r24, 0x01AF
     29c:	90 91 b0 01 	lds	r25, 0x01B0
     2a0:	0f 97       	sbiw	r24, 0x0f	; 15
     2a2:	51 f0       	breq	.+20     	; 0x2b8 <main+0x102>
		goto_xy(0,0);
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
		lcd_text("Error reading  file");
     2ac:	8d e1       	ldi	r24, 0x1D	; 29
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
		end();
     2b4:	0e 94 c5 00 	call	0x18a	; 0x18a <end>
	}
	
	goto_xy(0,0);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
	lcd_text(buffer);
     2c0:	81 eb       	ldi	r24, 0xB1	; 177
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
     2c8:	80 e5       	ldi	r24, 0x50	; 80
     2ca:	93 ec       	ldi	r25, 0xC3	; 195
     2cc:	24 e1       	ldi	r18, 0x14	; 20
     2ce:	31 e0       	ldi	r19, 0x01	; 1
     2d0:	f9 01       	movw	r30, r18
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d8:	d9 f7       	brne	.-10     	; 0x2d0 <main+0x11a>
	_delay_ms(5000);
	lcd_clr();
     2da:	0e 94 2a 03 	call	0x654	; 0x654 <lcd_clr>
	
	result= pf_open("/data/dane.txt");
     2de:	81 e3       	ldi	r24, 0x31	; 49
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pf_open>
     2e6:	80 93 b1 03 	sts	0x03B1, r24
     2ea:	20 e2       	ldi	r18, 0x20	; 32
     2ec:	3e e4       	ldi	r19, 0x4E	; 78
     2ee:	44 e1       	ldi	r20, 0x14	; 20
     2f0:	51 e0       	ldi	r21, 0x01	; 1
     2f2:	fa 01       	movw	r30, r20
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2f8:	21 50       	subi	r18, 0x01	; 1
     2fa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2fc:	d1 f7       	brne	.-12     	; 0x2f2 <main+0x13c>
	_delay_ms(2000);
	
	if(result){
     2fe:	88 23       	and	r24, r24
     300:	51 f0       	breq	.+20     	; 0x316 <main+0x160>
		goto_xy(0,0);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
		lcd_text("Error opening file");
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
		end();
     312:	0e 94 c5 00 	call	0x18a	; 0x18a <end>
	}
	
	result=pf_read(buffer,1000,&br);
     316:	81 eb       	ldi	r24, 0xB1	; 177
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	68 ee       	ldi	r22, 0xE8	; 232
     31c:	73 e0       	ldi	r23, 0x03	; 3
     31e:	4f ea       	ldi	r20, 0xAF	; 175
     320:	51 e0       	ldi	r21, 0x01	; 1
     322:	0e 94 cf 08 	call	0x119e	; 0x119e <pf_read>
     326:	80 93 b1 03 	sts	0x03B1, r24
	
	
	goto_xy(0,0);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
	lcd_text(buffer);
     332:	81 eb       	ldi	r24, 0xB1	; 177
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	93 ec       	ldi	r25, 0xC3	; 195
     33e:	24 e1       	ldi	r18, 0x14	; 20
     340:	31 e0       	ldi	r19, 0x01	; 1
     342:	f9 01       	movw	r30, r18
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <main+0x18e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     348:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34a:	d9 f7       	brne	.-10     	; 0x342 <main+0x18c>
	_delay_ms(5000);
	lcd_clr();
     34c:	0e 94 2a 03 	call	0x654	; 0x654 <lcd_clr>
			uint16_t LSB = read_byte();
			uint16_t MSB = read_byte();
			
			init();
			uint16_t T = (LSB>>4)+((MSB&(0x07))<<4);
			uint16_t T2 = (LSB&0x0F)*625;
     350:	71 e7       	ldi	r23, 0x71	; 113
     352:	67 2e       	mov	r6, r23
     354:	72 e0       	ldi	r23, 0x02	; 2
     356:	77 2e       	mov	r7, r23
     358:	64 e1       	ldi	r22, 0x14	; 20
     35a:	a6 2e       	mov	r10, r22
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	b6 2e       	mov	r11, r22
			//lcd_text(" C");
			_delay_ms(500);
			
			
			uint8_t slen;
			sprintf(buffer,"Temp %d.%d \n",T,T2);
     360:	51 eb       	ldi	r21, 0xB1	; 177
     362:	c5 2e       	mov	r12, r21
     364:	51 e0       	ldi	r21, 0x01	; 1
     366:	d5 2e       	mov	r13, r21
     368:	48 e4       	ldi	r20, 0x48	; 72
     36a:	84 2e       	mov	r8, r20
     36c:	41 e0       	ldi	r20, 0x01	; 1
     36e:	94 2e       	mov	r9, r20
	
	

	while(1){
		
		if(!init()){
     370:	0e 94 49 00 	call	0x92	; 0x92 <init>
     374:	88 23       	and	r24, r24
     376:	09 f0       	breq	.+2      	; 0x37a <main+0x1c4>
     378:	cb c0       	rjmp	.+406    	; 0x510 <main+0x35a>
			
			write_byte(0xCC); //SKIP ROM
     37a:	8c ec       	ldi	r24, 0xCC	; 204
     37c:	0e 94 82 00 	call	0x104	; 0x104 <write_byte>
			write_byte(0x44); //CONVERT T
     380:	84 e4       	ldi	r24, 0x44	; 68
     382:	0e 94 82 00 	call	0x104	; 0x104 <write_byte>
			while(!read_bit());
     386:	0e 94 70 00 	call	0xe0	; 0xe0 <read_bit>
     38a:	88 23       	and	r24, r24
     38c:	e1 f3       	breq	.-8      	; 0x386 <main+0x1d0>
			init();
     38e:	0e 94 49 00 	call	0x92	; 0x92 <init>
			write_byte(0xCC);
     392:	8c ec       	ldi	r24, 0xCC	; 204
     394:	0e 94 82 00 	call	0x104	; 0x104 <write_byte>
			write_byte(0xBE);  //READ SCRATCHPAD
     398:	8e eb       	ldi	r24, 0xBE	; 190
     39a:	0e 94 82 00 	call	0x104	; 0x104 <write_byte>
			uint16_t LSB = read_byte();
     39e:	0e 94 a3 00 	call	0x146	; 0x146 <read_byte>
     3a2:	08 2f       	mov	r16, r24
     3a4:	10 e0       	ldi	r17, 0x00	; 0
			uint16_t MSB = read_byte();
     3a6:	0e 94 a3 00 	call	0x146	; 0x146 <read_byte>
     3aa:	f8 2e       	mov	r15, r24
			
			init();
     3ac:	0e 94 49 00 	call	0x92	; 0x92 <init>
			uint16_t T = (LSB>>4)+((MSB&(0x07))<<4);
     3b0:	cf 2d       	mov	r28, r15
     3b2:	d0 e0       	ldi	r29, 0x00	; 0
     3b4:	c7 70       	andi	r28, 0x07	; 7
     3b6:	d0 70       	andi	r29, 0x00	; 0
     3b8:	34 e0       	ldi	r19, 0x04	; 4
     3ba:	cc 0f       	add	r28, r28
     3bc:	dd 1f       	adc	r29, r29
     3be:	3a 95       	dec	r19
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x204>
     3c2:	c8 01       	movw	r24, r16
     3c4:	24 e0       	ldi	r18, 0x04	; 4
     3c6:	96 95       	lsr	r25
     3c8:	87 95       	ror	r24
     3ca:	2a 95       	dec	r18
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x210>
     3ce:	c8 0f       	add	r28, r24
     3d0:	d9 1f       	adc	r29, r25
			uint16_t T2 = (LSB&0x0F)*625;
     3d2:	0f 70       	andi	r16, 0x0F	; 15
     3d4:	10 70       	andi	r17, 0x00	; 0
     3d6:	06 9d       	mul	r16, r6
     3d8:	70 01       	movw	r14, r0
     3da:	07 9d       	mul	r16, r7
     3dc:	f0 0c       	add	r15, r0
     3de:	16 9d       	mul	r17, r6
     3e0:	f0 0c       	add	r15, r0
     3e2:	11 24       	eor	r1, r1
			
			goto_xy(0,0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
			lcd_text("Temp ");
     3ec:	80 e4       	ldi	r24, 0x40	; 64
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
			lcd_int(T);
     3f4:	ce 01       	movw	r24, r28
     3f6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_int>
			lcd_text(".");
     3fa:	86 e4       	ldi	r24, 0x46	; 70
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
			if((LSB&0x0F)==1) lcd_int(0);
     402:	01 30       	cpi	r16, 0x01	; 1
     404:	11 05       	cpc	r17, r1
     406:	21 f4       	brne	.+8      	; 0x410 <main+0x25a>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_int>
			lcd_int(T2);
     410:	c7 01       	movw	r24, r14
     412:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcd_int>
     416:	88 e8       	ldi	r24, 0x88	; 136
     418:	93 e1       	ldi	r25, 0x13	; 19
     41a:	f5 01       	movw	r30, r10
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <main+0x266>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     420:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     422:	d9 f7       	brne	.-10     	; 0x41a <main+0x264>
			//lcd_text(" C");
			_delay_ms(500);
			
			
			uint8_t slen;
			sprintf(buffer,"Temp %d.%d \n",T,T2);
     424:	8d b7       	in	r24, 0x3d	; 61
     426:	9e b7       	in	r25, 0x3e	; 62
     428:	08 97       	sbiw	r24, 0x08	; 8
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	9e bf       	out	0x3e, r25	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	8d bf       	out	0x3d, r24	; 61
     434:	ed b7       	in	r30, 0x3d	; 61
     436:	fe b7       	in	r31, 0x3e	; 62
     438:	31 96       	adiw	r30, 0x01	; 1
     43a:	ad b7       	in	r26, 0x3d	; 61
     43c:	be b7       	in	r27, 0x3e	; 62
     43e:	12 96       	adiw	r26, 0x02	; 2
     440:	dc 92       	st	X, r13
     442:	ce 92       	st	-X, r12
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	93 82       	std	Z+3, r9	; 0x03
     448:	82 82       	std	Z+2, r8	; 0x02
     44a:	d5 83       	std	Z+5, r29	; 0x05
     44c:	c4 83       	std	Z+4, r28	; 0x04
     44e:	f7 82       	std	Z+7, r15	; 0x07
     450:	e6 82       	std	Z+6, r14	; 0x06
     452:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <sprintf>
			slen = strlen(buffer);
     456:	f6 01       	movw	r30, r12
     458:	01 90       	ld	r0, Z+
     45a:	00 20       	and	r0, r0
     45c:	e9 f7       	brne	.-6      	; 0x458 <main+0x2a2>
     45e:	8f 01       	movw	r16, r30
     460:	01 50       	subi	r16, 0x01	; 1
     462:	10 40       	sbci	r17, 0x00	; 0
     464:	01 5b       	subi	r16, 0xB1	; 177
     466:	11 40       	sbci	r17, 0x01	; 1
			result = pf_write(buffer,slen, &br);
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	8d b7       	in	r24, 0x3d	; 61
     46c:	9e b7       	in	r25, 0x3e	; 62
     46e:	08 96       	adiw	r24, 0x08	; 8
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	9e bf       	out	0x3e, r25	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	8d bf       	out	0x3d, r24	; 61
     47a:	c6 01       	movw	r24, r12
     47c:	b8 01       	movw	r22, r16
     47e:	4f ea       	ldi	r20, 0xAF	; 175
     480:	51 e0       	ldi	r21, 0x01	; 1
     482:	0e 94 1f 0a 	call	0x143e	; 0x143e <pf_write>
     486:	80 93 b1 03 	sts	0x03B1, r24
			if(br!=slen){
     48a:	80 91 af 01 	lds	r24, 0x01AF
     48e:	90 91 b0 01 	lds	r25, 0x01B0
     492:	80 17       	cp	r24, r16
     494:	91 07       	cpc	r25, r17
     496:	51 f0       	breq	.+20     	; 0x4ac <main+0x2f6>
				goto_xy(0,0);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
				lcd_text("Error writting file");
     4a0:	85 e5       	ldi	r24, 0x55	; 85
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
				end();
     4a8:	0e 94 c5 00 	call	0x18a	; 0x18a <end>
			}
			
			if(KEY_DOWN){
     4ac:	86 99       	sbic	0x10, 6	; 16
     4ae:	60 cf       	rjmp	.-320    	; 0x370 <main+0x1ba>
			result=pf_write(0,0,&br);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	4f ea       	ldi	r20, 0xAF	; 175
     4ba:	51 e0       	ldi	r21, 0x01	; 1
     4bc:	0e 94 1f 0a 	call	0x143e	; 0x143e <pf_write>
     4c0:	80 93 b1 03 	sts	0x03B1, r24
			end();
     4c4:	0e 94 c5 00 	call	0x18a	; 0x18a <end>
			lcd_clr();
     4c8:	0e 94 2a 03 	call	0x654	; 0x654 <lcd_clr>
			goto_xy(0,0);
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
			lcd_text("KEY DOWN");
     4d4:	89 e6       	ldi	r24, 0x69	; 105
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
     4dc:	80 e1       	ldi	r24, 0x10	; 16
     4de:	97 e2       	ldi	r25, 0x27	; 39
     4e0:	24 e1       	ldi	r18, 0x14	; 20
     4e2:	31 e0       	ldi	r19, 0x01	; 1
     4e4:	f9 01       	movw	r30, r18
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <main+0x330>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <main+0x32e>
		}
	
	}

	return 0;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	9f 90       	pop	r9
     508:	8f 90       	pop	r8
     50a:	7f 90       	pop	r7
     50c:	6f 90       	pop	r6
     50e:	08 95       	ret
			_delay_ms(1000);
			break;
			}
			//while(1);
			
		}else if(init()){ 
     510:	0e 94 49 00 	call	0x92	; 0x92 <init>
     514:	88 23       	and	r24, r24
     516:	09 f4       	brne	.+2      	; 0x51a <main+0x364>
     518:	2b cf       	rjmp	.-426    	; 0x370 <main+0x1ba>
		goto_xy(0,0);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	0e 94 47 03 	call	0x68e	; 0x68e <goto_xy>
		lcd_text("brak czujnika");
     522:	82 e7       	ldi	r24, 0x72	; 114
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
     52a:	88 e8       	ldi	r24, 0x88	; 136
     52c:	93 e1       	ldi	r25, 0x13	; 19
     52e:	f5 01       	movw	r30, r10
     530:	31 97       	sbiw	r30, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <main+0x37a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     534:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     536:	d9 f7       	brne	.-10     	; 0x52e <main+0x378>
     538:	1b cf       	rjmp	.-458    	; 0x370 <main+0x1ba>

0000053a <lcd_send_half_byte>:

#define CLR_RS LCD_PORT&=~(1<<LCD_RS)
#define CLR_E LCD_PORT&=~(1<<LCD_E)

static inline void lcd_send_half_byte(uint8_t data){
	SET_E;
     53a:	d9 9a       	sbi	0x1b, 1	; 27
	if(data & (1<<0)) LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
     53c:	80 ff       	sbrs	r24, 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <lcd_send_half_byte+0xa>
     540:	da 9a       	sbi	0x1b, 2	; 27
     542:	01 c0       	rjmp	.+2      	; 0x546 <lcd_send_half_byte+0xc>
     544:	da 98       	cbi	0x1b, 2	; 27
	if(data & (1<<1)) LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
     546:	81 ff       	sbrs	r24, 1
     548:	02 c0       	rjmp	.+4      	; 0x54e <lcd_send_half_byte+0x14>
     54a:	db 9a       	sbi	0x1b, 3	; 27
     54c:	01 c0       	rjmp	.+2      	; 0x550 <lcd_send_half_byte+0x16>
     54e:	db 98       	cbi	0x1b, 3	; 27
	if(data & (1<<2)) LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
     550:	82 ff       	sbrs	r24, 2
     552:	02 c0       	rjmp	.+4      	; 0x558 <lcd_send_half_byte+0x1e>
     554:	dc 9a       	sbi	0x1b, 4	; 27
     556:	01 c0       	rjmp	.+2      	; 0x55a <lcd_send_half_byte+0x20>
     558:	dc 98       	cbi	0x1b, 4	; 27
	if(data & (1<<3)) LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
     55a:	83 ff       	sbrs	r24, 3
     55c:	02 c0       	rjmp	.+4      	; 0x562 <lcd_send_half_byte+0x28>
     55e:	dd 9a       	sbi	0x1b, 5	; 27
     560:	01 c0       	rjmp	.+2      	; 0x564 <lcd_send_half_byte+0x2a>
     562:	dd 98       	cbi	0x1b, 5	; 27
	CLR_E;
     564:	d9 98       	cbi	0x1b, 1	; 27
}
     566:	08 95       	ret

00000568 <lcd_write_byte>:

void lcd_write_byte(uint8_t data){
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	f8 2e       	mov	r15, r24
	lcd_send_half_byte(data>>4);
     570:	82 95       	swap	r24
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_send_half_byte>
     578:	0b e4       	ldi	r16, 0x4B	; 75
     57a:	11 e0       	ldi	r17, 0x01	; 1
     57c:	c8 01       	movw	r24, r16
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <lcd_write_byte+0x16>
	_delay_us(120);
	lcd_send_half_byte(data);
     582:	8f 2d       	mov	r24, r15
     584:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_send_half_byte>
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_write_byte+0x22>
	_delay_us(120);
	
}
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	08 95       	ret

00000596 <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd){
	CLR_RS;
     596:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write_byte(cmd);
     598:	0e 94 b4 02 	call	0x568	; 0x568 <lcd_write_byte>
}
     59c:	08 95       	ret

0000059e <lcd_write_data>:

void lcd_write_data(uint8_t data){
	SET_RS;
     59e:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_write_byte(data);
     5a0:	0e 94 b4 02 	call	0x568	; 0x568 <lcd_write_byte>
}
     5a4:	08 95       	ret

000005a6 <lcdinit>:

void lcdinit(void){
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	LCD_PORT_DDR|=(1<<LCD_RS);
     5ae:	d0 9a       	sbi	0x1a, 0	; 26
	LCD_PORT_DDR|=(1<<LCD_E);
     5b0:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_PORT_DDR|=(1<<LCD_D4)|(1<<LCD_D5)|(1<<LCD_D6)|(1<<LCD_D7);
     5b2:	8a b3       	in	r24, 0x1a	; 26
     5b4:	8c 63       	ori	r24, 0x3C	; 60
     5b6:	8a bb       	out	0x1a, r24	; 26
	LCD_PORT&=~(1<<LCD_RS);
     5b8:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<LCD_E);
     5ba:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT=0x00;
     5bc:	1b ba       	out	0x1b, r1	; 27
     5be:	22 ec       	ldi	r18, 0xC2	; 194
     5c0:	31 e0       	ldi	r19, 0x01	; 1
     5c2:	44 e1       	ldi	r20, 0x14	; 20
     5c4:	51 e0       	ldi	r21, 0x01	; 1
     5c6:	c4 e1       	ldi	r28, 0x14	; 20
     5c8:	d1 e0       	ldi	r29, 0x01	; 1
     5ca:	ca 01       	movw	r24, r20
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcdinit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d4:	c1 f7       	brne	.-16     	; 0x5c6 <lcdinit+0x20>
	_delay_ms(45);
	lcd_send_half_byte(3);
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_send_half_byte>
     5dc:	87 e4       	ldi	r24, 0x47	; 71
     5de:	9c e2       	ldi	r25, 0x2C	; 44
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <lcdinit+0x3a>
	_delay_ms(4.1);
	lcd_send_half_byte(3);
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_send_half_byte>
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <lcdinit+0x46>
	_delay_us(100);
	lcd_send_half_byte(3);
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_send_half_byte>
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <lcdinit+0x52>
	_delay_us(100);
	lcd_send_half_byte(0x02);
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_send_half_byte>
     602:	06 e6       	ldi	r16, 0x66	; 102
     604:	10 e2       	ldi	r17, 0x20	; 32
     606:	c8 01       	movw	r24, r16
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <lcdinit+0x62>
	_delay_ms(3);
	lcd_write_cmd(0x28);
     60c:	88 e2       	ldi	r24, 0x28	; 40
     60e:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     612:	c8 01       	movw	r24, r16
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <lcdinit+0x6e>
	_delay_ms(3);
	lcd_write_cmd(1<<3);
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     61e:	c8 01       	movw	r24, r16
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <lcdinit+0x7a>
	_delay_ms(3);
	lcd_write_cmd(1<<0);
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     62a:	c8 01       	movw	r24, r16
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <lcdinit+0x86>
	_delay_ms(3);
	lcd_write_cmd(3<<1);
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     636:	c8 01       	movw	r24, r16
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <lcdinit+0x92>
	_delay_ms(3);
	lcd_write_cmd(0x0F);
     63c:	8f e0       	ldi	r24, 0x0F	; 15
     63e:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     642:	8c ec       	ldi	r24, 0xCC	; 204
     644:	9a e0       	ldi	r25, 0x0A	; 10
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <lcdinit+0xa0>
	_delay_ms(1);
	
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <lcd_clr>:

void lcd_clr(void){
	lcd_write_cmd(1<<0);
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	96 e3       	ldi	r25, 0x36	; 54
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <lcd_clr+0xa>
	_delay_ms(5);
}
     662:	08 95       	ret

00000664 <lcd_cursor_return>:

void lcd_cursor_return(void){
	lcd_write_cmd(1<<1);
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	96 e3       	ldi	r25, 0x36	; 54
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <lcd_cursor_return+0xa>
	_delay_ms(5);
}
     672:	08 95       	ret

00000674 <lcd_text>:

void lcd_text(char* str){
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
     67a:	03 c0       	rjmp	.+6      	; 0x682 <lcd_text+0xe>
	while(*str) lcd_write_data(*str++);
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_write_data>
     682:	88 81       	ld	r24, Y
     684:	88 23       	and	r24, r24
     686:	d1 f7       	brne	.-12     	; 0x67c <lcd_text+0x8>
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <goto_xy>:
	char buf[10];
	lcd_text(itoa(z,buf,10));
}
void goto_xy(uint8_t x, uint8_t y){
	uint8_t addr=0;
	if(y==0) addr=0x00+x;
     68e:	66 23       	and	r22, r22
     690:	29 f0       	breq	.+10     	; 0x69c <goto_xy+0xe>
	if(y==1) addr=0x40+x;
     692:	61 30       	cpi	r22, 0x01	; 1
     694:	11 f0       	breq	.+4      	; 0x69a <goto_xy+0xc>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	01 c0       	rjmp	.+2      	; 0x69c <goto_xy+0xe>
     69a:	80 5c       	subi	r24, 0xC0	; 192
	lcd_write_cmd((1<<7)|addr);
     69c:	80 68       	ori	r24, 0x80	; 128
     69e:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_write_cmd>
     6a2:	08 95       	ret

000006a4 <lcd_int>:

void lcd_text(char* str){
	while(*str) lcd_write_data(*str++);
}

void lcd_int(int16_t z){
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	2a 97       	sbiw	r28, 0x0a	; 10
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
	char buf[10];
	lcd_text(itoa(z,buf,10));
     6b8:	be 01       	movw	r22, r28
     6ba:	6f 5f       	subi	r22, 0xFF	; 255
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	4a e0       	ldi	r20, 0x0A	; 10
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <itoa>
     6c6:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_text>
}
     6ca:	2a 96       	adiw	r28, 0x0a	; 10
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	08 95       	ret

000006dc <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     6ee:	c0 91 80 01 	lds	r28, 0x0180
     6f2:	d0 91 81 01 	lds	r29, 0x0181


	dj->index = 0;
     6f6:	fc 01       	movw	r30, r24
     6f8:	11 82       	std	Z+1, r1	; 0x01
     6fa:	10 82       	st	Z, r1
	clst = dj->sclust;
     6fc:	24 81       	ldd	r18, Z+4	; 0x04
     6fe:	35 81       	ldd	r19, Z+5	; 0x05
     700:	46 81       	ldd	r20, Z+6	; 0x06
     702:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     704:	21 30       	cpi	r18, 0x01	; 1
     706:	31 05       	cpc	r19, r1
     708:	41 05       	cpc	r20, r1
     70a:	51 05       	cpc	r21, r1
     70c:	09 f4       	brne	.+2      	; 0x710 <dir_rewind+0x34>
     70e:	5b c0       	rjmp	.+182    	; 0x7c6 <dir_rewind+0xea>
     710:	8e 81       	ldd	r24, Y+6	; 0x06
     712:	9f 81       	ldd	r25, Y+7	; 0x07
     714:	a8 85       	ldd	r26, Y+8	; 0x08
     716:	b9 85       	ldd	r27, Y+9	; 0x09
     718:	28 17       	cp	r18, r24
     71a:	39 07       	cpc	r19, r25
     71c:	4a 07       	cpc	r20, r26
     71e:	5b 07       	cpc	r21, r27
     720:	08 f0       	brcs	.+2      	; 0x724 <dir_rewind+0x48>
     722:	51 c0       	rjmp	.+162    	; 0x7c6 <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     724:	21 15       	cp	r18, r1
     726:	31 05       	cpc	r19, r1
     728:	41 05       	cpc	r20, r1
     72a:	51 05       	cpc	r21, r1
     72c:	39 f4       	brne	.+14     	; 0x73c <dir_rewind+0x60>
     72e:	88 81       	ld	r24, Y
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	21 f4       	brne	.+8      	; 0x73c <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
     734:	2e 85       	ldd	r18, Y+14	; 0x0e
     736:	3f 85       	ldd	r19, Y+15	; 0x0f
     738:	48 89       	ldd	r20, Y+16	; 0x10
     73a:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
     73c:	f6 01       	movw	r30, r12
     73e:	20 87       	std	Z+8, r18	; 0x08
     740:	31 87       	std	Z+9, r19	; 0x09
     742:	42 87       	std	Z+10, r20	; 0x0a
     744:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     746:	21 15       	cp	r18, r1
     748:	31 05       	cpc	r19, r1
     74a:	41 05       	cpc	r20, r1
     74c:	51 05       	cpc	r21, r1
     74e:	81 f1       	breq	.+96     	; 0x7b0 <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     750:	8e ef       	ldi	r24, 0xFE	; 254
     752:	e8 2e       	mov	r14, r24
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	f8 2e       	mov	r15, r24
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	08 2f       	mov	r16, r24
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	18 2f       	mov	r17, r24
     760:	e2 0e       	add	r14, r18
     762:	f3 1e       	adc	r15, r19
     764:	04 1f       	adc	r16, r20
     766:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     768:	8e 81       	ldd	r24, Y+6	; 0x06
     76a:	9f 81       	ldd	r25, Y+7	; 0x07
     76c:	a8 85       	ldd	r26, Y+8	; 0x08
     76e:	b9 85       	ldd	r27, Y+9	; 0x09
     770:	02 97       	sbiw	r24, 0x02	; 2
     772:	a1 09       	sbc	r26, r1
     774:	b1 09       	sbc	r27, r1
     776:	e8 16       	cp	r14, r24
     778:	f9 06       	cpc	r15, r25
     77a:	0a 07       	cpc	r16, r26
     77c:	1b 07       	cpc	r17, r27
     77e:	28 f0       	brcs	.+10     	; 0x78a <dir_rewind+0xae>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
     78a:	2a 81       	ldd	r18, Y+2	; 0x02
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	c8 01       	movw	r24, r16
     794:	b7 01       	movw	r22, r14
     796:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsi3>
     79a:	9b 01       	movw	r18, r22
     79c:	ac 01       	movw	r20, r24
     79e:	8a 89       	ldd	r24, Y+18	; 0x12
     7a0:	9b 89       	ldd	r25, Y+19	; 0x13
     7a2:	ac 89       	ldd	r26, Y+20	; 0x14
     7a4:	bd 89       	ldd	r27, Y+21	; 0x15
     7a6:	28 0f       	add	r18, r24
     7a8:	39 1f       	adc	r19, r25
     7aa:	4a 1f       	adc	r20, r26
     7ac:	5b 1f       	adc	r21, r27
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     7b0:	2e 85       	ldd	r18, Y+14	; 0x0e
     7b2:	3f 85       	ldd	r19, Y+15	; 0x0f
     7b4:	48 89       	ldd	r20, Y+16	; 0x10
     7b6:	59 89       	ldd	r21, Y+17	; 0x11
     7b8:	f6 01       	movw	r30, r12
     7ba:	24 87       	std	Z+12, r18	; 0x0c
     7bc:	35 87       	std	Z+13, r19	; 0x0d
     7be:	46 87       	std	Z+14, r20	; 0x0e
     7c0:	57 87       	std	Z+15, r21	; 0x0f
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
     7c6:	81 e0       	ldi	r24, 0x01	; 1
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	08 95       	ret

000007da <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	df 93       	push	r29
     7e0:	cf 93       	push	r28
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <get_fat+0xa>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <get_fat+0xc>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	8b 01       	movw	r16, r22
     7ec:	9c 01       	movw	r18, r24

	BYTE buf[4];
	FATFS *fs = FatFs;
     7ee:	e0 91 80 01 	lds	r30, 0x0180
     7f2:	f0 91 81 01 	lds	r31, 0x0181


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     7f6:	62 30       	cpi	r22, 0x02	; 2
     7f8:	71 05       	cpc	r23, r1
     7fa:	81 05       	cpc	r24, r1
     7fc:	91 05       	cpc	r25, r1
     7fe:	08 f4       	brcc	.+2      	; 0x802 <get_fat+0x28>
     800:	55 c0       	rjmp	.+170    	; 0x8ac <__stack+0x4d>
     802:	86 81       	ldd	r24, Z+6	; 0x06
     804:	97 81       	ldd	r25, Z+7	; 0x07
     806:	a0 85       	ldd	r26, Z+8	; 0x08
     808:	b1 85       	ldd	r27, Z+9	; 0x09
     80a:	08 17       	cp	r16, r24
     80c:	19 07       	cpc	r17, r25
     80e:	2a 07       	cpc	r18, r26
     810:	3b 07       	cpc	r19, r27
     812:	08 f0       	brcs	.+2      	; 0x816 <get_fat+0x3c>
     814:	4b c0       	rjmp	.+150    	; 0x8ac <__stack+0x4d>
		return 1;

	switch (fs->fs_type) {
     816:	80 81       	ld	r24, Z
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	21 f0       	breq	.+8      	; 0x824 <get_fat+0x4a>
     81c:	83 30       	cpi	r24, 0x03	; 3
     81e:	09 f0       	breq	.+2      	; 0x822 <get_fat+0x48>
     820:	45 c0       	rjmp	.+138    	; 0x8ac <__stack+0x4d>
     822:	1e c0       	rjmp	.+60     	; 0x860 <__stack+0x1>
		}
		wc = LD_WORD(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     824:	77 27       	eor	r23, r23
     826:	63 2f       	mov	r22, r19
     828:	52 2f       	mov	r21, r18
     82a:	41 2f       	mov	r20, r17
     82c:	82 85       	ldd	r24, Z+10	; 0x0a
     82e:	93 85       	ldd	r25, Z+11	; 0x0b
     830:	a4 85       	ldd	r26, Z+12	; 0x0c
     832:	b5 85       	ldd	r27, Z+13	; 0x0d
     834:	48 0f       	add	r20, r24
     836:	59 1f       	adc	r21, r25
     838:	6a 1f       	adc	r22, r26
     83a:	7b 1f       	adc	r23, r27
     83c:	98 01       	movw	r18, r16
     83e:	30 70       	andi	r19, 0x00	; 0
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	ce 01       	movw	r24, r28
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	02 e0       	ldi	r16, 0x02	; 2
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
     850:	88 23       	and	r24, r24
     852:	61 f5       	brne	.+88     	; 0x8ac <__stack+0x4d>
		return LD_WORD(buf);
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	9c 01       	movw	r18, r24
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     860:	b9 01       	movw	r22, r18
     862:	a8 01       	movw	r20, r16
     864:	27 e0       	ldi	r18, 0x07	; 7
     866:	76 95       	lsr	r23
     868:	67 95       	ror	r22
     86a:	57 95       	ror	r21
     86c:	47 95       	ror	r20
     86e:	2a 95       	dec	r18
     870:	d1 f7       	brne	.-12     	; 0x866 <__stack+0x7>
     872:	82 85       	ldd	r24, Z+10	; 0x0a
     874:	93 85       	ldd	r25, Z+11	; 0x0b
     876:	a4 85       	ldd	r26, Z+12	; 0x0c
     878:	b5 85       	ldd	r27, Z+13	; 0x0d
     87a:	48 0f       	add	r20, r24
     87c:	59 1f       	adc	r21, r25
     87e:	6a 1f       	adc	r22, r26
     880:	7b 1f       	adc	r23, r27
     882:	98 01       	movw	r18, r16
     884:	2f 77       	andi	r18, 0x7F	; 127
     886:	30 70       	andi	r19, 0x00	; 0
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	22 0f       	add	r18, r18
     88e:	33 1f       	adc	r19, r19
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	04 e0       	ldi	r16, 0x04	; 4
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
     89c:	88 23       	and	r24, r24
     89e:	31 f4       	brne	.+12     	; 0x8ac <__stack+0x4d>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     8a0:	29 81       	ldd	r18, Y+1	; 0x01
     8a2:	3a 81       	ldd	r19, Y+2	; 0x02
     8a4:	4b 81       	ldd	r20, Y+3	; 0x03
     8a6:	5c 81       	ldd	r21, Y+4	; 0x04
     8a8:	5f 70       	andi	r21, 0x0F	; 15
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     8b4:	b9 01       	movw	r22, r18
     8b6:	ca 01       	movw	r24, r20
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	08 95       	ret

000008ca <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     8e0:	c0 91 80 01 	lds	r28, 0x0180
     8e4:	d0 91 81 01 	lds	r29, 0x0181


	i = dj->index + 1;
     8e8:	fc 01       	movw	r30, r24
     8ea:	c0 80       	ld	r12, Z
     8ec:	d1 80       	ldd	r13, Z+1	; 0x01
     8ee:	08 94       	sec
     8f0:	c1 1c       	adc	r12, r1
     8f2:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     8f4:	c1 14       	cp	r12, r1
     8f6:	d1 04       	cpc	r13, r1
     8f8:	09 f4       	brne	.+2      	; 0x8fc <dir_next+0x32>
     8fa:	8f c0       	rjmp	.+286    	; 0xa1a <dir_next+0x150>
     8fc:	24 85       	ldd	r18, Z+12	; 0x0c
     8fe:	35 85       	ldd	r19, Z+13	; 0x0d
     900:	46 85       	ldd	r20, Z+14	; 0x0e
     902:	57 85       	ldd	r21, Z+15	; 0x0f
     904:	21 15       	cp	r18, r1
     906:	31 05       	cpc	r19, r1
     908:	41 05       	cpc	r20, r1
     90a:	51 05       	cpc	r21, r1
     90c:	09 f4       	brne	.+2      	; 0x910 <dir_next+0x46>
     90e:	85 c0       	rjmp	.+266    	; 0xa1a <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     910:	c6 01       	movw	r24, r12
     912:	8f 70       	andi	r24, 0x0F	; 15
     914:	90 70       	andi	r25, 0x00	; 0
     916:	89 2b       	or	r24, r25
     918:	09 f0       	breq	.+2      	; 0x91c <dir_next+0x52>
     91a:	7a c0       	rjmp	.+244    	; 0xa10 <dir_next+0x146>
		dj->sect++;			/* Next sector */
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	24 87       	std	Z+12, r18	; 0x0c
     926:	35 87       	std	Z+13, r19	; 0x0d
     928:	46 87       	std	Z+14, r20	; 0x0e
     92a:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     92c:	40 85       	ldd	r20, Z+8	; 0x08
     92e:	51 85       	ldd	r21, Z+9	; 0x09
     930:	62 85       	ldd	r22, Z+10	; 0x0a
     932:	73 85       	ldd	r23, Z+11	; 0x0b
     934:	41 15       	cp	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	61 05       	cpc	r22, r1
     93a:	71 05       	cpc	r23, r1
     93c:	39 f4       	brne	.+14     	; 0x94c <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     93e:	8c 81       	ldd	r24, Y+4	; 0x04
     940:	9d 81       	ldd	r25, Y+5	; 0x05
     942:	c8 16       	cp	r12, r24
     944:	d9 06       	cpc	r13, r25
     946:	08 f4       	brcc	.+2      	; 0x94a <dir_next+0x80>
     948:	63 c0       	rjmp	.+198    	; 0xa10 <dir_next+0x146>
     94a:	67 c0       	rjmp	.+206    	; 0xa1a <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	96 01       	movw	r18, r12
     954:	14 e0       	ldi	r17, 0x04	; 4
     956:	36 95       	lsr	r19
     958:	27 95       	ror	r18
     95a:	1a 95       	dec	r17
     95c:	e1 f7       	brne	.-8      	; 0x956 <dir_next+0x8c>
     95e:	82 23       	and	r24, r18
     960:	93 23       	and	r25, r19
     962:	89 2b       	or	r24, r25
     964:	09 f0       	breq	.+2      	; 0x968 <dir_next+0x9e>
     966:	54 c0       	rjmp	.+168    	; 0xa10 <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
     968:	cb 01       	movw	r24, r22
     96a:	ba 01       	movw	r22, r20
     96c:	0e 94 ed 03 	call	0x7da	; 0x7da <get_fat>
     970:	9b 01       	movw	r18, r22
     972:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     974:	62 30       	cpi	r22, 0x02	; 2
     976:	71 05       	cpc	r23, r1
     978:	81 05       	cpc	r24, r1
     97a:	91 05       	cpc	r25, r1
     97c:	10 f4       	brcc	.+4      	; 0x982 <dir_next+0xb8>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	4d c0       	rjmp	.+154    	; 0xa1c <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     982:	8e 81       	ldd	r24, Y+6	; 0x06
     984:	9f 81       	ldd	r25, Y+7	; 0x07
     986:	a8 85       	ldd	r26, Y+8	; 0x08
     988:	b9 85       	ldd	r27, Y+9	; 0x09
     98a:	28 17       	cp	r18, r24
     98c:	39 07       	cpc	r19, r25
     98e:	4a 07       	cpc	r20, r26
     990:	5b 07       	cpc	r21, r27
     992:	08 f0       	brcs	.+2      	; 0x996 <dir_next+0xcc>
     994:	42 c0       	rjmp	.+132    	; 0xa1a <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     996:	f5 01       	movw	r30, r10
     998:	20 87       	std	Z+8, r18	; 0x08
     99a:	31 87       	std	Z+9, r19	; 0x09
     99c:	42 87       	std	Z+10, r20	; 0x0a
     99e:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     9a0:	c0 91 80 01 	lds	r28, 0x0180
     9a4:	d0 91 81 01 	lds	r29, 0x0181


	clst -= 2;
     9a8:	be ef       	ldi	r27, 0xFE	; 254
     9aa:	eb 2e       	mov	r14, r27
     9ac:	bf ef       	ldi	r27, 0xFF	; 255
     9ae:	fb 2e       	mov	r15, r27
     9b0:	bf ef       	ldi	r27, 0xFF	; 255
     9b2:	0b 2f       	mov	r16, r27
     9b4:	bf ef       	ldi	r27, 0xFF	; 255
     9b6:	1b 2f       	mov	r17, r27
     9b8:	e2 0e       	add	r14, r18
     9ba:	f3 1e       	adc	r15, r19
     9bc:	04 1f       	adc	r16, r20
     9be:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     9c0:	8e 81       	ldd	r24, Y+6	; 0x06
     9c2:	9f 81       	ldd	r25, Y+7	; 0x07
     9c4:	a8 85       	ldd	r26, Y+8	; 0x08
     9c6:	b9 85       	ldd	r27, Y+9	; 0x09
     9c8:	02 97       	sbiw	r24, 0x02	; 2
     9ca:	a1 09       	sbc	r26, r1
     9cc:	b1 09       	sbc	r27, r1
     9ce:	e8 16       	cp	r14, r24
     9d0:	f9 06       	cpc	r15, r25
     9d2:	0a 07       	cpc	r16, r26
     9d4:	1b 07       	cpc	r17, r27
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <dir_next+0x118>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	12 c0       	rjmp	.+36     	; 0xa06 <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
     9e2:	2a 81       	ldd	r18, Y+2	; 0x02
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	c8 01       	movw	r24, r16
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsi3>
     9f2:	9b 01       	movw	r18, r22
     9f4:	ac 01       	movw	r20, r24
     9f6:	8a 89       	ldd	r24, Y+18	; 0x12
     9f8:	9b 89       	ldd	r25, Y+19	; 0x13
     9fa:	ac 89       	ldd	r26, Y+20	; 0x14
     9fc:	bd 89       	ldd	r27, Y+21	; 0x15
     9fe:	28 0f       	add	r18, r24
     a00:	39 1f       	adc	r19, r25
     a02:	4a 1f       	adc	r20, r26
     a04:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     a06:	f5 01       	movw	r30, r10
     a08:	24 87       	std	Z+12, r18	; 0x0c
     a0a:	35 87       	std	Z+13, r19	; 0x0d
     a0c:	46 87       	std	Z+14, r20	; 0x0e
     a0e:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     a10:	f5 01       	movw	r30, r10
     a12:	d1 82       	std	Z+1, r13	; 0x01
     a14:	c0 82       	st	Z, r12
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <dir_next+0x152>

	return FR_OK;
     a1a:	83 e0       	ldi	r24, 0x03	; 3
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	08 95       	ret

00000a32 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     a32:	2f 92       	push	r2
     a34:	3f 92       	push	r3
     a36:	4f 92       	push	r4
     a38:	5f 92       	push	r5
     a3a:	6f 92       	push	r6
     a3c:	7f 92       	push	r7
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     a58:	c0 91 80 01 	lds	r28, 0x0180
     a5c:	d0 91 81 01 	lds	r29, 0x0181


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     a60:	20 97       	sbiw	r28, 0x00	; 0
     a62:	11 f4       	brne	.+4      	; 0xa68 <pf_lseek+0x36>
     a64:	86 e0       	ldi	r24, 0x06	; 6
     a66:	02 c1       	rjmp	.+516    	; 0xc6c <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	80 fd       	sbrc	r24, 0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <pf_lseek+0x40>
     a6e:	85 e0       	ldi	r24, 0x05	; 5
     a70:	fd c0       	rjmp	.+506    	; 0xc6c <pf_lseek+0x23a>
     a72:	ea 8c       	ldd	r14, Y+26	; 0x1a
     a74:	fb 8c       	ldd	r15, Y+27	; 0x1b
     a76:	0c 8d       	ldd	r16, Y+28	; 0x1c
     a78:	1d 8d       	ldd	r17, Y+29	; 0x1d
     a7a:	4e 2f       	mov	r20, r30
     a7c:	59 2f       	mov	r21, r25
     a7e:	cb 01       	movw	r24, r22
     a80:	da 01       	movw	r26, r20
     a82:	3c 01       	movw	r6, r24
     a84:	4d 01       	movw	r8, r26
     a86:	e6 14       	cp	r14, r6
     a88:	f7 04       	cpc	r15, r7
     a8a:	08 05       	cpc	r16, r8
     a8c:	19 05       	cpc	r17, r9
     a8e:	10 f4       	brcc	.+4      	; 0xa94 <pf_lseek+0x62>
     a90:	37 01       	movw	r6, r14
     a92:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     a94:	ee 88       	ldd	r14, Y+22	; 0x16
     a96:	ff 88       	ldd	r15, Y+23	; 0x17
     a98:	08 8d       	ldd	r16, Y+24	; 0x18
     a9a:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
     a9c:	1e 8a       	std	Y+22, r1	; 0x16
     a9e:	1f 8a       	std	Y+23, r1	; 0x17
     aa0:	18 8e       	std	Y+24, r1	; 0x18
     aa2:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
     aa4:	61 14       	cp	r6, r1
     aa6:	71 04       	cpc	r7, r1
     aa8:	81 04       	cpc	r8, r1
     aaa:	91 04       	cpc	r9, r1
     aac:	09 f4       	brne	.+2      	; 0xab0 <pf_lseek+0x7e>
     aae:	da c0       	rjmp	.+436    	; 0xc64 <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	a8 2e       	mov	r10, r24
     ab4:	bb 24       	eor	r11, r11
     ab6:	cc 24       	eor	r12, r12
     ab8:	dd 24       	eor	r13, r13
     aba:	29 e0       	ldi	r18, 0x09	; 9
     abc:	aa 0c       	add	r10, r10
     abe:	bb 1c       	adc	r11, r11
     ac0:	cc 1c       	adc	r12, r12
     ac2:	dd 1c       	adc	r13, r13
     ac4:	2a 95       	dec	r18
     ac6:	d1 f7       	brne	.-12     	; 0xabc <pf_lseek+0x8a>
		if (ifptr > 0 &&
     ac8:	e1 14       	cp	r14, r1
     aca:	f1 04       	cpc	r15, r1
     acc:	01 05       	cpc	r16, r1
     ace:	11 05       	cpc	r17, r1
     ad0:	b1 f1       	breq	.+108    	; 0xb3e <pf_lseek+0x10c>
     ad2:	17 01       	movw	r2, r14
     ad4:	28 01       	movw	r4, r16
     ad6:	08 94       	sec
     ad8:	21 08       	sbc	r2, r1
     ada:	31 08       	sbc	r3, r1
     adc:	41 08       	sbc	r4, r1
     ade:	51 08       	sbc	r5, r1
     ae0:	c4 01       	movw	r24, r8
     ae2:	b3 01       	movw	r22, r6
     ae4:	61 50       	subi	r22, 0x01	; 1
     ae6:	70 40       	sbci	r23, 0x00	; 0
     ae8:	80 40       	sbci	r24, 0x00	; 0
     aea:	90 40       	sbci	r25, 0x00	; 0
     aec:	a6 01       	movw	r20, r12
     aee:	95 01       	movw	r18, r10
     af0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__udivmodsi4>
     af4:	79 01       	movw	r14, r18
     af6:	8a 01       	movw	r16, r20
     af8:	c2 01       	movw	r24, r4
     afa:	b1 01       	movw	r22, r2
     afc:	a6 01       	movw	r20, r12
     afe:	95 01       	movw	r18, r10
     b00:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__udivmodsi4>
     b04:	e2 16       	cp	r14, r18
     b06:	f3 06       	cpc	r15, r19
     b08:	04 07       	cpc	r16, r20
     b0a:	15 07       	cpc	r17, r21
     b0c:	c0 f0       	brcs	.+48     	; 0xb3e <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     b0e:	88 27       	eor	r24, r24
     b10:	99 27       	eor	r25, r25
     b12:	dc 01       	movw	r26, r24
     b14:	8a 19       	sub	r24, r10
     b16:	9b 09       	sbc	r25, r11
     b18:	ac 09       	sbc	r26, r12
     b1a:	bd 09       	sbc	r27, r13
     b1c:	82 21       	and	r24, r2
     b1e:	93 21       	and	r25, r3
     b20:	a4 21       	and	r26, r4
     b22:	b5 21       	and	r27, r5
     b24:	8e 8b       	std	Y+22, r24	; 0x16
     b26:	9f 8b       	std	Y+23, r25	; 0x17
     b28:	a8 8f       	std	Y+24, r26	; 0x18
     b2a:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
     b2c:	68 1a       	sub	r6, r24
     b2e:	79 0a       	sbc	r7, r25
     b30:	8a 0a       	sbc	r8, r26
     b32:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     b34:	2a a1       	ldd	r18, Y+34	; 0x22
     b36:	3b a1       	ldd	r19, Y+35	; 0x23
     b38:	4c a1       	ldd	r20, Y+36	; 0x24
     b3a:	5d a1       	ldd	r21, Y+37	; 0x25
     b3c:	33 c0       	rjmp	.+102    	; 0xba4 <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     b3e:	2e 8d       	ldd	r18, Y+30	; 0x1e
     b40:	3f 8d       	ldd	r19, Y+31	; 0x1f
     b42:	48 a1       	ldd	r20, Y+32	; 0x20
     b44:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
     b46:	2a a3       	std	Y+34, r18	; 0x22
     b48:	3b a3       	std	Y+35, r19	; 0x23
     b4a:	4c a3       	std	Y+36, r20	; 0x24
     b4c:	5d a3       	std	Y+37, r21	; 0x25
     b4e:	2a c0       	rjmp	.+84     	; 0xba4 <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     b50:	ca 01       	movw	r24, r20
     b52:	b9 01       	movw	r22, r18
     b54:	0e 94 ed 03 	call	0x7da	; 0x7da <get_fat>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
     b5c:	62 30       	cpi	r22, 0x02	; 2
     b5e:	71 05       	cpc	r23, r1
     b60:	81 05       	cpc	r24, r1
     b62:	91 05       	cpc	r25, r1
     b64:	08 f4       	brcc	.+2      	; 0xb68 <pf_lseek+0x136>
     b66:	80 c0       	rjmp	.+256    	; 0xc68 <pf_lseek+0x236>
     b68:	8e 81       	ldd	r24, Y+6	; 0x06
     b6a:	9f 81       	ldd	r25, Y+7	; 0x07
     b6c:	a8 85       	ldd	r26, Y+8	; 0x08
     b6e:	b9 85       	ldd	r27, Y+9	; 0x09
     b70:	28 17       	cp	r18, r24
     b72:	39 07       	cpc	r19, r25
     b74:	4a 07       	cpc	r20, r26
     b76:	5b 07       	cpc	r21, r27
     b78:	08 f0       	brcs	.+2      	; 0xb7c <pf_lseek+0x14a>
     b7a:	76 c0       	rjmp	.+236    	; 0xc68 <pf_lseek+0x236>
			fs->curr_clust = clst;
     b7c:	2a a3       	std	Y+34, r18	; 0x22
     b7e:	3b a3       	std	Y+35, r19	; 0x23
     b80:	4c a3       	std	Y+36, r20	; 0x24
     b82:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
     b84:	8e 89       	ldd	r24, Y+22	; 0x16
     b86:	9f 89       	ldd	r25, Y+23	; 0x17
     b88:	a8 8d       	ldd	r26, Y+24	; 0x18
     b8a:	b9 8d       	ldd	r27, Y+25	; 0x19
     b8c:	8a 0d       	add	r24, r10
     b8e:	9b 1d       	adc	r25, r11
     b90:	ac 1d       	adc	r26, r12
     b92:	bd 1d       	adc	r27, r13
     b94:	8e 8b       	std	Y+22, r24	; 0x16
     b96:	9f 8b       	std	Y+23, r25	; 0x17
     b98:	a8 8f       	std	Y+24, r26	; 0x18
     b9a:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
     b9c:	6a 18       	sub	r6, r10
     b9e:	7b 08       	sbc	r7, r11
     ba0:	8c 08       	sbc	r8, r12
     ba2:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     ba4:	a6 14       	cp	r10, r6
     ba6:	b7 04       	cpc	r11, r7
     ba8:	c8 04       	cpc	r12, r8
     baa:	d9 04       	cpc	r13, r9
     bac:	88 f2       	brcs	.-94     	; 0xb50 <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     bae:	ee 88       	ldd	r14, Y+22	; 0x16
     bb0:	ff 88       	ldd	r15, Y+23	; 0x17
     bb2:	08 8d       	ldd	r16, Y+24	; 0x18
     bb4:	19 8d       	ldd	r17, Y+25	; 0x19
     bb6:	e6 0c       	add	r14, r6
     bb8:	f7 1c       	adc	r15, r7
     bba:	08 1d       	adc	r16, r8
     bbc:	19 1d       	adc	r17, r9
     bbe:	ee 8a       	std	Y+22, r14	; 0x16
     bc0:	ff 8a       	std	Y+23, r15	; 0x17
     bc2:	08 8f       	std	Y+24, r16	; 0x18
     bc4:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     bc6:	80 90 80 01 	lds	r8, 0x0180
     bca:	90 90 81 01 	lds	r9, 0x0181


	clst -= 2;
     bce:	9e ef       	ldi	r25, 0xFE	; 254
     bd0:	a9 2e       	mov	r10, r25
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	b9 2e       	mov	r11, r25
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	c9 2e       	mov	r12, r25
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	d9 2e       	mov	r13, r25
     bde:	a2 0e       	add	r10, r18
     be0:	b3 1e       	adc	r11, r19
     be2:	c4 1e       	adc	r12, r20
     be4:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     be6:	f4 01       	movw	r30, r8
     be8:	86 81       	ldd	r24, Z+6	; 0x06
     bea:	97 81       	ldd	r25, Z+7	; 0x07
     bec:	a0 85       	ldd	r26, Z+8	; 0x08
     bee:	b1 85       	ldd	r27, Z+9	; 0x09
     bf0:	02 97       	sbiw	r24, 0x02	; 2
     bf2:	a1 09       	sbc	r26, r1
     bf4:	b1 09       	sbc	r27, r1
     bf6:	a8 16       	cp	r10, r24
     bf8:	b9 06       	cpc	r11, r25
     bfa:	ca 06       	cpc	r12, r26
     bfc:	db 06       	cpc	r13, r27
     bfe:	a0 f5       	brcc	.+104    	; 0xc68 <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
     c00:	22 81       	ldd	r18, Z+2	; 0x02
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	c6 01       	movw	r24, r12
     c0a:	b5 01       	movw	r22, r10
     c0c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsi3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	f4 01       	movw	r30, r8
     c16:	82 89       	ldd	r24, Z+18	; 0x12
     c18:	93 89       	ldd	r25, Z+19	; 0x13
     c1a:	a4 89       	ldd	r26, Z+20	; 0x14
     c1c:	b5 89       	ldd	r27, Z+21	; 0x15
     c1e:	28 0f       	add	r18, r24
     c20:	39 1f       	adc	r19, r25
     c22:	4a 1f       	adc	r20, r26
     c24:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     c26:	21 15       	cp	r18, r1
     c28:	31 05       	cpc	r19, r1
     c2a:	41 05       	cpc	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	e1 f0       	breq	.+56     	; 0xc68 <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
     c30:	89 e0       	ldi	r24, 0x09	; 9
     c32:	16 95       	lsr	r17
     c34:	07 95       	ror	r16
     c36:	f7 94       	ror	r15
     c38:	e7 94       	ror	r14
     c3a:	8a 95       	dec	r24
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <pf_lseek+0x200>
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	aa 27       	eor	r26, r26
     c46:	97 fd       	sbrc	r25, 7
     c48:	a0 95       	com	r26
     c4a:	ba 2f       	mov	r27, r26
     c4c:	e8 22       	and	r14, r24
     c4e:	f9 22       	and	r15, r25
     c50:	0a 23       	and	r16, r26
     c52:	1b 23       	and	r17, r27
     c54:	2e 0d       	add	r18, r14
     c56:	3f 1d       	adc	r19, r15
     c58:	40 1f       	adc	r20, r16
     c5a:	51 1f       	adc	r21, r17
     c5c:	2e a3       	std	Y+38, r18	; 0x26
     c5e:	3f a3       	std	Y+39, r19	; 0x27
     c60:	48 a7       	std	Y+40, r20	; 0x28
     c62:	59 a7       	std	Y+41, r21	; 0x29
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     c68:	19 82       	std	Y+1, r1	; 0x01
     c6a:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	7f 90       	pop	r7
     c86:	6f 90       	pop	r6
     c88:	5f 90       	pop	r5
     c8a:	4f 90       	pop	r4
     c8c:	3f 90       	pop	r3
     c8e:	2f 90       	pop	r2
     c90:	08 95       	ret

00000c92 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     c92:	af 92       	push	r10
     c94:	bf 92       	push	r11
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	ac 97       	sbiw	r28, 0x2c	; 44
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	7c 01       	movw	r14, r24
     cb8:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
     cba:	80 91 80 01 	lds	r24, 0x0180
     cbe:	90 91 81 01 	lds	r25, 0x0181
     cc2:	89 2b       	or	r24, r25
     cc4:	11 f4       	brne	.+4      	; 0xcca <pf_readdir+0x38>
     cc6:	86 e0       	ldi	r24, 0x06	; 6
     cc8:	b0 c0       	rjmp	.+352    	; 0xe2a <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	d7 01       	movw	r26, r14
     cd0:	13 96       	adiw	r26, 0x03	; 3
     cd2:	9c 93       	st	X, r25
     cd4:	8e 93       	st	-X, r24
     cd6:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     cd8:	61 15       	cp	r22, r1
     cda:	71 05       	cpc	r23, r1
     cdc:	39 f0       	breq	.+14     	; 0xcec <pf_readdir+0x5a>
     cde:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     ce0:	fd e0       	ldi	r31, 0x0D	; 13
     ce2:	af 2e       	mov	r10, r31
     ce4:	b1 2c       	mov	r11, r1
     ce6:	ac 0e       	add	r10, r28
     ce8:	bd 1e       	adc	r11, r29
     cea:	28 c0       	rjmp	.+80     	; 0xd3c <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
     cec:	c7 01       	movw	r24, r14
     cee:	0e 94 6e 03 	call	0x6dc	; 0x6dc <dir_rewind>
     cf2:	9b c0       	rjmp	.+310    	; 0xe2a <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     cf4:	f7 01       	movw	r30, r14
     cf6:	20 81       	ld	r18, Z
     cf8:	31 81       	ldd	r19, Z+1	; 0x01
     cfa:	2f 70       	andi	r18, 0x0F	; 15
     cfc:	30 70       	andi	r19, 0x00	; 0
     cfe:	e5 e0       	ldi	r30, 0x05	; 5
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	ea 95       	dec	r30
     d06:	e1 f7       	brne	.-8      	; 0xd00 <pf_readdir+0x6e>
     d08:	c5 01       	movw	r24, r10
     d0a:	00 e2       	ldi	r16, 0x20	; 32
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     d12:	88 23       	and	r24, r24
     d14:	11 f0       	breq	.+4      	; 0xd1a <pf_readdir+0x88>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	1f c0       	rjmp	.+62     	; 0xd58 <pf_readdir+0xc6>
		c = dir[DIR_Name];
     d1a:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     d1c:	99 23       	and	r25, r25
     d1e:	09 f4       	brne	.+2      	; 0xd22 <pf_readdir+0x90>
     d20:	95 c0       	rjmp	.+298    	; 0xe4c <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
     d22:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     d24:	95 3e       	cpi	r25, 0xE5	; 229
     d26:	29 f0       	breq	.+10     	; 0xd32 <pf_readdir+0xa0>
     d28:	9e 32       	cpi	r25, 0x2E	; 46
     d2a:	19 f0       	breq	.+6      	; 0xd32 <pf_readdir+0xa0>
     d2c:	8f 73       	andi	r24, 0x3F	; 63
     d2e:	83 ff       	sbrs	r24, 3
     d30:	1d c0       	rjmp	.+58     	; 0xd6c <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
     d32:	c7 01       	movw	r24, r14
     d34:	0e 94 65 04 	call	0x8ca	; 0x8ca <dir_next>
		if (res != FR_OK) break;
     d38:	88 23       	and	r24, r24
     d3a:	71 f4       	brne	.+28     	; 0xd58 <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
     d3c:	d7 01       	movw	r26, r14
     d3e:	1c 96       	adiw	r26, 0x0c	; 12
     d40:	4d 91       	ld	r20, X+
     d42:	5d 91       	ld	r21, X+
     d44:	6d 91       	ld	r22, X+
     d46:	7c 91       	ld	r23, X
     d48:	1f 97       	sbiw	r26, 0x0f	; 15
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	81 f6       	brne	.-96     	; 0xcf4 <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     d54:	88 23       	and	r24, r24
     d56:	51 f0       	breq	.+20     	; 0xd6c <pf_readdir+0xda>
     d58:	f7 01       	movw	r30, r14
     d5a:	14 86       	std	Z+12, r1	; 0x0c
     d5c:	15 86       	std	Z+13, r1	; 0x0d
     d5e:	16 86       	std	Z+14, r1	; 0x0e
     d60:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	19 f0       	breq	.+6      	; 0xd6c <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     d66:	88 23       	and	r24, r24
     d68:	09 f0       	breq	.+2      	; 0xd6c <pf_readdir+0xda>
     d6a:	5f c0       	rjmp	.+190    	; 0xe2a <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
     d6c:	96 01       	movw	r18, r12
     d6e:	27 5f       	subi	r18, 0xF7	; 247
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     d72:	f7 01       	movw	r30, r14
     d74:	84 85       	ldd	r24, Z+12	; 0x0c
     d76:	95 85       	ldd	r25, Z+13	; 0x0d
     d78:	a6 85       	ldd	r26, Z+14	; 0x0e
     d7a:	b7 85       	ldd	r27, Z+15	; 0x0f
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <pf_readdir+0xf4>
     d84:	43 c0       	rjmp	.+134    	; 0xe0c <pf_readdir+0x17a>
     d86:	fe 01       	movw	r30, r28
     d88:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     d8a:	ae 01       	movw	r20, r28
     d8c:	4b 5e       	subi	r20, 0xEB	; 235
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
     d90:	80 81       	ld	r24, Z
			if (c == ' ') break;
     d92:	80 32       	cpi	r24, 0x20	; 32
     d94:	51 f0       	breq	.+20     	; 0xdaa <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	09 f4       	brne	.+2      	; 0xd9c <pf_readdir+0x10a>
     d9a:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
     d9c:	d9 01       	movw	r26, r18
     d9e:	8d 93       	st	X+, r24
     da0:	9d 01       	movw	r18, r26
     da2:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     da4:	e4 17       	cp	r30, r20
     da6:	f5 07       	cpc	r31, r21
     da8:	99 f7       	brne	.-26     	; 0xd90 <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     daa:	8d 89       	ldd	r24, Y+21	; 0x15
     dac:	80 32       	cpi	r24, 0x20	; 32
     dae:	99 f0       	breq	.+38     	; 0xdd6 <pf_readdir+0x144>
			*p++ = '.';
     db0:	8e e2       	ldi	r24, 0x2E	; 46
     db2:	f9 01       	movw	r30, r18
     db4:	81 93       	st	Z+, r24
     db6:	9f 01       	movw	r18, r30
     db8:	fe 01       	movw	r30, r28
     dba:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
     dbc:	ae 01       	movw	r20, r28
     dbe:	48 5e       	subi	r20, 0xE8	; 232
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
     dc2:	80 81       	ld	r24, Z
				if (c == ' ') break;
     dc4:	80 32       	cpi	r24, 0x20	; 32
     dc6:	39 f0       	breq	.+14     	; 0xdd6 <pf_readdir+0x144>
				*p++ = c;
     dc8:	d9 01       	movw	r26, r18
     dca:	8d 93       	st	X+, r24
     dcc:	9d 01       	movw	r18, r26
     dce:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     dd0:	e4 17       	cp	r30, r20
     dd2:	f5 07       	cpc	r31, r21
     dd4:	b1 f7       	brne	.-20     	; 0xdc2 <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     dd6:	88 8d       	ldd	r24, Y+24	; 0x18
     dd8:	f6 01       	movw	r30, r12
     dda:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     ddc:	fe 01       	movw	r30, r28
     dde:	3d 96       	adiw	r30, 0x0d	; 13
     de0:	44 8d       	ldd	r20, Z+28	; 0x1c
     de2:	55 8d       	ldd	r21, Z+29	; 0x1d
     de4:	66 8d       	ldd	r22, Z+30	; 0x1e
     de6:	77 8d       	ldd	r23, Z+31	; 0x1f
     de8:	d6 01       	movw	r26, r12
     dea:	4d 93       	st	X+, r20
     dec:	5d 93       	st	X+, r21
     dee:	6d 93       	st	X+, r22
     df0:	7c 93       	st	X, r23
     df2:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     df4:	80 8d       	ldd	r24, Z+24	; 0x18
     df6:	91 8d       	ldd	r25, Z+25	; 0x19
     df8:	15 96       	adiw	r26, 0x05	; 5
     dfa:	9c 93       	st	X, r25
     dfc:	8e 93       	st	-X, r24
     dfe:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     e00:	86 89       	ldd	r24, Z+22	; 0x16
     e02:	97 89       	ldd	r25, Z+23	; 0x17
     e04:	17 96       	adiw	r26, 0x07	; 7
     e06:	9c 93       	st	X, r25
     e08:	8e 93       	st	-X, r24
     e0a:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
     e0c:	f9 01       	movw	r30, r18
     e0e:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     e10:	c7 01       	movw	r24, r14
     e12:	0e 94 65 04 	call	0x8ca	; 0x8ca <dir_next>
				if (res == FR_NO_FILE) {
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	41 f4       	brne	.+16     	; 0xe2a <pf_readdir+0x198>
					dj->sect = 0;
     e1a:	d7 01       	movw	r26, r14
     e1c:	1c 96       	adiw	r26, 0x0c	; 12
     e1e:	1d 92       	st	X+, r1
     e20:	1d 92       	st	X+, r1
     e22:	1d 92       	st	X+, r1
     e24:	1c 92       	st	X, r1
     e26:	1f 97       	sbiw	r26, 0x0f	; 15
     e28:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
     e2a:	ac 96       	adiw	r28, 0x2c	; 44
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	84 cf       	rjmp	.-248    	; 0xd58 <pf_readdir+0xc6>

00000e50 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
     e50:	6f 92       	push	r6
     e52:	7f 92       	push	r7
     e54:	8f 92       	push	r8
     e56:	9f 92       	push	r9
     e58:	af 92       	push	r10
     e5a:	bf 92       	push	r11
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
     e6e:	6b 01       	movw	r12, r22
     e70:	7a 01       	movw	r14, r20
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
     e74:	08 94       	sec
     e76:	e1 1c       	adc	r14, r1
     e78:	f1 1c       	adc	r15, r1
     e7a:	f7 01       	movw	r30, r14
     e7c:	80 81       	ld	r24, Z
     e7e:	80 32       	cpi	r24, 0x20	; 32
     e80:	c9 f3       	breq	.-14     	; 0xe74 <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
     e82:	8f 32       	cpi	r24, 0x2F	; 47
     e84:	19 f4       	brne	.+6      	; 0xe8c <follow_path+0x3c>
     e86:	08 94       	sec
     e88:	e1 1c       	adc	r14, r1
     e8a:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     e8c:	1c 82       	std	Y+4, r1	; 0x04
     e8e:	1d 82       	std	Y+5, r1	; 0x05
     e90:	1e 82       	std	Y+6, r1	; 0x06
     e92:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     e94:	f7 01       	movw	r30, r14
     e96:	80 81       	ld	r24, Z
     e98:	81 32       	cpi	r24, 0x21	; 33
     e9a:	38 f4       	brcc	.+14     	; 0xeaa <follow_path+0x5a>
		res = dir_rewind(dj);
     e9c:	ce 01       	movw	r24, r28
     e9e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <dir_rewind>
     ea2:	b8 2e       	mov	r11, r24
		dir[0] = 0;
     ea4:	f6 01       	movw	r30, r12
     ea6:	10 82       	st	Z, r1
     ea8:	a5 c0       	rjmp	.+330    	; 0xff4 <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     eaa:	90 e2       	ldi	r25, 0x20	; 32
     eac:	69 2e       	mov	r6, r25
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     eae:	77 24       	eor	r7, r7
     eb0:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     eb2:	8b e0       	ldi	r24, 0x0B	; 11
     eb4:	88 2e       	mov	r8, r24
     eb6:	91 2c       	mov	r9, r1
     eb8:	8c 0c       	add	r8, r12
     eba:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     ebc:	aa 81       	ldd	r26, Y+2	; 0x02
     ebe:	bb 81       	ldd	r27, Y+3	; 0x03
     ec0:	fd 01       	movw	r30, r26
     ec2:	8b e0       	ldi	r24, 0x0B	; 11
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     ec8:	61 92       	st	Z+, r6
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	2f ef       	ldi	r18, 0xFF	; 255
     ece:	8f 3f       	cpi	r24, 0xFF	; 255
     ed0:	92 07       	cpc	r25, r18
     ed2:	d1 f7       	brne	.-12     	; 0xec8 <follow_path+0x78>
     ed4:	38 e0       	ldi	r19, 0x08	; 8
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	aa 24       	eor	r10, r10
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <follow_path+0x90>
     edc:	3b e0       	ldi	r19, 0x0B	; 11
     ede:	28 e0       	ldi	r18, 0x08	; 8
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     ee0:	f7 01       	movw	r30, r14
     ee2:	ea 0d       	add	r30, r10
     ee4:	f1 1d       	adc	r31, r1
     ee6:	90 81       	ld	r25, Z
     ee8:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     eea:	91 32       	cpi	r25, 0x21	; 33
     eec:	b0 f0       	brcs	.+44     	; 0xf1a <follow_path+0xca>
     eee:	9f 32       	cpi	r25, 0x2F	; 47
     ef0:	a1 f0       	breq	.+40     	; 0xf1a <follow_path+0xca>
		if (c == '.' || i >= ni) {
     ef2:	9e 32       	cpi	r25, 0x2E	; 46
     ef4:	11 f0       	breq	.+4      	; 0xefa <follow_path+0xaa>
     ef6:	23 17       	cp	r18, r19
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
     efa:	38 30       	cpi	r19, 0x08	; 8
     efc:	71 f4       	brne	.+28     	; 0xf1a <follow_path+0xca>
     efe:	9e 32       	cpi	r25, 0x2E	; 46
     f00:	69 f3       	breq	.-38     	; 0xedc <follow_path+0x8c>
     f02:	0b c0       	rjmp	.+22     	; 0xf1a <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     f04:	89 2f       	mov	r24, r25
     f06:	81 56       	subi	r24, 0x61	; 97
     f08:	8a 31       	cpi	r24, 0x1A	; 26
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <follow_path+0xbe>
     f0c:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
     f0e:	fd 01       	movw	r30, r26
     f10:	e2 0f       	add	r30, r18
     f12:	f1 1d       	adc	r31, r1
     f14:	90 83       	st	Z, r25
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	e3 cf       	rjmp	.-58     	; 0xee0 <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     f1a:	1b 96       	adiw	r26, 0x0b	; 11
     f1c:	1c 92       	st	X, r1
     f1e:	1b 97       	sbiw	r26, 0x0b	; 11
     f20:	91 32       	cpi	r25, 0x21	; 33
     f22:	10 f4       	brcc	.+4      	; 0xf28 <follow_path+0xd8>
     f24:	1b 96       	adiw	r26, 0x0b	; 11
     f26:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     f28:	ce 01       	movw	r24, r28
     f2a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <dir_rewind>
     f2e:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
     f30:	88 23       	and	r24, r24
     f32:	d1 f5       	brne	.+116    	; 0xfa8 <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     f34:	4c 85       	ldd	r20, Y+12	; 0x0c
     f36:	5d 85       	ldd	r21, Y+13	; 0x0d
     f38:	6e 85       	ldd	r22, Y+14	; 0x0e
     f3a:	7f 85       	ldd	r23, Y+15	; 0x0f
     f3c:	28 81       	ld	r18, Y
     f3e:	39 81       	ldd	r19, Y+1	; 0x01
     f40:	2f 70       	andi	r18, 0x0F	; 15
     f42:	30 70       	andi	r19, 0x00	; 0
     f44:	05 e0       	ldi	r16, 0x05	; 5
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	0a 95       	dec	r16
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <follow_path+0xf6>
     f4e:	c6 01       	movw	r24, r12
     f50:	00 e2       	ldi	r16, 0x20	; 32
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     f58:	88 23       	and	r24, r24
     f5a:	11 f0       	breq	.+4      	; 0xf60 <follow_path+0x110>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	23 c0       	rjmp	.+70     	; 0xfa6 <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     f60:	f6 01       	movw	r30, r12
     f62:	80 81       	ld	r24, Z
     f64:	88 23       	and	r24, r24
     f66:	09 f4       	brne	.+2      	; 0xf6a <follow_path+0x11a>
     f68:	55 c0       	rjmp	.+170    	; 0x1014 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     f6a:	f4 01       	movw	r30, r8
     f6c:	80 81       	ld	r24, Z
     f6e:	83 fd       	sbrc	r24, 3
     f70:	15 c0       	rjmp	.+42     	; 0xf9c <follow_path+0x14c>
     f72:	d6 01       	movw	r26, r12
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	9c 01       	movw	r18, r24
     f7a:	f9 01       	movw	r30, r18
     f7c:	2b e0       	ldi	r18, 0x0B	; 11
     f7e:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	30 40       	sbci	r19, 0x00	; 0
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	2f 3f       	cpi	r18, 0xFF	; 255
     f88:	38 07       	cpc	r19, r24
     f8a:	09 f4       	brne	.+2      	; 0xf8e <follow_path+0x13e>
     f8c:	46 c0       	rjmp	.+140    	; 0x101a <follow_path+0x1ca>
     f8e:	9c 91       	ld	r25, X
     f90:	80 81       	ld	r24, Z
     f92:	98 17       	cp	r25, r24
     f94:	19 f4       	brne	.+6      	; 0xf9c <follow_path+0x14c>
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	31 96       	adiw	r30, 0x01	; 1
     f9a:	f2 cf       	rjmp	.-28     	; 0xf80 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 65 04 	call	0x8ca	; 0x8ca <dir_next>
	} while (res == FR_OK);
     fa2:	88 23       	and	r24, r24
     fa4:	39 f2       	breq	.-114    	; 0xf34 <follow_path+0xe4>
     fa6:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     fa8:	e3 e0       	ldi	r30, 0x03	; 3
     faa:	be 16       	cp	r11, r30
     fac:	19 f5       	brne	.+70     	; 0xff4 <follow_path+0x1a4>
     fae:	ea 81       	ldd	r30, Y+2	; 0x02
     fb0:	fb 81       	ldd	r31, Y+3	; 0x03
     fb2:	83 85       	ldd	r24, Z+11	; 0x0b
     fb4:	88 23       	and	r24, r24
     fb6:	e1 f0       	breq	.+56     	; 0xff0 <follow_path+0x1a0>
     fb8:	1d c0       	rjmp	.+58     	; 0xff4 <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     fba:	f4 01       	movw	r30, r8
     fbc:	80 81       	ld	r24, Z
     fbe:	84 ff       	sbrs	r24, 4
     fc0:	17 c0       	rjmp	.+46     	; 0xff0 <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     fc2:	ea 0c       	add	r14, r10
     fc4:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
     fc6:	f6 01       	movw	r30, r12
     fc8:	84 89       	ldd	r24, Z+20	; 0x14
     fca:	95 89       	ldd	r25, Z+21	; 0x15
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	dc 01       	movw	r26, r24
     fd2:	99 27       	eor	r25, r25
     fd4:	88 27       	eor	r24, r24
     fd6:	22 8d       	ldd	r18, Z+26	; 0x1a
     fd8:	33 8d       	ldd	r19, Z+27	; 0x1b
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	82 2b       	or	r24, r18
     fe0:	93 2b       	or	r25, r19
     fe2:	a4 2b       	or	r26, r20
     fe4:	b5 2b       	or	r27, r21
     fe6:	8c 83       	std	Y+4, r24	; 0x04
     fe8:	9d 83       	std	Y+5, r25	; 0x05
     fea:	ae 83       	std	Y+6, r26	; 0x06
     fec:	bf 83       	std	Y+7, r27	; 0x07
     fee:	66 cf       	rjmp	.-308    	; 0xebc <follow_path+0x6c>
		}
     ff0:	b4 e0       	ldi	r27, 0x04	; 4
     ff2:	bb 2e       	mov	r11, r27
	}

	return res;
}
     ff4:	8b 2d       	mov	r24, r11
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	8f 90       	pop	r8
    100e:	7f 90       	pop	r7
    1010:	6f 90       	pop	r6
    1012:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    1014:	a3 e0       	ldi	r26, 0x03	; 3
    1016:	ba 2e       	mov	r11, r26
    1018:	ca cf       	rjmp	.-108    	; 0xfae <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	83 85       	ldd	r24, Z+11	; 0x0b
    1020:	88 23       	and	r24, r24
    1022:	59 f2       	breq	.-106    	; 0xfba <follow_path+0x16a>
    1024:	e7 cf       	rjmp	.-50     	; 0xff4 <follow_path+0x1a4>

00001026 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	ac 97       	sbiw	r28, 0x2c	; 44
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	8c 01       	movw	r16, r24
    1044:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1046:	80 91 80 01 	lds	r24, 0x0180
    104a:	90 91 81 01 	lds	r25, 0x0181
    104e:	89 2b       	or	r24, r25
    1050:	11 f4       	brne	.+4      	; 0x1056 <pf_opendir+0x30>
    1052:	86 e0       	ldi	r24, 0x06	; 6
    1054:	31 c0       	rjmp	.+98     	; 0x10b8 <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	f8 01       	movw	r30, r16
    105c:	93 83       	std	Z+3, r25	; 0x03
    105e:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    1060:	3d e0       	ldi	r19, 0x0D	; 13
    1062:	e3 2e       	mov	r14, r19
    1064:	f1 2c       	mov	r15, r1
    1066:	ec 0e       	add	r14, r28
    1068:	fd 1e       	adc	r15, r29
    106a:	c8 01       	movw	r24, r16
    106c:	b7 01       	movw	r22, r14
    106e:	0e 94 28 07 	call	0xe50	; 0xe50 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    1072:	88 23       	and	r24, r24
    1074:	f1 f4       	brne	.+60     	; 0x10b2 <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	88 23       	and	r24, r24
    107a:	c1 f0       	breq	.+48     	; 0x10ac <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    107c:	88 8d       	ldd	r24, Y+24	; 0x18
    107e:	84 ff       	sbrs	r24, 4
    1080:	1a c0       	rjmp	.+52     	; 0x10b6 <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    1082:	f7 01       	movw	r30, r14
    1084:	84 89       	ldd	r24, Z+20	; 0x14
    1086:	95 89       	ldd	r25, Z+21	; 0x15
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	dc 01       	movw	r26, r24
    108e:	99 27       	eor	r25, r25
    1090:	88 27       	eor	r24, r24
    1092:	22 8d       	ldd	r18, Z+26	; 0x1a
    1094:	33 8d       	ldd	r19, Z+27	; 0x1b
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	82 2b       	or	r24, r18
    109c:	93 2b       	or	r25, r19
    109e:	a4 2b       	or	r26, r20
    10a0:	b5 2b       	or	r27, r21
    10a2:	f8 01       	movw	r30, r16
    10a4:	84 83       	std	Z+4, r24	; 0x04
    10a6:	95 83       	std	Z+5, r25	; 0x05
    10a8:	a6 83       	std	Z+6, r26	; 0x06
    10aa:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 6e 03 	call	0x6dc	; 0x6dc <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <pf_opendir+0x92>
    10b6:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    10b8:	ac 96       	adiw	r28, 0x2c	; 44
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	08 95       	ret

000010d2 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	ec 97       	sbiw	r28, 0x3c	; 60
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    10f0:	00 91 80 01 	lds	r16, 0x0180
    10f4:	10 91 81 01 	lds	r17, 0x0181


	if (!fs)						/* Check file system */
    10f8:	01 15       	cp	r16, r1
    10fa:	11 05       	cpc	r17, r1
    10fc:	11 f4       	brne	.+4      	; 0x1102 <pf_open+0x30>
    10fe:	66 e0       	ldi	r22, 0x06	; 6
    1100:	40 c0       	rjmp	.+128    	; 0x1182 <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1102:	f8 01       	movw	r30, r16
    1104:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	98 8b       	std	Y+16, r25	; 0x10
    110c:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    110e:	6d e1       	ldi	r22, 0x1D	; 29
    1110:	e6 2e       	mov	r14, r22
    1112:	f1 2c       	mov	r15, r1
    1114:	ec 0e       	add	r14, r28
    1116:	fd 1e       	adc	r15, r29
    1118:	ce 01       	movw	r24, r28
    111a:	0d 96       	adiw	r24, 0x0d	; 13
    111c:	b7 01       	movw	r22, r14
    111e:	0e 94 28 07 	call	0xe50	; 0xe50 <follow_path>
    1122:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    1124:	88 23       	and	r24, r24
    1126:	69 f5       	brne	.+90     	; 0x1182 <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112a:	88 23       	and	r24, r24
    112c:	49 f1       	breq	.+82     	; 0x1180 <pf_open+0xae>
    112e:	88 a5       	ldd	r24, Y+40	; 0x28
    1130:	84 fd       	sbrc	r24, 4
    1132:	26 c0       	rjmp	.+76     	; 0x1180 <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    1134:	f7 01       	movw	r30, r14
    1136:	84 89       	ldd	r24, Z+20	; 0x14
    1138:	95 89       	ldd	r25, Z+21	; 0x15
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	dc 01       	movw	r26, r24
    1140:	99 27       	eor	r25, r25
    1142:	88 27       	eor	r24, r24
    1144:	22 8d       	ldd	r18, Z+26	; 0x1a
    1146:	33 8d       	ldd	r19, Z+27	; 0x1b
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	82 2b       	or	r24, r18
    114e:	93 2b       	or	r25, r19
    1150:	a4 2b       	or	r26, r20
    1152:	b5 2b       	or	r27, r21
    1154:	f8 01       	movw	r30, r16
    1156:	86 8f       	std	Z+30, r24	; 0x1e
    1158:	97 8f       	std	Z+31, r25	; 0x1f
    115a:	a0 a3       	std	Z+32, r26	; 0x20
    115c:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    115e:	f7 01       	movw	r30, r14
    1160:	84 8d       	ldd	r24, Z+28	; 0x1c
    1162:	95 8d       	ldd	r25, Z+29	; 0x1d
    1164:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1166:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1168:	f8 01       	movw	r30, r16
    116a:	82 8f       	std	Z+26, r24	; 0x1a
    116c:	93 8f       	std	Z+27, r25	; 0x1b
    116e:	a4 8f       	std	Z+28, r26	; 0x1c
    1170:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    1172:	16 8a       	std	Z+22, r1	; 0x16
    1174:	17 8a       	std	Z+23, r1	; 0x17
    1176:	10 8e       	std	Z+24, r1	; 0x18
    1178:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	81 83       	std	Z+1, r24	; 0x01
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <pf_open+0xb0>

	return FR_OK;
    1180:	63 e0       	ldi	r22, 0x03	; 3
}
    1182:	86 2f       	mov	r24, r22
    1184:	ec 96       	adiw	r28, 0x3c	; 60
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	08 95       	ret

0000119e <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    119e:	4f 92       	push	r4
    11a0:	5f 92       	push	r5
    11a2:	6f 92       	push	r6
    11a4:	7f 92       	push	r7
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	3c 01       	movw	r6, r24
    11c0:	6b 01       	movw	r12, r22
    11c2:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    11c4:	c0 91 80 01 	lds	r28, 0x0180
    11c8:	d0 91 81 01 	lds	r29, 0x0181


	*br = 0;
    11cc:	fa 01       	movw	r30, r20
    11ce:	11 82       	std	Z+1, r1	; 0x01
    11d0:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    11d2:	20 97       	sbiw	r28, 0x00	; 0
    11d4:	11 f4       	brne	.+4      	; 0x11da <pf_read+0x3c>
    11d6:	86 e0       	ldi	r24, 0x06	; 6
    11d8:	ca c0       	rjmp	.+404    	; 0x136e <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	80 fd       	sbrc	r24, 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <pf_read+0x46>
    11e0:	85 e0       	ldi	r24, 0x05	; 5
    11e2:	c5 c0       	rjmp	.+394    	; 0x136e <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    11e4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    11e6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    11e8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    11ea:	5d 8d       	ldd	r21, Y+29	; 0x1d
    11ec:	8e 89       	ldd	r24, Y+22	; 0x16
    11ee:	9f 89       	ldd	r25, Y+23	; 0x17
    11f0:	a8 8d       	ldd	r26, Y+24	; 0x18
    11f2:	b9 8d       	ldd	r27, Y+25	; 0x19
    11f4:	28 1b       	sub	r18, r24
    11f6:	39 0b       	sbc	r19, r25
    11f8:	4a 0b       	sbc	r20, r26
    11fa:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    11fc:	cb 01       	movw	r24, r22
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	28 17       	cp	r18, r24
    1204:	39 07       	cpc	r19, r25
    1206:	4a 07       	cpc	r20, r26
    1208:	5b 07       	cpc	r21, r27
    120a:	08 f4       	brcc	.+2      	; 0x120e <pf_read+0x70>
    120c:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    120e:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1210:	41 2c       	mov	r4, r1
    1212:	e2 e0       	ldi	r30, 0x02	; 2
    1214:	5e 2e       	mov	r5, r30
    1216:	a3 c0       	rjmp	.+326    	; 0x135e <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1218:	2e 89       	ldd	r18, Y+22	; 0x16
    121a:	3f 89       	ldd	r19, Y+23	; 0x17
    121c:	48 8d       	ldd	r20, Y+24	; 0x18
    121e:	59 8d       	ldd	r21, Y+25	; 0x19
    1220:	da 01       	movw	r26, r20
    1222:	c9 01       	movw	r24, r18
    1224:	91 70       	andi	r25, 0x01	; 1
    1226:	a0 70       	andi	r26, 0x00	; 0
    1228:	b0 70       	andi	r27, 0x00	; 0
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	a1 05       	cpc	r26, r1
    122e:	b1 05       	cpc	r27, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <pf_read+0x96>
    1232:	60 c0       	rjmp	.+192    	; 0x12f4 <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1234:	da 01       	movw	r26, r20
    1236:	c9 01       	movw	r24, r18
    1238:	79 e0       	ldi	r23, 0x09	; 9
    123a:	b6 95       	lsr	r27
    123c:	a7 95       	ror	r26
    123e:	97 95       	ror	r25
    1240:	87 95       	ror	r24
    1242:	7a 95       	dec	r23
    1244:	d1 f7       	brne	.-12     	; 0x123a <pf_read+0x9c>
    1246:	fa 80       	ldd	r15, Y+2	; 0x02
    1248:	fa 94       	dec	r15
    124a:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    124c:	d1 f4       	brne	.+52     	; 0x1282 <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    124e:	21 15       	cp	r18, r1
    1250:	31 05       	cpc	r19, r1
    1252:	41 05       	cpc	r20, r1
    1254:	51 05       	cpc	r21, r1
    1256:	29 f4       	brne	.+10     	; 0x1262 <pf_read+0xc4>
    1258:	6e 8d       	ldd	r22, Y+30	; 0x1e
    125a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    125c:	88 a1       	ldd	r24, Y+32	; 0x20
    125e:	99 a1       	ldd	r25, Y+33	; 0x21
    1260:	06 c0       	rjmp	.+12     	; 0x126e <pf_read+0xd0>
    1262:	6a a1       	ldd	r22, Y+34	; 0x22
    1264:	7b a1       	ldd	r23, Y+35	; 0x23
    1266:	8c a1       	ldd	r24, Y+36	; 0x24
    1268:	9d a1       	ldd	r25, Y+37	; 0x25
    126a:	0e 94 ed 03 	call	0x7da	; 0x7da <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    126e:	62 30       	cpi	r22, 0x02	; 2
    1270:	71 05       	cpc	r23, r1
    1272:	81 05       	cpc	r24, r1
    1274:	91 05       	cpc	r25, r1
    1276:	08 f4       	brcc	.+2      	; 0x127a <pf_read+0xdc>
    1278:	78 c0       	rjmp	.+240    	; 0x136a <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    127a:	6a a3       	std	Y+34, r22	; 0x22
    127c:	7b a3       	std	Y+35, r23	; 0x23
    127e:	8c a3       	std	Y+36, r24	; 0x24
    1280:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1282:	00 91 80 01 	lds	r16, 0x0180
    1286:	10 91 81 01 	lds	r17, 0x0181


	clst -= 2;
    128a:	2a a1       	ldd	r18, Y+34	; 0x22
    128c:	3b a1       	ldd	r19, Y+35	; 0x23
    128e:	4c a1       	ldd	r20, Y+36	; 0x24
    1290:	5d a1       	ldd	r21, Y+37	; 0x25
    1292:	22 50       	subi	r18, 0x02	; 2
    1294:	30 40       	sbci	r19, 0x00	; 0
    1296:	40 40       	sbci	r20, 0x00	; 0
    1298:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    129a:	f8 01       	movw	r30, r16
    129c:	86 81       	ldd	r24, Z+6	; 0x06
    129e:	97 81       	ldd	r25, Z+7	; 0x07
    12a0:	a0 85       	ldd	r26, Z+8	; 0x08
    12a2:	b1 85       	ldd	r27, Z+9	; 0x09
    12a4:	02 97       	sbiw	r24, 0x02	; 2
    12a6:	a1 09       	sbc	r26, r1
    12a8:	b1 09       	sbc	r27, r1
    12aa:	28 17       	cp	r18, r24
    12ac:	39 07       	cpc	r19, r25
    12ae:	4a 07       	cpc	r20, r26
    12b0:	5b 07       	cpc	r21, r27
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <pf_read+0x118>
    12b4:	5a c0       	rjmp	.+180    	; 0x136a <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    12b6:	62 81       	ldd	r22, Z+2	; 0x02
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsi3>
    12c2:	9b 01       	movw	r18, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	f8 01       	movw	r30, r16
    12c8:	82 89       	ldd	r24, Z+18	; 0x12
    12ca:	93 89       	ldd	r25, Z+19	; 0x13
    12cc:	a4 89       	ldd	r26, Z+20	; 0x14
    12ce:	b5 89       	ldd	r27, Z+21	; 0x15
    12d0:	28 0f       	add	r18, r24
    12d2:	39 1f       	adc	r19, r25
    12d4:	4a 1f       	adc	r20, r26
    12d6:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    12d8:	21 15       	cp	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	41 05       	cpc	r20, r1
    12de:	51 05       	cpc	r21, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <pf_read+0x146>
    12e2:	43 c0       	rjmp	.+134    	; 0x136a <pf_read+0x1cc>
			fs->dsect = sect + cs;
    12e4:	2f 0d       	add	r18, r15
    12e6:	31 1d       	adc	r19, r1
    12e8:	41 1d       	adc	r20, r1
    12ea:	51 1d       	adc	r21, r1
    12ec:	2e a3       	std	Y+38, r18	; 0x26
    12ee:	3f a3       	std	Y+39, r19	; 0x27
    12f0:	48 a7       	std	Y+40, r20	; 0x28
    12f2:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    12f4:	2e 89       	ldd	r18, Y+22	; 0x16
    12f6:	3f 89       	ldd	r19, Y+23	; 0x17
    12f8:	31 70       	andi	r19, 0x01	; 1
    12fa:	c2 01       	movw	r24, r4
    12fc:	82 1b       	sub	r24, r18
    12fe:	93 0b       	sbc	r25, r19
    1300:	76 01       	movw	r14, r12
    1302:	8c 15       	cp	r24, r12
    1304:	9d 05       	cpc	r25, r13
    1306:	08 f4       	brcc	.+2      	; 0x130a <pf_read+0x16c>
    1308:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    130a:	61 14       	cp	r6, r1
    130c:	71 04       	cpc	r7, r1
    130e:	19 f4       	brne	.+6      	; 0x1316 <pf_read+0x178>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <pf_read+0x17a>
    1316:	c5 01       	movw	r24, r10
    1318:	4e a1       	ldd	r20, Y+38	; 0x26
    131a:	5f a1       	ldd	r21, Y+39	; 0x27
    131c:	68 a5       	ldd	r22, Y+40	; 0x28
    131e:	79 a5       	ldd	r23, Y+41	; 0x29
    1320:	87 01       	movw	r16, r14
    1322:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
		if (dr) goto fr_abort;
    1326:	88 23       	and	r24, r24
    1328:	01 f5       	brne	.+64     	; 0x136a <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    132a:	c7 01       	movw	r24, r14
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	2e 89       	ldd	r18, Y+22	; 0x16
    1332:	3f 89       	ldd	r19, Y+23	; 0x17
    1334:	48 8d       	ldd	r20, Y+24	; 0x18
    1336:	59 8d       	ldd	r21, Y+25	; 0x19
    1338:	28 0f       	add	r18, r24
    133a:	39 1f       	adc	r19, r25
    133c:	4a 1f       	adc	r20, r26
    133e:	5b 1f       	adc	r21, r27
    1340:	2e 8b       	std	Y+22, r18	; 0x16
    1342:	3f 8b       	std	Y+23, r19	; 0x17
    1344:	48 8f       	std	Y+24, r20	; 0x18
    1346:	59 8f       	std	Y+25, r21	; 0x19
    1348:	ae 0c       	add	r10, r14
    134a:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    134c:	ce 18       	sub	r12, r14
    134e:	df 08       	sbc	r13, r15
    1350:	f4 01       	movw	r30, r8
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	8e 0d       	add	r24, r14
    1358:	9f 1d       	adc	r25, r15
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    135e:	c1 14       	cp	r12, r1
    1360:	d1 04       	cpc	r13, r1
    1362:	09 f0       	breq	.+2      	; 0x1366 <pf_read+0x1c8>
    1364:	59 cf       	rjmp	.-334    	; 0x1218 <pf_read+0x7a>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    136a:	19 82       	std	Y+1, r1	; 0x01
    136c:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	9f 90       	pop	r9
    1384:	8f 90       	pop	r8
    1386:	7f 90       	pop	r7
    1388:	6f 90       	pop	r6
    138a:	5f 90       	pop	r5
    138c:	4f 90       	pop	r4
    138e:	08 95       	ret

00001390 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	b8 2e       	mov	r11, r24
    13a6:	a9 2e       	mov	r10, r25
    13a8:	6a 01       	movw	r12, r20
    13aa:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    13ac:	2e ef       	ldi	r18, 0xFE	; 254
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	02 e0       	ldi	r16, 0x02	; 2
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
    13b8:	88 23       	and	r24, r24
    13ba:	11 f0       	breq	.+4      	; 0x13c0 <check_fs+0x30>
    13bc:	23 e0       	ldi	r18, 0x03	; 3
    13be:	33 c0       	rjmp	.+102    	; 0x1426 <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    13c0:	cb 2d       	mov	r28, r11
    13c2:	da 2d       	mov	r29, r10
    13c4:	88 81       	ld	r24, Y
    13c6:	99 81       	ldd	r25, Y+1	; 0x01
    13c8:	85 55       	subi	r24, 0x55	; 85
    13ca:	9a 4a       	sbci	r25, 0xAA	; 170
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <check_fs+0x42>
    13ce:	22 e0       	ldi	r18, 0x02	; 2
    13d0:	2a c0       	rjmp	.+84     	; 0x1426 <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    13d2:	8b 2d       	mov	r24, r11
    13d4:	9a 2d       	mov	r25, r10
    13d6:	b7 01       	movw	r22, r14
    13d8:	a6 01       	movw	r20, r12
    13da:	26 e3       	ldi	r18, 0x36	; 54
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	02 e0       	ldi	r16, 0x02	; 2
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
    13e6:	88 23       	and	r24, r24
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <check_fs+0x68>
    13ea:	88 81       	ld	r24, Y
    13ec:	99 81       	ldd	r25, Y+1	; 0x01
    13ee:	86 54       	subi	r24, 0x46	; 70
    13f0:	91 44       	sbci	r25, 0x41	; 65
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <check_fs+0x68>
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	17 c0       	rjmp	.+46     	; 0x1426 <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    13f8:	8b 2d       	mov	r24, r11
    13fa:	9a 2d       	mov	r25, r10
    13fc:	b7 01       	movw	r22, r14
    13fe:	a6 01       	movw	r20, r12
    1400:	22 e5       	ldi	r18, 0x52	; 82
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	02 e0       	ldi	r16, 0x02	; 2
    1406:	10 e0       	ldi	r17, 0x00	; 0
    1408:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
    140c:	88 23       	and	r24, r24
    140e:	11 f0       	breq	.+4      	; 0x1414 <check_fs+0x84>
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	09 c0       	rjmp	.+18     	; 0x1426 <check_fs+0x96>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	88 81       	ld	r24, Y
    1418:	99 81       	ldd	r25, Y+1	; 0x01
    141a:	86 54       	subi	r24, 0x46	; 70
    141c:	91 44       	sbci	r25, 0x41	; 65
    141e:	09 f4       	brne	.+2      	; 0x1422 <check_fs+0x92>
    1420:	21 e0       	ldi	r18, 0x01	; 1
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    1426:	82 2f       	mov	r24, r18
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	df 90       	pop	r13
    1436:	cf 90       	pop	r12
    1438:	bf 90       	pop	r11
    143a:	af 90       	pop	r10
    143c:	08 95       	ret

0000143e <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	6f 92       	push	r6
    1444:	7f 92       	push	r7
    1446:	8f 92       	push	r8
    1448:	9f 92       	push	r9
    144a:	af 92       	push	r10
    144c:	bf 92       	push	r11
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	fc 01       	movw	r30, r24
    1460:	5b 01       	movw	r10, r22
    1462:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    1464:	c0 91 80 01 	lds	r28, 0x0180
    1468:	d0 91 81 01 	lds	r29, 0x0181


	*bw = 0;
    146c:	da 01       	movw	r26, r20
    146e:	1d 92       	st	X+, r1
    1470:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1472:	20 97       	sbiw	r28, 0x00	; 0
    1474:	11 f4       	brne	.+4      	; 0x147a <pf_write+0x3c>
    1476:	86 e0       	ldi	r24, 0x06	; 6
    1478:	fd c0       	rjmp	.+506    	; 0x1674 <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	80 fd       	sbrc	r24, 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <pf_write+0x48>
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	f7 c0       	rjmp	.+494    	; 0x1674 <pf_write+0x236>
    1486:	80 74       	andi	r24, 0x40	; 64
    1488:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    148a:	61 15       	cp	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	89 f4       	brne	.+34     	; 0x14b2 <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    1490:	89 2b       	or	r24, r25
    1492:	59 f0       	breq	.+22     	; 0x14aa <pf_write+0x6c>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <disk_writep>
    14a4:	88 23       	and	r24, r24
    14a6:	09 f0       	breq	.+2      	; 0x14aa <pf_write+0x6c>
    14a8:	e3 c0       	rjmp	.+454    	; 0x1670 <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	8f 7b       	andi	r24, 0xBF	; 191
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	dd c0       	rjmp	.+442    	; 0x166c <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    14b2:	89 2b       	or	r24, r25
    14b4:	51 f4       	brne	.+20     	; 0x14ca <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    14b6:	8e 89       	ldd	r24, Y+22	; 0x16
    14b8:	9f 89       	ldd	r25, Y+23	; 0x17
    14ba:	a8 8d       	ldd	r26, Y+24	; 0x18
    14bc:	b9 8d       	ldd	r27, Y+25	; 0x19
    14be:	80 70       	andi	r24, 0x00	; 0
    14c0:	9e 7f       	andi	r25, 0xFE	; 254
    14c2:	8e 8b       	std	Y+22, r24	; 0x16
    14c4:	9f 8b       	std	Y+23, r25	; 0x17
    14c6:	a8 8f       	std	Y+24, r26	; 0x18
    14c8:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    14ca:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14cc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    14ce:	4c 8d       	ldd	r20, Y+28	; 0x1c
    14d0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    14d2:	8e 89       	ldd	r24, Y+22	; 0x16
    14d4:	9f 89       	ldd	r25, Y+23	; 0x17
    14d6:	a8 8d       	ldd	r26, Y+24	; 0x18
    14d8:	b9 8d       	ldd	r27, Y+25	; 0x19
    14da:	28 1b       	sub	r18, r24
    14dc:	39 0b       	sbc	r19, r25
    14de:	4a 0b       	sbc	r20, r26
    14e0:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    14e2:	c5 01       	movw	r24, r10
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	28 17       	cp	r18, r24
    14ea:	39 07       	cpc	r19, r25
    14ec:	4a 07       	cpc	r20, r26
    14ee:	5b 07       	cpc	r21, r27
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <pf_write+0xb6>
    14f2:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    14f4:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    14f6:	41 2c       	mov	r4, r1
    14f8:	a2 e0       	ldi	r26, 0x02	; 2
    14fa:	5a 2e       	mov	r5, r26
    14fc:	b3 c0       	rjmp	.+358    	; 0x1664 <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    14fe:	2e 89       	ldd	r18, Y+22	; 0x16
    1500:	3f 89       	ldd	r19, Y+23	; 0x17
    1502:	48 8d       	ldd	r20, Y+24	; 0x18
    1504:	59 8d       	ldd	r21, Y+25	; 0x19
    1506:	c9 01       	movw	r24, r18
    1508:	91 70       	andi	r25, 0x01	; 1
    150a:	89 2b       	or	r24, r25
    150c:	09 f0       	breq	.+2      	; 0x1510 <pf_write+0xd2>
    150e:	6c c0       	rjmp	.+216    	; 0x15e8 <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1510:	da 01       	movw	r26, r20
    1512:	c9 01       	movw	r24, r18
    1514:	f9 e0       	ldi	r31, 0x09	; 9
    1516:	b6 95       	lsr	r27
    1518:	a7 95       	ror	r26
    151a:	97 95       	ror	r25
    151c:	87 95       	ror	r24
    151e:	fa 95       	dec	r31
    1520:	d1 f7       	brne	.-12     	; 0x1516 <pf_write+0xd8>
    1522:	fa 80       	ldd	r15, Y+2	; 0x02
    1524:	fa 94       	dec	r15
    1526:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    1528:	d1 f4       	brne	.+52     	; 0x155e <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    152a:	21 15       	cp	r18, r1
    152c:	31 05       	cpc	r19, r1
    152e:	41 05       	cpc	r20, r1
    1530:	51 05       	cpc	r21, r1
    1532:	29 f4       	brne	.+10     	; 0x153e <pf_write+0x100>
    1534:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1536:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1538:	88 a1       	ldd	r24, Y+32	; 0x20
    153a:	99 a1       	ldd	r25, Y+33	; 0x21
    153c:	06 c0       	rjmp	.+12     	; 0x154a <pf_write+0x10c>
    153e:	6a a1       	ldd	r22, Y+34	; 0x22
    1540:	7b a1       	ldd	r23, Y+35	; 0x23
    1542:	8c a1       	ldd	r24, Y+36	; 0x24
    1544:	9d a1       	ldd	r25, Y+37	; 0x25
    1546:	0e 94 ed 03 	call	0x7da	; 0x7da <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    154a:	62 30       	cpi	r22, 0x02	; 2
    154c:	71 05       	cpc	r23, r1
    154e:	81 05       	cpc	r24, r1
    1550:	91 05       	cpc	r25, r1
    1552:	08 f4       	brcc	.+2      	; 0x1556 <pf_write+0x118>
    1554:	8d c0       	rjmp	.+282    	; 0x1670 <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    1556:	6a a3       	std	Y+34, r22	; 0x22
    1558:	7b a3       	std	Y+35, r23	; 0x23
    155a:	8c a3       	std	Y+36, r24	; 0x24
    155c:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    155e:	00 91 80 01 	lds	r16, 0x0180
    1562:	10 91 81 01 	lds	r17, 0x0181


	clst -= 2;
    1566:	2a a1       	ldd	r18, Y+34	; 0x22
    1568:	3b a1       	ldd	r19, Y+35	; 0x23
    156a:	4c a1       	ldd	r20, Y+36	; 0x24
    156c:	5d a1       	ldd	r21, Y+37	; 0x25
    156e:	22 50       	subi	r18, 0x02	; 2
    1570:	30 40       	sbci	r19, 0x00	; 0
    1572:	40 40       	sbci	r20, 0x00	; 0
    1574:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1576:	f8 01       	movw	r30, r16
    1578:	86 81       	ldd	r24, Z+6	; 0x06
    157a:	97 81       	ldd	r25, Z+7	; 0x07
    157c:	a0 85       	ldd	r26, Z+8	; 0x08
    157e:	b1 85       	ldd	r27, Z+9	; 0x09
    1580:	02 97       	sbiw	r24, 0x02	; 2
    1582:	a1 09       	sbc	r26, r1
    1584:	b1 09       	sbc	r27, r1
    1586:	28 17       	cp	r18, r24
    1588:	39 07       	cpc	r19, r25
    158a:	4a 07       	cpc	r20, r26
    158c:	5b 07       	cpc	r21, r27
    158e:	08 f0       	brcs	.+2      	; 0x1592 <pf_write+0x154>
    1590:	6f c0       	rjmp	.+222    	; 0x1670 <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    1592:	62 81       	ldd	r22, Z+2	; 0x02
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsi3>
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	f8 01       	movw	r30, r16
    15a4:	82 89       	ldd	r24, Z+18	; 0x12
    15a6:	93 89       	ldd	r25, Z+19	; 0x13
    15a8:	a4 89       	ldd	r26, Z+20	; 0x14
    15aa:	b5 89       	ldd	r27, Z+21	; 0x15
    15ac:	28 0f       	add	r18, r24
    15ae:	39 1f       	adc	r19, r25
    15b0:	4a 1f       	adc	r20, r26
    15b2:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	41 05       	cpc	r20, r1
    15ba:	51 05       	cpc	r21, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <pf_write+0x182>
    15be:	58 c0       	rjmp	.+176    	; 0x1670 <pf_write+0x232>
			fs->dsect = sect + cs;
    15c0:	ba 01       	movw	r22, r20
    15c2:	a9 01       	movw	r20, r18
    15c4:	4f 0d       	add	r20, r15
    15c6:	51 1d       	adc	r21, r1
    15c8:	61 1d       	adc	r22, r1
    15ca:	71 1d       	adc	r23, r1
    15cc:	4e a3       	std	Y+38, r20	; 0x26
    15ce:	5f a3       	std	Y+39, r21	; 0x27
    15d0:	68 a7       	std	Y+40, r22	; 0x28
    15d2:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <disk_writep>
    15dc:	88 23       	and	r24, r24
    15de:	09 f0       	breq	.+2      	; 0x15e2 <pf_write+0x1a4>
    15e0:	47 c0       	rjmp	.+142    	; 0x1670 <pf_write+0x232>
			fs->flag |= FA__WIP;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 64       	ori	r24, 0x40	; 64
    15e6:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    15e8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ea:	9f 89       	ldd	r25, Y+23	; 0x17
    15ec:	91 70       	andi	r25, 0x01	; 1
    15ee:	92 01       	movw	r18, r4
    15f0:	28 1b       	sub	r18, r24
    15f2:	39 0b       	sbc	r19, r25
    15f4:	65 01       	movw	r12, r10
    15f6:	2a 15       	cp	r18, r10
    15f8:	3b 05       	cpc	r19, r11
    15fa:	08 f4       	brcc	.+2      	; 0x15fe <pf_write+0x1c0>
    15fc:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    15fe:	76 01       	movw	r14, r12
    1600:	00 e0       	ldi	r16, 0x00	; 0
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	c4 01       	movw	r24, r8
    1606:	b8 01       	movw	r22, r16
    1608:	a7 01       	movw	r20, r14
    160a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <disk_writep>
    160e:	88 23       	and	r24, r24
    1610:	79 f5       	brne	.+94     	; 0x1670 <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1612:	8e 89       	ldd	r24, Y+22	; 0x16
    1614:	9f 89       	ldd	r25, Y+23	; 0x17
    1616:	a8 8d       	ldd	r26, Y+24	; 0x18
    1618:	b9 8d       	ldd	r27, Y+25	; 0x19
    161a:	8e 0d       	add	r24, r14
    161c:	9f 1d       	adc	r25, r15
    161e:	a0 1f       	adc	r26, r16
    1620:	b1 1f       	adc	r27, r17
    1622:	9c 01       	movw	r18, r24
    1624:	8e 8b       	std	Y+22, r24	; 0x16
    1626:	9f 8b       	std	Y+23, r25	; 0x17
    1628:	a8 8f       	std	Y+24, r26	; 0x18
    162a:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    162c:	d3 01       	movw	r26, r6
    162e:	8d 91       	ld	r24, X+
    1630:	9c 91       	ld	r25, X
    1632:	11 97       	sbiw	r26, 0x01	; 1
    1634:	8c 0d       	add	r24, r12
    1636:	9d 1d       	adc	r25, r13
    1638:	8d 93       	st	X+, r24
    163a:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    163c:	31 70       	andi	r19, 0x01	; 1
    163e:	23 2b       	or	r18, r19
    1640:	69 f4       	brne	.+26     	; 0x165c <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <disk_writep>
    1652:	88 23       	and	r24, r24
    1654:	69 f4       	brne	.+26     	; 0x1670 <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	8f 7b       	andi	r24, 0xBF	; 191
    165a:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    165c:	8c 0c       	add	r8, r12
    165e:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    1660:	ac 18       	sub	r10, r12
    1662:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    1664:	a1 14       	cp	r10, r1
    1666:	b1 04       	cpc	r11, r1
    1668:	09 f0       	breq	.+2      	; 0x166c <pf_write+0x22e>
    166a:	49 cf       	rjmp	.-366    	; 0x14fe <pf_write+0xc0>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	08 95       	ret

00001696 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	a4 97       	sbiw	r28, 0x24	; 36
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    16c4:	10 92 81 01 	sts	0x0181, r1
    16c8:	10 92 80 01 	sts	0x0180, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <pf_mount+0x3c>
    16d0:	ec c0       	rjmp	.+472    	; 0x18aa <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    16d2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <disk_initialize>
    16d6:	80 ff       	sbrs	r24, 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <pf_mount+0x48>
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	eb c0       	rjmp	.+470    	; 0x18b4 <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    16de:	4e 01       	movw	r8, r28
    16e0:	08 94       	sec
    16e2:	81 1c       	adc	r8, r1
    16e4:	91 1c       	adc	r9, r1
    16e6:	c4 01       	movw	r24, r8
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	0e 94 c8 09 	call	0x1390	; 0x1390 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	21 f0       	breq	.+8      	; 0x1700 <pf_mount+0x6a>
    16f8:	cc 24       	eor	r12, r12
    16fa:	dd 24       	eor	r13, r13
    16fc:	76 01       	movw	r14, r12
    16fe:	1b c0       	rjmp	.+54     	; 0x1736 <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1700:	c4 01       	movw	r24, r8
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	2e eb       	ldi	r18, 0xBE	; 190
    170c:	31 e0       	ldi	r19, 0x01	; 1
    170e:	00 e1       	ldi	r16, 0x10	; 16
    1710:	10 e0       	ldi	r17, 0x00	; 0
    1712:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
    1716:	88 23       	and	r24, r24
    1718:	09 f0       	breq	.+2      	; 0x171c <pf_mount+0x86>
    171a:	c9 c0       	rjmp	.+402    	; 0x18ae <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	88 23       	and	r24, r24
    1720:	09 f4       	brne	.+2      	; 0x1724 <pf_mount+0x8e>
    1722:	c7 c0       	rjmp	.+398    	; 0x18b2 <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    1724:	c9 84       	ldd	r12, Y+9	; 0x09
    1726:	da 84       	ldd	r13, Y+10	; 0x0a
    1728:	eb 84       	ldd	r14, Y+11	; 0x0b
    172a:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    172c:	c4 01       	movw	r24, r8
    172e:	b7 01       	movw	r22, r14
    1730:	a6 01       	movw	r20, r12
    1732:	0e 94 c8 09 	call	0x1390	; 0x1390 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	09 f4       	brne	.+2      	; 0x173c <pf_mount+0xa6>
    173a:	b9 c0       	rjmp	.+370    	; 0x18ae <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    173c:	88 23       	and	r24, r24
    173e:	09 f0       	breq	.+2      	; 0x1742 <pf_mount+0xac>
    1740:	b8 c0       	rjmp	.+368    	; 0x18b2 <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1742:	ce 01       	movw	r24, r28
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	b7 01       	movw	r22, r14
    1748:	a6 01       	movw	r20, r12
    174a:	2d e0       	ldi	r18, 0x0D	; 13
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	04 e2       	ldi	r16, 0x24	; 36
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <disk_readp>
    1756:	88 23       	and	r24, r24
    1758:	09 f0       	breq	.+2      	; 0x175c <pf_mount+0xc6>
    175a:	a9 c0       	rjmp	.+338    	; 0x18ae <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    175c:	8a 85       	ldd	r24, Y+10	; 0x0a
    175e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1760:	bc 01       	movw	r22, r24
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    1766:	61 15       	cp	r22, r1
    1768:	71 05       	cpc	r23, r1
    176a:	81 05       	cpc	r24, r1
    176c:	91 05       	cpc	r25, r1
    176e:	21 f4       	brne	.+8      	; 0x1778 <pf_mount+0xe2>
    1770:	68 8d       	ldd	r22, Y+24	; 0x18
    1772:	79 8d       	ldd	r23, Y+25	; 0x19
    1774:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1776:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__mulsi3>
    1784:	3b 01       	movw	r6, r22
    1786:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	c8 0e       	add	r12, r24
    1792:	d9 1e       	adc	r13, r25
    1794:	ea 1e       	adc	r14, r26
    1796:	fb 1e       	adc	r15, r27
    1798:	f5 01       	movw	r30, r10
    179a:	c2 86       	std	Z+10, r12	; 0x0a
    179c:	d3 86       	std	Z+11, r13	; 0x0b
    179e:	e4 86       	std	Z+12, r14	; 0x0c
    17a0:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    17a6:	2d 81       	ldd	r18, Y+5	; 0x05
    17a8:	3e 81       	ldd	r19, Y+6	; 0x06
    17aa:	35 83       	std	Z+5, r19	; 0x05
    17ac:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    17ae:	8f 81       	ldd	r24, Y+7	; 0x07
    17b0:	98 85       	ldd	r25, Y+8	; 0x08
    17b2:	7c 01       	movw	r14, r24
    17b4:	00 e0       	ldi	r16, 0x00	; 0
    17b6:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    17b8:	e1 14       	cp	r14, r1
    17ba:	f1 04       	cpc	r15, r1
    17bc:	01 05       	cpc	r16, r1
    17be:	11 05       	cpc	r17, r1
    17c0:	21 f4       	brne	.+8      	; 0x17ca <pf_mount+0x134>
    17c2:	ec 88       	ldd	r14, Y+20	; 0x14
    17c4:	fd 88       	ldd	r15, Y+21	; 0x15
    17c6:	0e 89       	ldd	r16, Y+22	; 0x16
    17c8:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	9b 81       	ldd	r25, Y+3	; 0x03
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 1a       	sub	r14, r24
    17d4:	f9 0a       	sbc	r15, r25
    17d6:	0a 0b       	sbc	r16, r26
    17d8:	1b 0b       	sbc	r17, r27
    17da:	e6 18       	sub	r14, r6
    17dc:	f7 08       	sbc	r15, r7
    17de:	08 09       	sbc	r16, r8
    17e0:	19 09       	sbc	r17, r9
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	36 95       	lsr	r19
    17e6:	27 95       	ror	r18
    17e8:	8a 95       	dec	r24
    17ea:	e1 f7       	brne	.-8      	; 0x17e4 <pf_mount+0x14e>
    17ec:	c9 01       	movw	r24, r18
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e8 1a       	sub	r14, r24
    17f4:	f9 0a       	sbc	r15, r25
    17f6:	0a 0b       	sbc	r16, r26
    17f8:	1b 0b       	sbc	r17, r27
    17fa:	f5 01       	movw	r30, r10
    17fc:	22 81       	ldd	r18, Z+2	; 0x02
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	c8 01       	movw	r24, r16
    1806:	b7 01       	movw	r22, r14
    1808:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__udivmodsi4>
    180c:	2e 5f       	subi	r18, 0xFE	; 254
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	4f 4f       	sbci	r20, 0xFF	; 255
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    1814:	f5 01       	movw	r30, r10
    1816:	26 83       	std	Z+6, r18	; 0x06
    1818:	37 83       	std	Z+7, r19	; 0x07
    181a:	40 87       	std	Z+8, r20	; 0x08
    181c:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    181e:	27 3f       	cpi	r18, 0xF7	; 247
    1820:	ff e0       	ldi	r31, 0x0F	; 15
    1822:	3f 07       	cpc	r19, r31
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	4f 07       	cpc	r20, r31
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	5f 07       	cpc	r21, r31
    182c:	08 f4       	brcc	.+2      	; 0x1830 <pf_mount+0x19a>
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <pf_mount+0x21c>
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    1830:	27 5f       	subi	r18, 0xF7	; 247
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	40 40       	sbci	r20, 0x00	; 0
    1836:	50 40       	sbci	r21, 0x00	; 0
    1838:	10 f0       	brcs	.+4      	; 0x183e <pf_mount+0x1a8>
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <pf_mount+0x1aa>
    183e:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    1840:	f5 01       	movw	r30, r10
    1842:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	29 f4       	brne	.+10     	; 0x1852 <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1848:	88 a1       	ldd	r24, Y+32	; 0x20
    184a:	99 a1       	ldd	r25, Y+33	; 0x21
    184c:	aa a1       	ldd	r26, Y+34	; 0x22
    184e:	bb a1       	ldd	r27, Y+35	; 0x23
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    1852:	f5 01       	movw	r30, r10
    1854:	82 85       	ldd	r24, Z+10	; 0x0a
    1856:	93 85       	ldd	r25, Z+11	; 0x0b
    1858:	a4 85       	ldd	r26, Z+12	; 0x0c
    185a:	b5 85       	ldd	r27, Z+13	; 0x0d
    185c:	86 0d       	add	r24, r6
    185e:	97 1d       	adc	r25, r7
    1860:	a8 1d       	adc	r26, r8
    1862:	b9 1d       	adc	r27, r9
    1864:	86 87       	std	Z+14, r24	; 0x0e
    1866:	97 87       	std	Z+15, r25	; 0x0f
    1868:	a0 8b       	std	Z+16, r26	; 0x10
    186a:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    186c:	f5 01       	movw	r30, r10
    186e:	84 81       	ldd	r24, Z+4	; 0x04
    1870:	95 81       	ldd	r25, Z+5	; 0x05
    1872:	b4 e0       	ldi	r27, 0x04	; 4
    1874:	96 95       	lsr	r25
    1876:	87 95       	ror	r24
    1878:	ba 95       	dec	r27
    187a:	e1 f7       	brne	.-8      	; 0x1874 <pf_mount+0x1de>
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	22 85       	ldd	r18, Z+10	; 0x0a
    1882:	33 85       	ldd	r19, Z+11	; 0x0b
    1884:	44 85       	ldd	r20, Z+12	; 0x0c
    1886:	55 85       	ldd	r21, Z+13	; 0x0d
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	a4 1f       	adc	r26, r20
    188e:	b5 1f       	adc	r27, r21
    1890:	86 0d       	add	r24, r6
    1892:	97 1d       	adc	r25, r7
    1894:	a8 1d       	adc	r26, r8
    1896:	b9 1d       	adc	r27, r9
    1898:	82 8b       	std	Z+18, r24	; 0x12
    189a:	93 8b       	std	Z+19, r25	; 0x13
    189c:	a4 8b       	std	Z+20, r26	; 0x14
    189e:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    18a0:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    18a2:	b0 92 81 01 	sts	0x0181, r11
    18a6:	a0 92 80 01 	sts	0x0180, r10
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <pf_mount+0x21e>

	return FR_OK;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <pf_mount+0x21e>
    18b2:	87 e0       	ldi	r24, 0x07	; 7
}
    18b4:	a4 96       	adiw	r28, 0x24	; 36
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	08 95       	ret

000018de <init_spi>:
#include <avr/io.h>
#include <util/delay.h>
#include "integer.h"

void init_spi(void){
    DDRB = ( 1 << PB7 ) | ( 1 << PB5 ) | ( 1 << PB4 );
    18de:	80 eb       	ldi	r24, 0xB0	; 176
    18e0:	87 bb       	out	0x17, r24	; 23
    SPCR = ( 1 << SPE ) | ( 1 << MSTR) | ( 1 << SPR1); //SPI Enable+Master+f=f_osc/64
    18e2:	82 e5       	ldi	r24, 0x52	; 82
    18e4:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0;
    18e6:	1e b8       	out	0x0e, r1	; 14
}
    18e8:	08 95       	ret

000018ea <dly_100us>:
    18ea:	84 e1       	ldi	r24, 0x14	; 20
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <dly_100us+0x4>

void dly_100us(void){
    _delay_us(100);
}
    18f2:	08 95       	ret

000018f4 <rcv_spi>:

BYTE rcv_spi(void){
    BYTE data;

    SPDR = 0xff;
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	8f b9       	out	0x0f, r24	; 15
    while ( ! ( SPSR & ( 1 << SPIF ) ) );
    18f8:	77 9b       	sbis	0x0e, 7	; 14
    18fa:	fe cf       	rjmp	.-4      	; 0x18f8 <rcv_spi+0x4>
    data = SPDR;
    18fc:	8f b1       	in	r24, 0x0f	; 15

    return data;
}
    18fe:	08 95       	ret

00001900 <xmit_spi>:

BYTE xmit_spi(BYTE data){
    SPDR = data;
    1900:	8f b9       	out	0x0f, r24	; 15
    while ( ! ( SPSR & ( 1 << SPIF ) ) );
    1902:	77 9b       	sbis	0x0e, 7	; 14
    1904:	fe cf       	rjmp	.-4      	; 0x1902 <xmit_spi+0x2>
    data = SPDR;
    1906:	8f b1       	in	r24, 0x0f	; 15

    return data;
}
    1908:	08 95       	ret

0000190a <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	d8 2e       	mov	r13, r24
    1916:	7a 01       	movw	r14, r20
    1918:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    191a:	87 ff       	sbrs	r24, 7
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    191e:	87 e7       	ldi	r24, 0x77	; 119
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
		if (res > 1) return res;
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	98 f5       	brcc	.+102    	; 0x1996 <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1930:	8f e7       	ldi	r24, 0x7F	; 127
    1932:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    1934:	c2 9a       	sbi	0x18, 2	; 24
	rcv_spi();
    1936:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
	SELECT();
    193a:	c2 98       	cbi	0x18, 2	; 24
	rcv_spi();
    193c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    1940:	8d 2d       	mov	r24, r13
    1942:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1946:	81 2f       	mov	r24, r17
    1948:	99 27       	eor	r25, r25
    194a:	aa 27       	eor	r26, r26
    194c:	bb 27       	eor	r27, r27
    194e:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    1952:	c8 01       	movw	r24, r16
    1954:	aa 27       	eor	r26, r26
    1956:	bb 27       	eor	r27, r27
    1958:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    195c:	bb 27       	eor	r27, r27
    195e:	a1 2f       	mov	r26, r17
    1960:	90 2f       	mov	r25, r16
    1962:	8f 2d       	mov	r24, r15
    1964:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1968:	8e 2d       	mov	r24, r14
    196a:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    196e:	80 e4       	ldi	r24, 0x40	; 64
    1970:	d8 16       	cp	r13, r24
    1972:	11 f4       	brne	.+4      	; 0x1978 <send_cmd+0x6e>
    1974:	85 e9       	ldi	r24, 0x95	; 149
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1978:	88 e4       	ldi	r24, 0x48	; 72
    197a:	d8 16       	cp	r13, r24
    197c:	11 f4       	brne	.+4      	; 0x1982 <send_cmd+0x78>
    197e:	87 e8       	ldi	r24, 0x87	; 135
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <send_cmd+0x7a>
    1982:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    1984:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
    1988:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    198a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
	} while ((res & 0x80) && --n);
    198e:	87 ff       	sbrs	r24, 7
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <send_cmd+0x8c>
    1992:	11 50       	subi	r17, 0x01	; 1
    1994:	d1 f7       	brne	.-12     	; 0x198a <send_cmd+0x80>

	return res;			/* Return with the response value */
}
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	08 95       	ret

000019a2 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	7c 01       	movw	r14, r24
    19b4:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    19b6:	80 91 84 01 	lds	r24, 0x0184
    19ba:	83 fd       	sbrc	r24, 3
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <disk_readp+0x2a>
    19be:	39 e0       	ldi	r19, 0x09	; 9
    19c0:	44 0f       	add	r20, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	66 1f       	adc	r22, r22
    19c6:	77 1f       	adc	r23, r23
    19c8:	3a 95       	dec	r19
    19ca:	d1 f7       	brne	.-12     	; 0x19c0 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    19cc:	81 e5       	ldi	r24, 0x51	; 81
    19ce:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    19d2:	88 23       	and	r24, r24
    19d4:	91 f5       	brne	.+100    	; 0x1a3a <disk_readp+0x98>
    19d6:	c0 e4       	ldi	r28, 0x40	; 64
    19d8:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    19da:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
		} while (rc == 0xFF && --bc);
    19de:	8f 3f       	cpi	r24, 0xFF	; 255
    19e0:	19 f4       	brne	.+6      	; 0x19e8 <disk_readp+0x46>
    19e2:	21 97       	sbiw	r28, 0x01	; 1
    19e4:	d1 f7       	brne	.-12     	; 0x19da <disk_readp+0x38>
    19e6:	29 c0       	rjmp	.+82     	; 0x1a3a <disk_readp+0x98>

		if (rc == 0xFE) {				/* A data packet arrived */
    19e8:	8e 3f       	cpi	r24, 0xFE	; 254
    19ea:	39 f5       	brne	.+78     	; 0x1a3a <disk_readp+0x98>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    19ec:	c1 14       	cp	r12, r1
    19ee:	d1 04       	cpc	r13, r1
    19f0:	29 f0       	breq	.+10     	; 0x19fc <disk_readp+0x5a>
    19f2:	e6 01       	movw	r28, r12
				do rcv_spi(); while (--ofs);
    19f4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    19f8:	21 97       	sbiw	r28, 0x01	; 1
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    19fc:	e1 14       	cp	r14, r1
    19fe:	f1 04       	cpc	r15, r1
    1a00:	49 f0       	breq	.+18     	; 0x1a14 <disk_readp+0x72>
    1a02:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
    1a04:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1a08:	f7 01       	movw	r30, r14
    1a0a:	81 93       	st	Z+, r24
    1a0c:	7f 01       	movw	r14, r30
				} while (--cnt);
    1a0e:	21 97       	sbiw	r28, 0x01	; 1
    1a10:	c9 f7       	brne	.-14     	; 0x1a04 <disk_readp+0x62>
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <disk_readp+0x7c>
    1a14:	e8 01       	movw	r28, r16
			} else {	/* Forward data to the outgoing stream (depends on the project) */
				do {
                    rcv_spi();   //FORWARD(rcv_spi());
    1a16:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
				} while (--cnt);
    1a1a:	21 97       	sbiw	r28, 0x01	; 1
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <disk_readp+0x74>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    1a1e:	cc 27       	eor	r28, r28
    1a20:	dd 27       	eor	r29, r29
    1a22:	cc 19       	sub	r28, r12
    1a24:	dd 09       	sbc	r29, r13
    1a26:	ce 5f       	subi	r28, 0xFE	; 254
    1a28:	dd 4f       	sbci	r29, 0xFD	; 253
    1a2a:	c0 1b       	sub	r28, r16
    1a2c:	d1 0b       	sbc	r29, r17
                    rcv_spi();   //FORWARD(rcv_spi());
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1a2e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1a32:	21 97       	sbiw	r28, 0x01	; 1
    1a34:	e1 f7       	brne	.-8      	; 0x1a2e <disk_readp+0x8c>
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <disk_readp+0x9a>
    1a3a:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
    1a3c:	c2 9a       	sbi	0x18, 2	; 24
	rcv_spi();
    1a3e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>

	return res;
}
    1a42:	81 2f       	mov	r24, r17
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	08 95       	ret

00001a56 <disk_writep>:
#if _USE_WRITE
DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	d9 f0       	breq	.+54     	; 0x1a9a <disk_writep+0x44>
		bc = (WORD)sa;
    1a64:	ea 01       	movw	r28, r20
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1a68:	f8 01       	movw	r30, r16
    1a6a:	81 91       	ld	r24, Z+
    1a6c:	8f 01       	movw	r16, r30
    1a6e:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
			wc--; bc--;
    1a72:	80 91 82 01 	lds	r24, 0x0182
    1a76:	90 91 83 01 	lds	r25, 0x0183
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	90 93 83 01 	sts	0x0183, r25
    1a80:	80 93 82 01 	sts	0x0182, r24
    1a84:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1a86:	20 97       	sbiw	r28, 0x00	; 0
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <disk_writep+0x36>
    1a8a:	52 c0       	rjmp	.+164    	; 0x1b30 <disk_writep+0xda>
    1a8c:	80 91 82 01 	lds	r24, 0x0182
    1a90:	90 91 83 01 	lds	r25, 0x0183
    1a94:	89 2b       	or	r24, r25
    1a96:	41 f7       	brne	.-48     	; 0x1a68 <disk_writep+0x12>
    1a98:	4b c0       	rjmp	.+150    	; 0x1b30 <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1a9a:	41 15       	cp	r20, r1
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	61 05       	cpc	r22, r1
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	f9 f0       	breq	.+62     	; 0x1ae2 <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1aa4:	80 91 84 01 	lds	r24, 0x0184
    1aa8:	83 fd       	sbrc	r24, 3
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <disk_writep+0x64>
    1aac:	e9 e0       	ldi	r30, 0x09	; 9
    1aae:	44 0f       	add	r20, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	ea 95       	dec	r30
    1ab8:	d1 f7       	brne	.-12     	; 0x1aae <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1aba:	88 e5       	ldi	r24, 0x58	; 88
    1abc:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1ac0:	88 23       	and	r24, r24
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <disk_writep+0x72>
    1ac4:	11 e0       	ldi	r17, 0x01	; 1
    1ac6:	35 c0       	rjmp	.+106    	; 0x1b32 <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
    1aca:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
    1ace:	8e ef       	ldi	r24, 0xFE	; 254
    1ad0:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
				wc = 512;							/* Set byte counter */
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	92 e0       	ldi	r25, 0x02	; 2
    1ad8:	90 93 83 01 	sts	0x0183, r25
    1adc:	80 93 82 01 	sts	0x0182, r24
    1ae0:	27 c0       	rjmp	.+78     	; 0x1b30 <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1ae2:	c0 91 82 01 	lds	r28, 0x0182
    1ae6:	d0 91 83 01 	lds	r29, 0x0183
    1aea:	22 96       	adiw	r28, 0x02	; 2
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	0e 94 80 0c 	call	0x1900	; 0x1900 <xmit_spi>
    1af4:	21 97       	sbiw	r28, 0x01	; 1
    1af6:	20 97       	sbiw	r28, 0x00	; 0
    1af8:	d1 f7       	brne	.-12     	; 0x1aee <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    1afa:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1afe:	8f 71       	andi	r24, 0x1F	; 31
    1b00:	85 30       	cpi	r24, 0x05	; 5
    1b02:	89 f4       	brne	.+34     	; 0x1b26 <disk_writep+0xd0>
    1b04:	c8 e8       	ldi	r28, 0x88	; 136
    1b06:	d3 e1       	ldi	r29, 0x13	; 19
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
    1b0a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <dly_100us>
    1b0e:	21 97       	sbiw	r28, 0x01	; 1
    1b10:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1b14:	8f 3f       	cpi	r24, 0xFF	; 255
    1b16:	19 f0       	breq	.+6      	; 0x1b1e <disk_writep+0xc8>
    1b18:	20 97       	sbiw	r28, 0x00	; 0
    1b1a:	b9 f7       	brne	.-18     	; 0x1b0a <disk_writep+0xb4>
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <disk_writep+0xd0>
				if (bc) res = RES_OK;
    1b1e:	cd 2b       	or	r28, r29
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <disk_writep+0xd0>
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <disk_writep+0xd2>
    1b26:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
    1b28:	c2 9a       	sbi	0x18, 2	; 24
			rcv_spi();
    1b2a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <disk_writep+0xdc>
    1b30:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
    1b32:	81 2f       	mov	r24, r17
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	08 95       	ret

00001b3e <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1b3e:	cf 92       	push	r12
    1b40:	df 92       	push	r13
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <disk_initialize+0x12>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <disk_initialize+0x14>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    1b56:	80 91 84 01 	lds	r24, 0x0184
    1b5a:	88 23       	and	r24, r24
    1b5c:	51 f0       	breq	.+20     	; 0x1b72 <disk_initialize+0x34>
    1b5e:	c2 99       	sbic	0x18, 2	; 24
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <disk_initialize+0x34>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
    1b72:	0e 94 6f 0c 	call	0x18de	; 0x18de <init_spi>
	DESELECT();
    1b76:	c2 9a       	sbi	0x18, 2	; 24
    1b78:	88 e8       	ldi	r24, 0x88	; 136
    1b7a:	93 e1       	ldi	r25, 0x13	; 19
    1b7c:	24 e1       	ldi	r18, 0x14	; 20
    1b7e:	31 e0       	ldi	r19, 0x01	; 1
    1b80:	f9 01       	movw	r30, r18
    1b82:	31 97       	sbiw	r30, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <disk_initialize+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	d9 f7       	brne	.-10     	; 0x1b80 <disk_initialize+0x42>
    1b8a:	1a e0       	ldi	r17, 0x0A	; 10
	_delay_ms(500);
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    1b8c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1b90:	11 50       	subi	r17, 0x01	; 1
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <disk_initialize+0x4e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1b94:	80 e4       	ldi	r24, 0x40	; 64
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <disk_initialize+0x6a>
    1ba6:	69 c0       	rjmp	.+210    	; 0x1c7a <disk_initialize+0x13c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1ba8:	88 e4       	ldi	r24, 0x48	; 72
    1baa:	4a ea       	ldi	r20, 0xAA	; 170
    1bac:	51 e0       	ldi	r21, 0x01	; 1
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	e1 f5       	brne	.+120    	; 0x1c32 <disk_initialize+0xf4>
    1bba:	6e 01       	movw	r12, r28
    1bbc:	08 94       	sec
    1bbe:	c1 1c       	adc	r12, r1
    1bc0:	d1 1c       	adc	r13, r1
    1bc2:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1bc4:	8e 01       	movw	r16, r28
    1bc6:	0b 5f       	subi	r16, 0xFB	; 251
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bca:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1bce:	f7 01       	movw	r30, r14
    1bd0:	81 93       	st	Z+, r24
    1bd2:	7f 01       	movw	r14, r30
    1bd4:	e0 17       	cp	r30, r16
    1bd6:	f1 07       	cpc	r31, r17
    1bd8:	c1 f7       	brne	.-16     	; 0x1bca <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <disk_initialize+0xa4>
    1be0:	4c c0       	rjmp	.+152    	; 0x1c7a <disk_initialize+0x13c>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	8a 3a       	cpi	r24, 0xAA	; 170
    1be6:	09 f0       	breq	.+2      	; 0x1bea <disk_initialize+0xac>
    1be8:	48 c0       	rjmp	.+144    	; 0x1c7a <disk_initialize+0x13c>
    1bea:	00 e1       	ldi	r16, 0x10	; 16
    1bec:	17 e2       	ldi	r17, 0x27	; 39
    1bee:	06 c0       	rjmp	.+12     	; 0x1bfc <disk_initialize+0xbe>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1bf0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <dly_100us>
    1bf4:	01 50       	subi	r16, 0x01	; 1
    1bf6:	10 40       	sbci	r17, 0x00	; 0
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <disk_initialize+0xbe>
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <disk_initialize+0x13c>
    1bfc:	89 ee       	ldi	r24, 0xE9	; 233
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e4       	ldi	r23, 0x40	; 64
    1c06:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1c0a:	88 23       	and	r24, r24
    1c0c:	89 f7       	brne	.-30     	; 0x1bf0 <disk_initialize+0xb2>
    1c0e:	4c c0       	rjmp	.+152    	; 0x1ca8 <disk_initialize+0x16a>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1c10:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1c14:	f6 01       	movw	r30, r12
    1c16:	81 93       	st	Z+, r24
    1c18:	6f 01       	movw	r12, r30
    1c1a:	ee 15       	cp	r30, r14
    1c1c:	ff 05       	cpc	r31, r15
    1c1e:	c1 f7       	brne	.-16     	; 0x1c10 <disk_initialize+0xd2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	86 fd       	sbrc	r24, 6
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <disk_initialize+0xee>
    1c26:	04 e0       	ldi	r16, 0x04	; 4
    1c28:	f0 2e       	mov	r15, r16
    1c2a:	28 c0       	rjmp	.+80     	; 0x1c7c <disk_initialize+0x13e>
    1c2c:	1c e0       	ldi	r17, 0x0C	; 12
    1c2e:	f1 2e       	mov	r15, r17
    1c30:	25 c0       	rjmp	.+74     	; 0x1c7c <disk_initialize+0x13e>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1c32:	89 ee       	ldi	r24, 0xE9	; 233
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	28 f0       	brcs	.+10     	; 0x1c4e <disk_initialize+0x110>
    1c44:	b1 e4       	ldi	r27, 0x41	; 65
    1c46:	eb 2e       	mov	r14, r27
    1c48:	ff 24       	eor	r15, r15
    1c4a:	f3 94       	inc	r15
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <disk_initialize+0x118>
    1c4e:	a9 ee       	ldi	r26, 0xE9	; 233
    1c50:	ea 2e       	mov	r14, r26
    1c52:	f2 e0       	ldi	r31, 0x02	; 2
    1c54:	ff 2e       	mov	r15, r31
    1c56:	00 e1       	ldi	r16, 0x10	; 16
    1c58:	17 e2       	ldi	r17, 0x27	; 39
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <disk_initialize+0x128>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    1c5c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <dly_100us>
    1c60:	01 50       	subi	r16, 0x01	; 1
    1c62:	10 40       	sbci	r17, 0x00	; 0
    1c64:	51 f0       	breq	.+20     	; 0x1c7a <disk_initialize+0x13c>
    1c66:	8e 2d       	mov	r24, r14
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1c74:	88 23       	and	r24, r24
    1c76:	91 f7       	brne	.-28     	; 0x1c5c <disk_initialize+0x11e>
    1c78:	22 c0       	rjmp	.+68     	; 0x1cbe <disk_initialize+0x180>
    1c7a:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1c7c:	f0 92 84 01 	sts	0x0184, r15
	DESELECT();
    1c80:	c2 9a       	sbi	0x18, 2	; 24
	rcv_spi();
    1c82:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rcv_spi>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	ff 20       	and	r15, r15
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <disk_initialize+0x150>
    1c8c:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1ca8:	8a e7       	ldi	r24, 0x7A	; 122
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1cb6:	88 23       	and	r24, r24
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <disk_initialize+0x17e>
    1cba:	aa cf       	rjmp	.-172    	; 0x1c10 <disk_initialize+0xd2>
    1cbc:	de cf       	rjmp	.-68     	; 0x1c7a <disk_initialize+0x13c>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1cbe:	80 e5       	ldi	r24, 0x50	; 80
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	52 e0       	ldi	r21, 0x02	; 2
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    1ccc:	88 23       	and	r24, r24
    1cce:	a9 f6       	brne	.-86     	; 0x1c7a <disk_initialize+0x13c>
    1cd0:	d5 cf       	rjmp	.-86     	; 0x1c7c <disk_initialize+0x13e>

00001cd2 <__mulsi3>:
    1cd2:	62 9f       	mul	r22, r18
    1cd4:	d0 01       	movw	r26, r0
    1cd6:	73 9f       	mul	r23, r19
    1cd8:	f0 01       	movw	r30, r0
    1cda:	82 9f       	mul	r24, r18
    1cdc:	e0 0d       	add	r30, r0
    1cde:	f1 1d       	adc	r31, r1
    1ce0:	64 9f       	mul	r22, r20
    1ce2:	e0 0d       	add	r30, r0
    1ce4:	f1 1d       	adc	r31, r1
    1ce6:	92 9f       	mul	r25, r18
    1ce8:	f0 0d       	add	r31, r0
    1cea:	83 9f       	mul	r24, r19
    1cec:	f0 0d       	add	r31, r0
    1cee:	74 9f       	mul	r23, r20
    1cf0:	f0 0d       	add	r31, r0
    1cf2:	65 9f       	mul	r22, r21
    1cf4:	f0 0d       	add	r31, r0
    1cf6:	99 27       	eor	r25, r25
    1cf8:	72 9f       	mul	r23, r18
    1cfa:	b0 0d       	add	r27, r0
    1cfc:	e1 1d       	adc	r30, r1
    1cfe:	f9 1f       	adc	r31, r25
    1d00:	63 9f       	mul	r22, r19
    1d02:	b0 0d       	add	r27, r0
    1d04:	e1 1d       	adc	r30, r1
    1d06:	f9 1f       	adc	r31, r25
    1d08:	bd 01       	movw	r22, r26
    1d0a:	cf 01       	movw	r24, r30
    1d0c:	11 24       	eor	r1, r1
    1d0e:	08 95       	ret

00001d10 <__udivmodsi4>:
    1d10:	a1 e2       	ldi	r26, 0x21	; 33
    1d12:	1a 2e       	mov	r1, r26
    1d14:	aa 1b       	sub	r26, r26
    1d16:	bb 1b       	sub	r27, r27
    1d18:	fd 01       	movw	r30, r26
    1d1a:	0d c0       	rjmp	.+26     	; 0x1d36 <__udivmodsi4_ep>

00001d1c <__udivmodsi4_loop>:
    1d1c:	aa 1f       	adc	r26, r26
    1d1e:	bb 1f       	adc	r27, r27
    1d20:	ee 1f       	adc	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	a2 17       	cp	r26, r18
    1d26:	b3 07       	cpc	r27, r19
    1d28:	e4 07       	cpc	r30, r20
    1d2a:	f5 07       	cpc	r31, r21
    1d2c:	20 f0       	brcs	.+8      	; 0x1d36 <__udivmodsi4_ep>
    1d2e:	a2 1b       	sub	r26, r18
    1d30:	b3 0b       	sbc	r27, r19
    1d32:	e4 0b       	sbc	r30, r20
    1d34:	f5 0b       	sbc	r31, r21

00001d36 <__udivmodsi4_ep>:
    1d36:	66 1f       	adc	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	1a 94       	dec	r1
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <__udivmodsi4_loop>
    1d42:	60 95       	com	r22
    1d44:	70 95       	com	r23
    1d46:	80 95       	com	r24
    1d48:	90 95       	com	r25
    1d4a:	9b 01       	movw	r18, r22
    1d4c:	ac 01       	movw	r20, r24
    1d4e:	bd 01       	movw	r22, r26
    1d50:	cf 01       	movw	r24, r30
    1d52:	08 95       	ret

00001d54 <itoa>:
    1d54:	fb 01       	movw	r30, r22
    1d56:	9f 01       	movw	r18, r30
    1d58:	e8 94       	clt
    1d5a:	42 30       	cpi	r20, 0x02	; 2
    1d5c:	c4 f0       	brlt	.+48     	; 0x1d8e <itoa+0x3a>
    1d5e:	45 32       	cpi	r20, 0x25	; 37
    1d60:	b4 f4       	brge	.+44     	; 0x1d8e <itoa+0x3a>
    1d62:	4a 30       	cpi	r20, 0x0A	; 10
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <itoa+0x1c>
    1d66:	97 fb       	bst	r25, 7
    1d68:	1e f4       	brtc	.+6      	; 0x1d70 <itoa+0x1c>
    1d6a:	90 95       	com	r25
    1d6c:	81 95       	neg	r24
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	64 2f       	mov	r22, r20
    1d72:	77 27       	eor	r23, r23
    1d74:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    1d78:	80 5d       	subi	r24, 0xD0	; 208
    1d7a:	8a 33       	cpi	r24, 0x3A	; 58
    1d7c:	0c f0       	brlt	.+2      	; 0x1d80 <itoa+0x2c>
    1d7e:	89 5d       	subi	r24, 0xD9	; 217
    1d80:	81 93       	st	Z+, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	a1 f7       	brne	.-24     	; 0x1d70 <itoa+0x1c>
    1d88:	16 f4       	brtc	.+4      	; 0x1d8e <itoa+0x3a>
    1d8a:	5d e2       	ldi	r21, 0x2D	; 45
    1d8c:	51 93       	st	Z+, r21
    1d8e:	10 82       	st	Z, r1
    1d90:	c9 01       	movw	r24, r18
    1d92:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <strrev>

00001d96 <sprintf>:
    1d96:	ae e0       	ldi	r26, 0x0E	; 14
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1d9c:	fe e0       	ldi	r31, 0x0E	; 14
    1d9e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x1c>
    1da2:	0d 89       	ldd	r16, Y+21	; 0x15
    1da4:	1e 89       	ldd	r17, Y+22	; 0x16
    1da6:	86 e0       	ldi	r24, 0x06	; 6
    1da8:	8c 83       	std	Y+4, r24	; 0x04
    1daa:	1a 83       	std	Y+2, r17	; 0x02
    1dac:	09 83       	std	Y+1, r16	; 0x01
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	9f e7       	ldi	r25, 0x7F	; 127
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	9e 01       	movw	r18, r28
    1db8:	27 5e       	subi	r18, 0xE7	; 231
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	6f 89       	ldd	r22, Y+23	; 0x17
    1dc2:	78 8d       	ldd	r23, Y+24	; 0x18
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vfprintf>
    1dca:	2f 81       	ldd	r18, Y+7	; 0x07
    1dcc:	38 85       	ldd	r19, Y+8	; 0x08
    1dce:	02 0f       	add	r16, r18
    1dd0:	13 1f       	adc	r17, r19
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	10 82       	st	Z, r1
    1dd6:	2e 96       	adiw	r28, 0x0e	; 14
    1dd8:	e4 e0       	ldi	r30, 0x04	; 4
    1dda:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x1c>

00001dde <vfprintf>:
    1dde:	ab e0       	ldi	r26, 0x0B	; 11
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e5 ef       	ldi	r30, 0xF5	; 245
    1de4:	fe e0       	ldi	r31, 0x0E	; 14
    1de6:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__>
    1dea:	3c 01       	movw	r6, r24
    1dec:	2b 01       	movw	r4, r22
    1dee:	5a 01       	movw	r10, r20
    1df0:	fc 01       	movw	r30, r24
    1df2:	17 82       	std	Z+7, r1	; 0x07
    1df4:	16 82       	std	Z+6, r1	; 0x06
    1df6:	83 81       	ldd	r24, Z+3	; 0x03
    1df8:	81 fd       	sbrc	r24, 1
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <vfprintf+0x24>
    1dfc:	6f ef       	ldi	r22, 0xFF	; 255
    1dfe:	7f ef       	ldi	r23, 0xFF	; 255
    1e00:	c6 c1       	rjmp	.+908    	; 0x218e <vfprintf+0x3b0>
    1e02:	9a e0       	ldi	r25, 0x0A	; 10
    1e04:	89 2e       	mov	r8, r25
    1e06:	1e 01       	movw	r2, r28
    1e08:	08 94       	sec
    1e0a:	21 1c       	adc	r2, r1
    1e0c:	31 1c       	adc	r3, r1
    1e0e:	f3 01       	movw	r30, r6
    1e10:	23 81       	ldd	r18, Z+3	; 0x03
    1e12:	f2 01       	movw	r30, r4
    1e14:	23 fd       	sbrc	r18, 3
    1e16:	85 91       	lpm	r24, Z+
    1e18:	23 ff       	sbrs	r18, 3
    1e1a:	81 91       	ld	r24, Z+
    1e1c:	2f 01       	movw	r4, r30
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <vfprintf+0x46>
    1e22:	b2 c1       	rjmp	.+868    	; 0x2188 <vfprintf+0x3aa>
    1e24:	85 32       	cpi	r24, 0x25	; 37
    1e26:	39 f4       	brne	.+14     	; 0x1e36 <vfprintf+0x58>
    1e28:	23 fd       	sbrc	r18, 3
    1e2a:	85 91       	lpm	r24, Z+
    1e2c:	23 ff       	sbrs	r18, 3
    1e2e:	81 91       	ld	r24, Z+
    1e30:	2f 01       	movw	r4, r30
    1e32:	85 32       	cpi	r24, 0x25	; 37
    1e34:	29 f4       	brne	.+10     	; 0x1e40 <vfprintf+0x62>
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	b3 01       	movw	r22, r6
    1e3a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    1e3e:	e7 cf       	rjmp	.-50     	; 0x1e0e <vfprintf+0x30>
    1e40:	98 2f       	mov	r25, r24
    1e42:	ff 24       	eor	r15, r15
    1e44:	ee 24       	eor	r14, r14
    1e46:	99 24       	eor	r9, r9
    1e48:	ff e1       	ldi	r31, 0x1F	; 31
    1e4a:	ff 15       	cp	r31, r15
    1e4c:	d0 f0       	brcs	.+52     	; 0x1e82 <vfprintf+0xa4>
    1e4e:	9b 32       	cpi	r25, 0x2B	; 43
    1e50:	69 f0       	breq	.+26     	; 0x1e6c <vfprintf+0x8e>
    1e52:	9c 32       	cpi	r25, 0x2C	; 44
    1e54:	28 f4       	brcc	.+10     	; 0x1e60 <vfprintf+0x82>
    1e56:	90 32       	cpi	r25, 0x20	; 32
    1e58:	59 f0       	breq	.+22     	; 0x1e70 <vfprintf+0x92>
    1e5a:	93 32       	cpi	r25, 0x23	; 35
    1e5c:	91 f4       	brne	.+36     	; 0x1e82 <vfprintf+0xa4>
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <vfprintf+0x9e>
    1e60:	9d 32       	cpi	r25, 0x2D	; 45
    1e62:	49 f0       	breq	.+18     	; 0x1e76 <vfprintf+0x98>
    1e64:	90 33       	cpi	r25, 0x30	; 48
    1e66:	69 f4       	brne	.+26     	; 0x1e82 <vfprintf+0xa4>
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	24 c0       	rjmp	.+72     	; 0x1eb4 <vfprintf+0xd6>
    1e6c:	52 e0       	ldi	r21, 0x02	; 2
    1e6e:	f5 2a       	or	r15, r21
    1e70:	84 e0       	ldi	r24, 0x04	; 4
    1e72:	f8 2a       	or	r15, r24
    1e74:	28 c0       	rjmp	.+80     	; 0x1ec6 <vfprintf+0xe8>
    1e76:	98 e0       	ldi	r25, 0x08	; 8
    1e78:	f9 2a       	or	r15, r25
    1e7a:	25 c0       	rjmp	.+74     	; 0x1ec6 <vfprintf+0xe8>
    1e7c:	e0 e1       	ldi	r30, 0x10	; 16
    1e7e:	fe 2a       	or	r15, r30
    1e80:	22 c0       	rjmp	.+68     	; 0x1ec6 <vfprintf+0xe8>
    1e82:	f7 fc       	sbrc	r15, 7
    1e84:	29 c0       	rjmp	.+82     	; 0x1ed8 <vfprintf+0xfa>
    1e86:	89 2f       	mov	r24, r25
    1e88:	80 53       	subi	r24, 0x30	; 48
    1e8a:	8a 30       	cpi	r24, 0x0A	; 10
    1e8c:	70 f4       	brcc	.+28     	; 0x1eaa <vfprintf+0xcc>
    1e8e:	f6 fe       	sbrs	r15, 6
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0xbe>
    1e92:	98 9c       	mul	r9, r8
    1e94:	90 2c       	mov	r9, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	98 0e       	add	r9, r24
    1e9a:	15 c0       	rjmp	.+42     	; 0x1ec6 <vfprintf+0xe8>
    1e9c:	e8 9c       	mul	r14, r8
    1e9e:	e0 2c       	mov	r14, r0
    1ea0:	11 24       	eor	r1, r1
    1ea2:	e8 0e       	add	r14, r24
    1ea4:	f0 e2       	ldi	r31, 0x20	; 32
    1ea6:	ff 2a       	or	r15, r31
    1ea8:	0e c0       	rjmp	.+28     	; 0x1ec6 <vfprintf+0xe8>
    1eaa:	9e 32       	cpi	r25, 0x2E	; 46
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <vfprintf+0xda>
    1eae:	f6 fc       	sbrc	r15, 6
    1eb0:	6b c1       	rjmp	.+726    	; 0x2188 <vfprintf+0x3aa>
    1eb2:	40 e4       	ldi	r20, 0x40	; 64
    1eb4:	f4 2a       	or	r15, r20
    1eb6:	07 c0       	rjmp	.+14     	; 0x1ec6 <vfprintf+0xe8>
    1eb8:	9c 36       	cpi	r25, 0x6C	; 108
    1eba:	19 f4       	brne	.+6      	; 0x1ec2 <vfprintf+0xe4>
    1ebc:	50 e8       	ldi	r21, 0x80	; 128
    1ebe:	f5 2a       	or	r15, r21
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0xe8>
    1ec2:	98 36       	cpi	r25, 0x68	; 104
    1ec4:	49 f4       	brne	.+18     	; 0x1ed8 <vfprintf+0xfa>
    1ec6:	f2 01       	movw	r30, r4
    1ec8:	23 fd       	sbrc	r18, 3
    1eca:	95 91       	lpm	r25, Z+
    1ecc:	23 ff       	sbrs	r18, 3
    1ece:	91 91       	ld	r25, Z+
    1ed0:	2f 01       	movw	r4, r30
    1ed2:	99 23       	and	r25, r25
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <vfprintf+0xfa>
    1ed6:	b8 cf       	rjmp	.-144    	; 0x1e48 <vfprintf+0x6a>
    1ed8:	89 2f       	mov	r24, r25
    1eda:	85 54       	subi	r24, 0x45	; 69
    1edc:	83 30       	cpi	r24, 0x03	; 3
    1ede:	18 f0       	brcs	.+6      	; 0x1ee6 <vfprintf+0x108>
    1ee0:	80 52       	subi	r24, 0x20	; 32
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	38 f4       	brcc	.+14     	; 0x1ef4 <vfprintf+0x116>
    1ee6:	44 e0       	ldi	r20, 0x04	; 4
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	a4 0e       	add	r10, r20
    1eec:	b5 1e       	adc	r11, r21
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	59 83       	std	Y+1, r21	; 0x01
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <vfprintf+0x134>
    1ef4:	93 36       	cpi	r25, 0x63	; 99
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <vfprintf+0x126>
    1ef8:	93 37       	cpi	r25, 0x73	; 115
    1efa:	79 f0       	breq	.+30     	; 0x1f1a <vfprintf+0x13c>
    1efc:	93 35       	cpi	r25, 0x53	; 83
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <vfprintf+0x124>
    1f00:	56 c0       	rjmp	.+172    	; 0x1fae <vfprintf+0x1d0>
    1f02:	20 c0       	rjmp	.+64     	; 0x1f44 <vfprintf+0x166>
    1f04:	f5 01       	movw	r30, r10
    1f06:	80 81       	ld	r24, Z
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	42 e0       	ldi	r20, 0x02	; 2
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	a4 0e       	add	r10, r20
    1f10:	b5 1e       	adc	r11, r21
    1f12:	61 01       	movw	r12, r2
    1f14:	01 e0       	ldi	r16, 0x01	; 1
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	12 c0       	rjmp	.+36     	; 0x1f3e <vfprintf+0x160>
    1f1a:	f5 01       	movw	r30, r10
    1f1c:	c0 80       	ld	r12, Z
    1f1e:	d1 80       	ldd	r13, Z+1	; 0x01
    1f20:	f6 fc       	sbrc	r15, 6
    1f22:	03 c0       	rjmp	.+6      	; 0x1f2a <vfprintf+0x14c>
    1f24:	6f ef       	ldi	r22, 0xFF	; 255
    1f26:	7f ef       	ldi	r23, 0xFF	; 255
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <vfprintf+0x150>
    1f2a:	69 2d       	mov	r22, r9
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	42 e0       	ldi	r20, 0x02	; 2
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	a4 0e       	add	r10, r20
    1f34:	b5 1e       	adc	r11, r21
    1f36:	c6 01       	movw	r24, r12
    1f38:	0e 94 d7 10 	call	0x21ae	; 0x21ae <strnlen>
    1f3c:	8c 01       	movw	r16, r24
    1f3e:	5f e7       	ldi	r21, 0x7F	; 127
    1f40:	f5 22       	and	r15, r21
    1f42:	14 c0       	rjmp	.+40     	; 0x1f6c <vfprintf+0x18e>
    1f44:	f5 01       	movw	r30, r10
    1f46:	c0 80       	ld	r12, Z
    1f48:	d1 80       	ldd	r13, Z+1	; 0x01
    1f4a:	f6 fc       	sbrc	r15, 6
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <vfprintf+0x176>
    1f4e:	6f ef       	ldi	r22, 0xFF	; 255
    1f50:	7f ef       	ldi	r23, 0xFF	; 255
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vfprintf+0x17a>
    1f54:	69 2d       	mov	r22, r9
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	42 e0       	ldi	r20, 0x02	; 2
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	a4 0e       	add	r10, r20
    1f5e:	b5 1e       	adc	r11, r21
    1f60:	c6 01       	movw	r24, r12
    1f62:	0e 94 cc 10 	call	0x2198	; 0x2198 <strnlen_P>
    1f66:	8c 01       	movw	r16, r24
    1f68:	50 e8       	ldi	r21, 0x80	; 128
    1f6a:	f5 2a       	or	r15, r21
    1f6c:	f3 fe       	sbrs	r15, 3
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <vfprintf+0x1a0>
    1f70:	1a c0       	rjmp	.+52     	; 0x1fa6 <vfprintf+0x1c8>
    1f72:	80 e2       	ldi	r24, 0x20	; 32
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	b3 01       	movw	r22, r6
    1f78:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    1f7c:	ea 94       	dec	r14
    1f7e:	8e 2d       	mov	r24, r14
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	08 17       	cp	r16, r24
    1f84:	19 07       	cpc	r17, r25
    1f86:	a8 f3       	brcs	.-22     	; 0x1f72 <vfprintf+0x194>
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <vfprintf+0x1c8>
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	f7 fc       	sbrc	r15, 7
    1f8e:	85 91       	lpm	r24, Z+
    1f90:	f7 fe       	sbrs	r15, 7
    1f92:	81 91       	ld	r24, Z+
    1f94:	6f 01       	movw	r12, r30
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	b3 01       	movw	r22, r6
    1f9a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    1f9e:	e1 10       	cpse	r14, r1
    1fa0:	ea 94       	dec	r14
    1fa2:	01 50       	subi	r16, 0x01	; 1
    1fa4:	10 40       	sbci	r17, 0x00	; 0
    1fa6:	01 15       	cp	r16, r1
    1fa8:	11 05       	cpc	r17, r1
    1faa:	79 f7       	brne	.-34     	; 0x1f8a <vfprintf+0x1ac>
    1fac:	ea c0       	rjmp	.+468    	; 0x2182 <vfprintf+0x3a4>
    1fae:	94 36       	cpi	r25, 0x64	; 100
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <vfprintf+0x1d8>
    1fb2:	99 36       	cpi	r25, 0x69	; 105
    1fb4:	69 f5       	brne	.+90     	; 0x2010 <vfprintf+0x232>
    1fb6:	f7 fe       	sbrs	r15, 7
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <vfprintf+0x1ec>
    1fba:	f5 01       	movw	r30, r10
    1fbc:	20 81       	ld	r18, Z
    1fbe:	31 81       	ldd	r19, Z+1	; 0x01
    1fc0:	42 81       	ldd	r20, Z+2	; 0x02
    1fc2:	53 81       	ldd	r21, Z+3	; 0x03
    1fc4:	84 e0       	ldi	r24, 0x04	; 4
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0a c0       	rjmp	.+20     	; 0x1fde <vfprintf+0x200>
    1fca:	f5 01       	movw	r30, r10
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	9c 01       	movw	r18, r24
    1fd2:	44 27       	eor	r20, r20
    1fd4:	37 fd       	sbrc	r19, 7
    1fd6:	40 95       	com	r20
    1fd8:	54 2f       	mov	r21, r20
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a8 0e       	add	r10, r24
    1fe0:	b9 1e       	adc	r11, r25
    1fe2:	9f e6       	ldi	r25, 0x6F	; 111
    1fe4:	f9 22       	and	r15, r25
    1fe6:	57 ff       	sbrs	r21, 7
    1fe8:	09 c0       	rjmp	.+18     	; 0x1ffc <vfprintf+0x21e>
    1fea:	50 95       	com	r21
    1fec:	40 95       	com	r20
    1fee:	30 95       	com	r19
    1ff0:	21 95       	neg	r18
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	e0 e8       	ldi	r30, 0x80	; 128
    1ffa:	fe 2a       	or	r15, r30
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	b9 01       	movw	r22, r18
    2000:	a1 01       	movw	r20, r2
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	0e 94 1e 11 	call	0x223c	; 0x223c <__ultoa_invert>
    200a:	d8 2e       	mov	r13, r24
    200c:	d2 18       	sub	r13, r2
    200e:	40 c0       	rjmp	.+128    	; 0x2090 <vfprintf+0x2b2>
    2010:	95 37       	cpi	r25, 0x75	; 117
    2012:	29 f4       	brne	.+10     	; 0x201e <vfprintf+0x240>
    2014:	1f 2d       	mov	r17, r15
    2016:	1f 7e       	andi	r17, 0xEF	; 239
    2018:	2a e0       	ldi	r18, 0x0A	; 10
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	1d c0       	rjmp	.+58     	; 0x2058 <vfprintf+0x27a>
    201e:	1f 2d       	mov	r17, r15
    2020:	19 7f       	andi	r17, 0xF9	; 249
    2022:	9f 36       	cpi	r25, 0x6F	; 111
    2024:	61 f0       	breq	.+24     	; 0x203e <vfprintf+0x260>
    2026:	90 37       	cpi	r25, 0x70	; 112
    2028:	20 f4       	brcc	.+8      	; 0x2032 <vfprintf+0x254>
    202a:	98 35       	cpi	r25, 0x58	; 88
    202c:	09 f0       	breq	.+2      	; 0x2030 <vfprintf+0x252>
    202e:	ac c0       	rjmp	.+344    	; 0x2188 <vfprintf+0x3aa>
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <vfprintf+0x272>
    2032:	90 37       	cpi	r25, 0x70	; 112
    2034:	39 f0       	breq	.+14     	; 0x2044 <vfprintf+0x266>
    2036:	98 37       	cpi	r25, 0x78	; 120
    2038:	09 f0       	breq	.+2      	; 0x203c <vfprintf+0x25e>
    203a:	a6 c0       	rjmp	.+332    	; 0x2188 <vfprintf+0x3aa>
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <vfprintf+0x268>
    203e:	28 e0       	ldi	r18, 0x08	; 8
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	0a c0       	rjmp	.+20     	; 0x2058 <vfprintf+0x27a>
    2044:	10 61       	ori	r17, 0x10	; 16
    2046:	14 fd       	sbrc	r17, 4
    2048:	14 60       	ori	r17, 0x04	; 4
    204a:	20 e1       	ldi	r18, 0x10	; 16
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <vfprintf+0x27a>
    2050:	14 fd       	sbrc	r17, 4
    2052:	16 60       	ori	r17, 0x06	; 6
    2054:	20 e1       	ldi	r18, 0x10	; 16
    2056:	32 e0       	ldi	r19, 0x02	; 2
    2058:	17 ff       	sbrs	r17, 7
    205a:	08 c0       	rjmp	.+16     	; 0x206c <vfprintf+0x28e>
    205c:	f5 01       	movw	r30, r10
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	44 e0       	ldi	r20, 0x04	; 4
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	08 c0       	rjmp	.+16     	; 0x207c <vfprintf+0x29e>
    206c:	f5 01       	movw	r30, r10
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	bc 01       	movw	r22, r24
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	42 e0       	ldi	r20, 0x02	; 2
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	a4 0e       	add	r10, r20
    207e:	b5 1e       	adc	r11, r21
    2080:	a1 01       	movw	r20, r2
    2082:	0e 94 1e 11 	call	0x223c	; 0x223c <__ultoa_invert>
    2086:	d8 2e       	mov	r13, r24
    2088:	d2 18       	sub	r13, r2
    208a:	8f e7       	ldi	r24, 0x7F	; 127
    208c:	f8 2e       	mov	r15, r24
    208e:	f1 22       	and	r15, r17
    2090:	f6 fe       	sbrs	r15, 6
    2092:	0b c0       	rjmp	.+22     	; 0x20aa <vfprintf+0x2cc>
    2094:	5e ef       	ldi	r21, 0xFE	; 254
    2096:	f5 22       	and	r15, r21
    2098:	d9 14       	cp	r13, r9
    209a:	38 f4       	brcc	.+14     	; 0x20aa <vfprintf+0x2cc>
    209c:	f4 fe       	sbrs	r15, 4
    209e:	07 c0       	rjmp	.+14     	; 0x20ae <vfprintf+0x2d0>
    20a0:	f2 fc       	sbrc	r15, 2
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <vfprintf+0x2d0>
    20a4:	8f ee       	ldi	r24, 0xEF	; 239
    20a6:	f8 22       	and	r15, r24
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <vfprintf+0x2d0>
    20aa:	1d 2d       	mov	r17, r13
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <vfprintf+0x2d2>
    20ae:	19 2d       	mov	r17, r9
    20b0:	f4 fe       	sbrs	r15, 4
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <vfprintf+0x2f0>
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 0d       	add	r30, r13
    20b8:	f1 1d       	adc	r31, r1
    20ba:	80 81       	ld	r24, Z
    20bc:	80 33       	cpi	r24, 0x30	; 48
    20be:	19 f4       	brne	.+6      	; 0x20c6 <vfprintf+0x2e8>
    20c0:	99 ee       	ldi	r25, 0xE9	; 233
    20c2:	f9 22       	and	r15, r25
    20c4:	08 c0       	rjmp	.+16     	; 0x20d6 <vfprintf+0x2f8>
    20c6:	1f 5f       	subi	r17, 0xFF	; 255
    20c8:	f2 fe       	sbrs	r15, 2
    20ca:	05 c0       	rjmp	.+10     	; 0x20d6 <vfprintf+0x2f8>
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <vfprintf+0x2f6>
    20ce:	8f 2d       	mov	r24, r15
    20d0:	86 78       	andi	r24, 0x86	; 134
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <vfprintf+0x2f8>
    20d4:	1f 5f       	subi	r17, 0xFF	; 255
    20d6:	0f 2d       	mov	r16, r15
    20d8:	f3 fc       	sbrc	r15, 3
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <vfprintf+0x326>
    20dc:	f0 fe       	sbrs	r15, 0
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <vfprintf+0x320>
    20e0:	1e 15       	cp	r17, r14
    20e2:	10 f0       	brcs	.+4      	; 0x20e8 <vfprintf+0x30a>
    20e4:	9d 2c       	mov	r9, r13
    20e6:	0b c0       	rjmp	.+22     	; 0x20fe <vfprintf+0x320>
    20e8:	9d 2c       	mov	r9, r13
    20ea:	9e 0c       	add	r9, r14
    20ec:	91 1a       	sub	r9, r17
    20ee:	1e 2d       	mov	r17, r14
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <vfprintf+0x320>
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	b3 01       	movw	r22, r6
    20f8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    20fc:	1f 5f       	subi	r17, 0xFF	; 255
    20fe:	1e 15       	cp	r17, r14
    2100:	c0 f3       	brcs	.-16     	; 0x20f2 <vfprintf+0x314>
    2102:	04 c0       	rjmp	.+8      	; 0x210c <vfprintf+0x32e>
    2104:	1e 15       	cp	r17, r14
    2106:	10 f4       	brcc	.+4      	; 0x210c <vfprintf+0x32e>
    2108:	e1 1a       	sub	r14, r17
    210a:	01 c0       	rjmp	.+2      	; 0x210e <vfprintf+0x330>
    210c:	ee 24       	eor	r14, r14
    210e:	04 ff       	sbrs	r16, 4
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <vfprintf+0x352>
    2112:	80 e3       	ldi	r24, 0x30	; 48
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	b3 01       	movw	r22, r6
    2118:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    211c:	02 ff       	sbrs	r16, 2
    211e:	1d c0       	rjmp	.+58     	; 0x215a <vfprintf+0x37c>
    2120:	01 fd       	sbrc	r16, 1
    2122:	03 c0       	rjmp	.+6      	; 0x212a <vfprintf+0x34c>
    2124:	88 e7       	ldi	r24, 0x78	; 120
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e c0       	rjmp	.+28     	; 0x2146 <vfprintf+0x368>
    212a:	88 e5       	ldi	r24, 0x58	; 88
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0b c0       	rjmp	.+22     	; 0x2146 <vfprintf+0x368>
    2130:	80 2f       	mov	r24, r16
    2132:	86 78       	andi	r24, 0x86	; 134
    2134:	91 f0       	breq	.+36     	; 0x215a <vfprintf+0x37c>
    2136:	01 ff       	sbrs	r16, 1
    2138:	02 c0       	rjmp	.+4      	; 0x213e <vfprintf+0x360>
    213a:	8b e2       	ldi	r24, 0x2B	; 43
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <vfprintf+0x362>
    213e:	80 e2       	ldi	r24, 0x20	; 32
    2140:	f7 fc       	sbrc	r15, 7
    2142:	8d e2       	ldi	r24, 0x2D	; 45
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	b3 01       	movw	r22, r6
    2148:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    214c:	06 c0       	rjmp	.+12     	; 0x215a <vfprintf+0x37c>
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	b3 01       	movw	r22, r6
    2154:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    2158:	9a 94       	dec	r9
    215a:	d9 14       	cp	r13, r9
    215c:	c0 f3       	brcs	.-16     	; 0x214e <vfprintf+0x370>
    215e:	da 94       	dec	r13
    2160:	f1 01       	movw	r30, r2
    2162:	ed 0d       	add	r30, r13
    2164:	f1 1d       	adc	r31, r1
    2166:	80 81       	ld	r24, Z
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	b3 01       	movw	r22, r6
    216c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    2170:	dd 20       	and	r13, r13
    2172:	a9 f7       	brne	.-22     	; 0x215e <vfprintf+0x380>
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <vfprintf+0x3a4>
    2176:	80 e2       	ldi	r24, 0x20	; 32
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	b3 01       	movw	r22, r6
    217c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <fputc>
    2180:	ea 94       	dec	r14
    2182:	ee 20       	and	r14, r14
    2184:	c1 f7       	brne	.-16     	; 0x2176 <vfprintf+0x398>
    2186:	43 ce       	rjmp	.-890    	; 0x1e0e <vfprintf+0x30>
    2188:	f3 01       	movw	r30, r6
    218a:	66 81       	ldd	r22, Z+6	; 0x06
    218c:	77 81       	ldd	r23, Z+7	; 0x07
    218e:	cb 01       	movw	r24, r22
    2190:	2b 96       	adiw	r28, 0x0b	; 11
    2192:	e2 e1       	ldi	r30, 0x12	; 18
    2194:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__>

00002198 <strnlen_P>:
    2198:	fc 01       	movw	r30, r24
    219a:	05 90       	lpm	r0, Z+
    219c:	61 50       	subi	r22, 0x01	; 1
    219e:	70 40       	sbci	r23, 0x00	; 0
    21a0:	01 10       	cpse	r0, r1
    21a2:	d8 f7       	brcc	.-10     	; 0x219a <strnlen_P+0x2>
    21a4:	80 95       	com	r24
    21a6:	90 95       	com	r25
    21a8:	8e 0f       	add	r24, r30
    21aa:	9f 1f       	adc	r25, r31
    21ac:	08 95       	ret

000021ae <strnlen>:
    21ae:	fc 01       	movw	r30, r24
    21b0:	61 50       	subi	r22, 0x01	; 1
    21b2:	70 40       	sbci	r23, 0x00	; 0
    21b4:	01 90       	ld	r0, Z+
    21b6:	01 10       	cpse	r0, r1
    21b8:	d8 f7       	brcc	.-10     	; 0x21b0 <strnlen+0x2>
    21ba:	80 95       	com	r24
    21bc:	90 95       	com	r25
    21be:	8e 0f       	add	r24, r30
    21c0:	9f 1f       	adc	r25, r31
    21c2:	08 95       	ret

000021c4 <strrev>:
    21c4:	dc 01       	movw	r26, r24
    21c6:	fc 01       	movw	r30, r24
    21c8:	67 2f       	mov	r22, r23
    21ca:	71 91       	ld	r23, Z+
    21cc:	77 23       	and	r23, r23
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <strrev+0x4>
    21d0:	32 97       	sbiw	r30, 0x02	; 2
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <strrev+0x18>
    21d4:	7c 91       	ld	r23, X
    21d6:	6d 93       	st	X+, r22
    21d8:	70 83       	st	Z, r23
    21da:	62 91       	ld	r22, -Z
    21dc:	ae 17       	cp	r26, r30
    21de:	bf 07       	cpc	r27, r31
    21e0:	c8 f3       	brcs	.-14     	; 0x21d4 <strrev+0x10>
    21e2:	08 95       	ret

000021e4 <fputc>:
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	8c 01       	movw	r16, r24
    21ee:	eb 01       	movw	r28, r22
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	81 ff       	sbrs	r24, 1
    21f4:	1b c0       	rjmp	.+54     	; 0x222c <fputc+0x48>
    21f6:	82 ff       	sbrs	r24, 2
    21f8:	0d c0       	rjmp	.+26     	; 0x2214 <fputc+0x30>
    21fa:	2e 81       	ldd	r18, Y+6	; 0x06
    21fc:	3f 81       	ldd	r19, Y+7	; 0x07
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	28 17       	cp	r18, r24
    2204:	39 07       	cpc	r19, r25
    2206:	64 f4       	brge	.+24     	; 0x2220 <fputc+0x3c>
    2208:	e8 81       	ld	r30, Y
    220a:	f9 81       	ldd	r31, Y+1	; 0x01
    220c:	01 93       	st	Z+, r16
    220e:	f9 83       	std	Y+1, r31	; 0x01
    2210:	e8 83       	st	Y, r30
    2212:	06 c0       	rjmp	.+12     	; 0x2220 <fputc+0x3c>
    2214:	e8 85       	ldd	r30, Y+8	; 0x08
    2216:	f9 85       	ldd	r31, Y+9	; 0x09
    2218:	80 2f       	mov	r24, r16
    221a:	09 95       	icall
    221c:	89 2b       	or	r24, r25
    221e:	31 f4       	brne	.+12     	; 0x222c <fputc+0x48>
    2220:	8e 81       	ldd	r24, Y+6	; 0x06
    2222:	9f 81       	ldd	r25, Y+7	; 0x07
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	9f 83       	std	Y+7, r25	; 0x07
    2228:	8e 83       	std	Y+6, r24	; 0x06
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <fputc+0x4c>
    222c:	0f ef       	ldi	r16, 0xFF	; 255
    222e:	1f ef       	ldi	r17, 0xFF	; 255
    2230:	c8 01       	movw	r24, r16
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <__ultoa_invert>:
    223c:	fa 01       	movw	r30, r20
    223e:	aa 27       	eor	r26, r26
    2240:	28 30       	cpi	r18, 0x08	; 8
    2242:	51 f1       	breq	.+84     	; 0x2298 <__ultoa_invert+0x5c>
    2244:	20 31       	cpi	r18, 0x10	; 16
    2246:	81 f1       	breq	.+96     	; 0x22a8 <__ultoa_invert+0x6c>
    2248:	e8 94       	clt
    224a:	6f 93       	push	r22
    224c:	6e 7f       	andi	r22, 0xFE	; 254
    224e:	6e 5f       	subi	r22, 0xFE	; 254
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
    2252:	8f 4f       	sbci	r24, 0xFF	; 255
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	af 4f       	sbci	r26, 0xFF	; 255
    2258:	b1 e0       	ldi	r27, 0x01	; 1
    225a:	3e d0       	rcall	.+124    	; 0x22d8 <__ultoa_invert+0x9c>
    225c:	b4 e0       	ldi	r27, 0x04	; 4
    225e:	3c d0       	rcall	.+120    	; 0x22d8 <__ultoa_invert+0x9c>
    2260:	67 0f       	add	r22, r23
    2262:	78 1f       	adc	r23, r24
    2264:	89 1f       	adc	r24, r25
    2266:	9a 1f       	adc	r25, r26
    2268:	a1 1d       	adc	r26, r1
    226a:	68 0f       	add	r22, r24
    226c:	79 1f       	adc	r23, r25
    226e:	8a 1f       	adc	r24, r26
    2270:	91 1d       	adc	r25, r1
    2272:	a1 1d       	adc	r26, r1
    2274:	6a 0f       	add	r22, r26
    2276:	71 1d       	adc	r23, r1
    2278:	81 1d       	adc	r24, r1
    227a:	91 1d       	adc	r25, r1
    227c:	a1 1d       	adc	r26, r1
    227e:	20 d0       	rcall	.+64     	; 0x22c0 <__ultoa_invert+0x84>
    2280:	09 f4       	brne	.+2      	; 0x2284 <__ultoa_invert+0x48>
    2282:	68 94       	set
    2284:	3f 91       	pop	r19
    2286:	2a e0       	ldi	r18, 0x0A	; 10
    2288:	26 9f       	mul	r18, r22
    228a:	11 24       	eor	r1, r1
    228c:	30 19       	sub	r19, r0
    228e:	30 5d       	subi	r19, 0xD0	; 208
    2290:	31 93       	st	Z+, r19
    2292:	de f6       	brtc	.-74     	; 0x224a <__ultoa_invert+0xe>
    2294:	cf 01       	movw	r24, r30
    2296:	08 95       	ret
    2298:	46 2f       	mov	r20, r22
    229a:	47 70       	andi	r20, 0x07	; 7
    229c:	40 5d       	subi	r20, 0xD0	; 208
    229e:	41 93       	st	Z+, r20
    22a0:	b3 e0       	ldi	r27, 0x03	; 3
    22a2:	0f d0       	rcall	.+30     	; 0x22c2 <__ultoa_invert+0x86>
    22a4:	c9 f7       	brne	.-14     	; 0x2298 <__ultoa_invert+0x5c>
    22a6:	f6 cf       	rjmp	.-20     	; 0x2294 <__ultoa_invert+0x58>
    22a8:	46 2f       	mov	r20, r22
    22aa:	4f 70       	andi	r20, 0x0F	; 15
    22ac:	40 5d       	subi	r20, 0xD0	; 208
    22ae:	4a 33       	cpi	r20, 0x3A	; 58
    22b0:	18 f0       	brcs	.+6      	; 0x22b8 <__ultoa_invert+0x7c>
    22b2:	49 5d       	subi	r20, 0xD9	; 217
    22b4:	31 fd       	sbrc	r19, 1
    22b6:	40 52       	subi	r20, 0x20	; 32
    22b8:	41 93       	st	Z+, r20
    22ba:	02 d0       	rcall	.+4      	; 0x22c0 <__ultoa_invert+0x84>
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <__ultoa_invert+0x6c>
    22be:	ea cf       	rjmp	.-44     	; 0x2294 <__ultoa_invert+0x58>
    22c0:	b4 e0       	ldi	r27, 0x04	; 4
    22c2:	a6 95       	lsr	r26
    22c4:	97 95       	ror	r25
    22c6:	87 95       	ror	r24
    22c8:	77 95       	ror	r23
    22ca:	67 95       	ror	r22
    22cc:	ba 95       	dec	r27
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <__ultoa_invert+0x86>
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	61 05       	cpc	r22, r1
    22d4:	71 05       	cpc	r23, r1
    22d6:	08 95       	ret
    22d8:	9b 01       	movw	r18, r22
    22da:	ac 01       	movw	r20, r24
    22dc:	0a 2e       	mov	r0, r26
    22de:	06 94       	lsr	r0
    22e0:	57 95       	ror	r21
    22e2:	47 95       	ror	r20
    22e4:	37 95       	ror	r19
    22e6:	27 95       	ror	r18
    22e8:	ba 95       	dec	r27
    22ea:	c9 f7       	brne	.-14     	; 0x22de <__ultoa_invert+0xa2>
    22ec:	62 0f       	add	r22, r18
    22ee:	73 1f       	adc	r23, r19
    22f0:	84 1f       	adc	r24, r20
    22f2:	95 1f       	adc	r25, r21
    22f4:	a0 1d       	adc	r26, r0
    22f6:	08 95       	ret

000022f8 <__udivmodhi4>:
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	51 e1       	ldi	r21, 0x11	; 17
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <__udivmodhi4_ep>

00002300 <__udivmodhi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	a6 17       	cp	r26, r22
    2306:	b7 07       	cpc	r27, r23
    2308:	10 f0       	brcs	.+4      	; 0x230e <__udivmodhi4_ep>
    230a:	a6 1b       	sub	r26, r22
    230c:	b7 0b       	sbc	r27, r23

0000230e <__udivmodhi4_ep>:
    230e:	88 1f       	adc	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	5a 95       	dec	r21
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__udivmodhi4_loop>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	08 95       	ret

00002320 <__prologue_saves__>:
    2320:	2f 92       	push	r2
    2322:	3f 92       	push	r3
    2324:	4f 92       	push	r4
    2326:	5f 92       	push	r5
    2328:	6f 92       	push	r6
    232a:	7f 92       	push	r7
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	ca 1b       	sub	r28, r26
    234a:	db 0b       	sbc	r29, r27
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	09 94       	ijmp

00002358 <__epilogue_restores__>:
    2358:	2a 88       	ldd	r2, Y+18	; 0x12
    235a:	39 88       	ldd	r3, Y+17	; 0x11
    235c:	48 88       	ldd	r4, Y+16	; 0x10
    235e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2360:	6e 84       	ldd	r6, Y+14	; 0x0e
    2362:	7d 84       	ldd	r7, Y+13	; 0x0d
    2364:	8c 84       	ldd	r8, Y+12	; 0x0c
    2366:	9b 84       	ldd	r9, Y+11	; 0x0b
    2368:	aa 84       	ldd	r10, Y+10	; 0x0a
    236a:	b9 84       	ldd	r11, Y+9	; 0x09
    236c:	c8 84       	ldd	r12, Y+8	; 0x08
    236e:	df 80       	ldd	r13, Y+7	; 0x07
    2370:	ee 80       	ldd	r14, Y+6	; 0x06
    2372:	fd 80       	ldd	r15, Y+5	; 0x05
    2374:	0c 81       	ldd	r16, Y+4	; 0x04
    2376:	1b 81       	ldd	r17, Y+3	; 0x03
    2378:	aa 81       	ldd	r26, Y+2	; 0x02
    237a:	b9 81       	ldd	r27, Y+1	; 0x01
    237c:	ce 0f       	add	r28, r30
    237e:	d1 1d       	adc	r29, r1
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	ed 01       	movw	r28, r26
    238c:	08 95       	ret

0000238e <_exit>:
    238e:	f8 94       	cli

00002390 <__stop_program>:
    2390:	ff cf       	rjmp	.-2      	; 0x2390 <__stop_program>
